[
  {
    "number": 16,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-02-27T16:33:51Z",
    "updatedAt": "2025-03-07T08:45:24Z",
    "user": "gounthar",
    "repository": "jenkinsci/42crunch-security-audit-plugin",
    "pluginName": "42crunch-security-audit",
    "labels": null,
    "url": "https://github.com/jenkinsci/42crunch-security-audit-plugin/pull/16",
    "description": "Hello 42crunch-security-audit developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 26,
    "title": "chore(github): Add CODEOWNERS",
    "state": "OPEN",
    "createdAt": "2025-02-24T19:30:04Z",
    "updatedAt": "2025-02-24T19:30:04Z",
    "user": "gounthar",
    "repository": "jenkinsci/ansible-tower-plugin",
    "pluginName": "ansible-tower",
    "labels": null,
    "url": "https://github.com/jenkinsci/ansible-tower-plugin/pull/26",
    "description": "Hello ansible-tower developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 27,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-02-24T19:32:58Z",
    "updatedAt": "2025-02-24T19:46:44Z",
    "user": "gounthar",
    "repository": "jenkinsci/ansible-tower-plugin",
    "pluginName": "ansible-tower",
    "labels": null,
    "url": "https://github.com/jenkinsci/ansible-tower-plugin/pull/27",
    "description": "Hello ansible-tower developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 28,
    "title": "chore(dependencies): Automate dependency updates with Dependabot",
    "state": "OPEN",
    "createdAt": "2025-02-24T19:47:21Z",
    "updatedAt": "2025-02-24T19:47:21Z",
    "user": "gounthar",
    "repository": "jenkinsci/ansible-tower-plugin",
    "pluginName": "ansible-tower",
    "labels": null,
    "url": "https://github.com/jenkinsci/ansible-tower-plugin/pull/28",
    "description": "Hello ansible-tower developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup dependabot\n    io.jenkins.tools.pluginmodernizer.SetupDependabot\n    Setup dependabot for the Jenkins plugin if it doesn't exist.\n\nWhy Automate with Dependabot?\nManaging dependencies can be a time-consuming and challenging task, especially when maintaining a Jenkins plugin.\nBy automating this process with Dependabot, you gain numerous advantages:\n\n\nKeep Pace with Innovation: Dependabot ensures\nyour plugin remains cutting-edge by promptly incorporating the latest features and enhancements from upstream libraries.\n\n\nStrengthen Security: Staying up-to-date with dependency updates is crucial for security.\nDependabot automatically flags and updates any vulnerable dependencies,\nhelping to protect your plugin from potential exploits.\n\n\nSave Time and Effort: Spend less time managing dependencies and more time innovating.\nDependabot automatically submits pull requests for new releases,\nallowing you to effortlessly review and integrate updates.\n\n\nEnhance Compatibility and Stability: Regular updates improve both performance and compatibility with other plugins and the Jenkins core,\nensuring a seamless experience for your users.\n\n\nImprove GitHub Integration: Dependabot streamlines and enhances the integration process with GitHub,\nmaking it easier to manage updates.\n\n\nEnhance the plugin health score: Regular updates contribute to a better health score by ensuring your plugin is reliable and up-to-date.\n\n\nFocus on What Matters: With Dependabot, you can concentrate on developing new features and fixing bugs, knowing that it handles dependency updates efficiently.\n\n\nSetting up Dependabot exemplifies a proactive approach to modern software maintenance, aligning your plugin with best practices in the industry. We invite you to test these updates and adopt a maintenance workflow that is both efficient and secure.\nYour insights and feedback are invaluable to us, and we are here to support you through this transition as needed.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 309,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-29T12:38:59Z",
    "updatedAt": "2025-01-02T18:57:00Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/ansicolor-plugin",
    "pluginName": "ansicolor",
    "labels": null,
    "url": "https://github.com/jenkinsci/ansicolor-plugin/pull/309",
    "description": "Hello ansicolor developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 156,
    "title": "Require 2.452.4",
    "state": "CLOSED",
    "createdAt": "2024-12-29T05:29:28Z",
    "updatedAt": "2025-02-22T17:59:24Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/ant-plugin",
    "pluginName": "ant",
    "labels": null,
    "url": "https://github.com/jenkinsci/ant-plugin/pull/156",
    "description": "Hello ant developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 6,
    "title": "feat: upgrade to Jenkins LTS Core 2.462.3 for Java 11 support",
    "state": "OPEN",
    "createdAt": "2025-02-19T18:19:52Z",
    "updatedAt": "2025-02-19T18:19:52Z",
    "user": "gounthar",
    "repository": "jenkinsci/appknox-scanner-plugin",
    "pluginName": "appknox-scanner",
    "labels": null,
    "url": "https://github.com/jenkinsci/appknox-scanner-plugin/pull/6",
    "description": "Hello appknox-scanner developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 11\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava11CoreVersion\n    Upgrade to latest LTS core version supporting Java 11.\n\nWhy is this important?\nTransitional Step to Java 17\nUpgrading to Jenkins LTS Core 2.462.3 is a critical step in our roadmap towards leveraging Java 17. This transition serves as an intermediary phase, ensuring that all systems are optimized for Java 11 before making the leap to Java 17.\nEnhancements and Security\nBy moving to this LTS version, we benefit from the latest performance and security improvements foundational to Java 11. Ensuring our dependencies are up-to-date and secure prepares the groundwork for a smoother transition to Java 17.\nLong-Term Support\nThe LTS version provides the necessary support and stability for Java 11, offering assurance during our gradual migration process. This allows us to take advantage of long-term updates and critical patches.\nEmbracing these incremental changes aligns our development environment with current standards and strategically positions us for future advancement. We appreciate your feedback and testing as we aim for a seamless adjustment period.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 7,
    "title": "feat(java): Require Jenkins core 2.479.1 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-02-19T18:27:53Z",
    "updatedAt": "2025-02-19T18:27:53Z",
    "user": "gounthar",
    "repository": "jenkinsci/appknox-scanner-plugin",
    "pluginName": "appknox-scanner",
    "labels": null,
    "url": "https://github.com/jenkinsci/appknox-scanner-plugin/pull/7",
    "description": "Hello appknox-scanner developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nThe checks aren't checking, why is that?\nThe issue likely stems from your Jenkinsfile, which is still declaring Java 8 or 11.\nThe Jenkins infrastructure, in its wisdom, continues to use this, and does not allow the use of a Jenkinsfile supplied by a pull request.\nTo resolve this, a maintainer can replay the failed build by substituting the Jenkinsfile content with our proposed changes using the \"replay the build\" feature in Jenkins.\nPlease let us know if you need any assistance with this process.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 83,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-25T10:06:07Z",
    "updatedAt": "2025-02-25T13:05:01Z",
    "user": "gounthar",
    "repository": "jenkinsci/artifactdeployer-plugin",
    "pluginName": "artifactdeployer",
    "labels": [
      "dependencies",
      "feature"
    ],
    "url": "https://github.com/jenkinsci/artifactdeployer-plugin/pull/83",
    "description": "Hello artifactdeployer developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 100,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:17:16Z",
    "updatedAt": "2025-02-22T19:18:19Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/artifactory-artifact-manager-plugin",
    "pluginName": "artifactory-artifact-manager",
    "labels": [
      "developer",
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/artifactory-artifact-manager-plugin/pull/100",
    "description": "Hello artifactory-artifact-manager developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 81,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:08:51Z",
    "updatedAt": "2024-10-26T06:30:20Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/artifactory-artifact-manager-plugin",
    "pluginName": "artifactory-artifact-manager",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/artifactory-artifact-manager-plugin/pull/81",
    "description": "Hello artifactory-artifact-manager developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 30,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:09:58Z",
    "updatedAt": "2024-10-26T06:30:27Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/artifactory-client-api-plugin",
    "pluginName": "artifactory-client-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/artifactory-client-api-plugin/pull/30",
    "description": "Hello artifactory-client-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 39,
    "title": "Bump bom to 3814.v9563d972079a_",
    "state": "MERGED",
    "createdAt": "2024-12-18T05:44:21Z",
    "updatedAt": "2024-12-18T05:50:32Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/artifactory-client-api-plugin",
    "pluginName": "artifactory-client-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/artifactory-client-api-plugin/pull/39",
    "description": "Hello artifactory-client-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 47,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T15:38:26Z",
    "updatedAt": "2025-02-22T16:58:26Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/artifactory-client-api-plugin",
    "pluginName": "artifactory-client-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/artifactory-client-api-plugin/pull/47",
    "description": "Hello artifactory-client-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 52,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:10:55Z",
    "updatedAt": "2024-10-26T06:30:02Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/asm-api-plugin",
    "pluginName": "asm-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/asm-api-plugin/pull/52",
    "description": "Hello asm-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 70,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T15:39:50Z",
    "updatedAt": "2025-02-22T16:58:33Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/asm-api-plugin",
    "pluginName": "asm-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/asm-api-plugin/pull/70",
    "description": "Hello asm-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 243,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:12:13Z",
    "updatedAt": "2024-10-26T06:30:08Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/bitbucket-kubernetes-credentials-plugin",
    "pluginName": "bitbucket-kubernetes-credentials",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/bitbucket-kubernetes-credentials-plugin/pull/243",
    "description": "Hello bitbucket-kubernetes-credentials developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 268,
    "title": "feat(java): Require Jenkins core 2.479.1 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-19T18:34:43Z",
    "updatedAt": "2025-02-19T19:43:11Z",
    "user": "gounthar",
    "repository": "jenkinsci/bitbucket-kubernetes-credentials-plugin",
    "pluginName": "bitbucket-kubernetes-credentials",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/bitbucket-kubernetes-credentials-plugin/pull/268",
    "description": "Hello bitbucket-kubernetes-credentials developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nThe checks aren't checking, why is that?\nThe issue likely stems from your Jenkinsfile, which is still declaring Java 8 or 11.\nThe Jenkins infrastructure, in its wisdom, continues to use this, and does not allow the use of a Jenkinsfile supplied by a pull request.\nTo resolve this, a maintainer can replay the failed build by substituting the Jenkinsfile content with our proposed changes using the \"replay the build\" feature in Jenkins.\nPlease let us know if you need any assistance with this process.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 269,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:19:15Z",
    "updatedAt": "2025-02-22T19:18:46Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/bitbucket-kubernetes-credentials-plugin",
    "pluginName": "bitbucket-kubernetes-credentials",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/bitbucket-kubernetes-credentials-plugin/pull/269",
    "description": "Hello bitbucket-kubernetes-credentials developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 3,
    "title": "feat: upgrade to Jenkins LTS Core 2.462.3 for Java 11 support",
    "state": "OPEN",
    "createdAt": "2025-02-19T18:44:24Z",
    "updatedAt": "2025-02-19T18:44:24Z",
    "user": "gounthar",
    "repository": "jenkinsci/black-duck-sigma-plugin",
    "pluginName": "black-duck-sigma",
    "labels": null,
    "url": "https://github.com/jenkinsci/black-duck-sigma-plugin/pull/3",
    "description": "Hello black-duck-sigma developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 11\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava11CoreVersion\n    Upgrade to latest LTS core version supporting Java 11.\n\nWhy is this important?\nTransitional Step to Java 17\nUpgrading to Jenkins LTS Core 2.462.3 is a critical step in our roadmap towards leveraging Java 17. This transition serves as an intermediary phase, ensuring that all systems are optimized for Java 11 before making the leap to Java 17.\nEnhancements and Security\nBy moving to this LTS version, we benefit from the latest performance and security improvements foundational to Java 11. Ensuring our dependencies are up-to-date and secure prepares the groundwork for a smoother transition to Java 17.\nLong-Term Support\nThe LTS version provides the necessary support and stability for Java 11, offering assurance during our gradual migration process. This allows us to take advantage of long-term updates and critical patches.\nEmbracing these incremental changes aligns our development environment with current standards and strategically positions us for future advancement. We appreciate your feedback and testing as we aim for a seamless adjustment period.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 4,
    "title": "feat(java): Require Jenkins core 2.479.1 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-02-19T18:47:52Z",
    "updatedAt": "2025-02-19T18:47:52Z",
    "user": "gounthar",
    "repository": "jenkinsci/black-duck-sigma-plugin",
    "pluginName": "black-duck-sigma",
    "labels": null,
    "url": "https://github.com/jenkinsci/black-duck-sigma-plugin/pull/4",
    "description": "Hello black-duck-sigma developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nThe checks aren't checking, why is that?\nThe issue likely stems from your Jenkinsfile, which is still declaring Java 8 or 11.\nThe Jenkins infrastructure, in its wisdom, continues to use this, and does not allow the use of a Jenkinsfile supplied by a pull request.\nTo resolve this, a maintainer can replay the failed build by substituting the Jenkinsfile content with our proposed changes using the \"replay the build\" feature in Jenkins.\nPlease let us know if you need any assistance with this process.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 32,
    "title": "Fix non-https repository URLs in pom.xml",
    "state": "OPEN",
    "createdAt": "2025-02-27T08:17:31Z",
    "updatedAt": "2025-02-27T08:17:43Z",
    "user": "gounthar",
    "repository": "jenkinsci/blackduck-security-scan-plugin",
    "pluginName": "blackduck-security-scan",
    "labels": null,
    "url": "https://github.com/jenkinsci/blackduck-security-scan-plugin/pull/32",
    "description": "The goal of this PR is to update pom.xml to use https instead of http for repository URLs. The use of http is currently blocking me when attempting to update this plugin to use JDK 17, because of the following error:\n\nFound non-https repository URL in pom file preventing maven older than 3.8.1\nAlthough you are using a more recent version of Maven through mvnw, the tool I use (plugin-modernizer) relies on Maven directly.\n\nUpdates in pom.xml:\n\nChanged the repository URL with the id bds-artifactory to use an HTTPS URL ${repoReleaseArtifactoryUrl}.\nChanged the snapshot repository URL with the id bds-artifactory in the profile with the id snapshot-deployment to use an HTTPS URL ${snapshotArtifactoryUrl}.\nChanged the repository URL with the id bds-artifactory in the profile with the id deployment to use an HTTPS URL ${releaseArtifactoryUrl}.\nChanged the repository URL with the id bds-artifactory in the profile with the id qa-deployment to use an HTTPS URL ${qaArtifactoryUrl}.\nChanged the snapshot repository URL with the id bds-artifactory in the profile with the id qa-deployment to use an HTTPS URL ${snapshotArtifactoryUrl}.\n\nTesting done\nmvn clean verify\nSubmitter checklist\n\n Make sure you are opening from a topic/feature/bugfix branch (right side) and not your main branch!\n Ensure that the pull request title represents the desired changelog entry\n Please describe what you did\n Link to relevant issues in GitHub or Jira\n Link to relevant pull requests, esp. upstream and downstream changes\n Ensure you have provided tests - that demonstrates feature works or fixes the issue",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 499,
    "title": "Require 2.452.4",
    "state": "CLOSED",
    "createdAt": "2024-12-30T16:41:04Z",
    "updatedAt": "2024-12-30T17:07:29Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/branch-api-plugin",
    "pluginName": "branch-api",
    "labels": null,
    "url": "https://github.com/jenkinsci/branch-api-plugin/pull/499",
    "description": "Hello branch-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 133,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-28T15:16:07Z",
    "updatedAt": "2024-12-28T15:30:52Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/build-timeout-plugin",
    "pluginName": "build-timeout",
    "labels": null,
    "url": "https://github.com/jenkinsci/build-timeout-plugin/pull/133",
    "description": "Hello build-timeout developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 51,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-29T19:07:16Z",
    "updatedAt": "2024-12-29T19:39:04Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/built-on-column-plugin",
    "pluginName": "built-on-column",
    "labels": [
      "chore"
    ],
    "url": "https://github.com/jenkinsci/built-on-column-plugin/pull/51",
    "description": "Hello built-on-column developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 42,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:13:09Z",
    "updatedAt": "2024-10-26T06:29:32Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/byte-buddy-api-plugin",
    "pluginName": "byte-buddy-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/byte-buddy-api-plugin/pull/42",
    "description": "Hello byte-buddy-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 69,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T15:42:17Z",
    "updatedAt": "2025-02-22T16:58:40Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/byte-buddy-api-plugin",
    "pluginName": "byte-buddy-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/byte-buddy-api-plugin/pull/69",
    "description": "Hello byte-buddy-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 121,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T20:49:28Z",
    "updatedAt": "2025-03-05T14:58:00Z",
    "user": "gounthar",
    "repository": "jenkinsci/cloudbees-disk-usage-simple-plugin",
    "pluginName": "cloudbees-disk-usage-simple",
    "labels": [
      "chore"
    ],
    "url": "https://github.com/jenkinsci/cloudbees-disk-usage-simple-plugin/pull/121",
    "description": "Hello cloudbees-disk-usage-simple developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 22,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T15:43:27Z",
    "updatedAt": "2025-02-22T16:58:46Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/commons-math3-api-plugin",
    "pluginName": "commons-math3-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/commons-math3-api-plugin/pull/22",
    "description": "Hello commons-math3-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 8,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:14:07Z",
    "updatedAt": "2024-10-26T06:29:38Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/commons-math3-api-plugin",
    "pluginName": "commons-math3-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/commons-math3-api-plugin/pull/8",
    "description": "Hello commons-math3-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 71,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:15:18Z",
    "updatedAt": "2024-10-26T06:29:05Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/coverage-badges-extension-plugin",
    "pluginName": "coverage-badges-extension",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/coverage-badges-extension-plugin/pull/71",
    "description": "Hello coverage-badges-extension developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 87,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:20:37Z",
    "updatedAt": "2025-02-24T19:31:17Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/coverage-badges-extension-plugin",
    "pluginName": "coverage-badges-extension",
    "labels": [
      "developer",
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/coverage-badges-extension-plugin/pull/87",
    "description": "Hello coverage-badges-extension developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 57,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-02-25T15:58:51Z",
    "updatedAt": "2025-02-25T16:33:42Z",
    "user": "gounthar",
    "repository": "jenkinsci/dagshub-branch-source-plugin",
    "pluginName": "dagshub-branch-source",
    "labels": null,
    "url": "https://github.com/jenkinsci/dagshub-branch-source-plugin/pull/57",
    "description": "Hello dagshub-branch-source developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏",
    "checkStatus": "FAILURE"
  },
  {
    "number": 55,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:16:27Z",
    "updatedAt": "2024-10-26T06:29:19Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/database-mariadb-plugin",
    "pluginName": "database-mariadb",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/database-mariadb-plugin/pull/55",
    "description": "Hello database-mariadb developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 71,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T15:46:31Z",
    "updatedAt": "2025-02-22T16:58:53Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/database-mariadb-plugin",
    "pluginName": "database-mariadb",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/database-mariadb-plugin/pull/71",
    "description": "Hello database-mariadb developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 72,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:22:13Z",
    "updatedAt": "2025-02-22T19:19:19Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/database-mariadb-plugin",
    "pluginName": "database-mariadb",
    "labels": [
      "developer",
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/database-mariadb-plugin/pull/72",
    "description": "Hello database-mariadb developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 31,
    "title": "Require 2.479.1 and Java 17",
    "state": "MERGED",
    "createdAt": "2024-12-30T14:31:17Z",
    "updatedAt": "2024-12-30T14:35:00Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/database-sqlserver-plugin",
    "pluginName": "database-sqlserver",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/database-sqlserver-plugin/pull/31",
    "description": "Hello database-sqlserver developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 43,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-25T03:42:02Z",
    "updatedAt": "2025-02-25T04:03:13Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/database-sqlserver-plugin",
    "pluginName": "database-sqlserver",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/database-sqlserver-plugin/pull/43",
    "description": "Hello database-sqlserver developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 13,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-02-20T14:11:30Z",
    "updatedAt": "2025-02-25T09:28:52Z",
    "user": "gounthar",
    "repository": "jenkinsci/deepcrawl-test-plugin",
    "pluginName": "deepcrawl-test",
    "labels": null,
    "url": "https://github.com/jenkinsci/deepcrawl-test-plugin/pull/13",
    "description": "Hello deepcrawl-test developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 14,
    "title": "feat: upgrade to Jenkins LTS Core 2.462.3 for Java 11 support",
    "state": "MERGED",
    "createdAt": "2025-02-20T14:14:20Z",
    "updatedAt": "2025-02-24T14:38:56Z",
    "user": "gounthar",
    "repository": "jenkinsci/deepcrawl-test-plugin",
    "pluginName": "deepcrawl-test",
    "labels": null,
    "url": "https://github.com/jenkinsci/deepcrawl-test-plugin/pull/14",
    "description": "Hello deepcrawl-test developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 11\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava11CoreVersion\n    Upgrade to latest LTS core version supporting Java 11.\n\nWhy is this important?\nTransitional Step to Java 17\nUpgrading to Jenkins LTS Core 2.462.3 is a critical step in our roadmap towards leveraging Java 17. This transition serves as an intermediary phase, ensuring that all systems are optimized for Java 11 before making the leap to Java 17.\nEnhancements and Security\nBy moving to this LTS version, we benefit from the latest performance and security improvements foundational to Java 11. Ensuring our dependencies are up-to-date and secure prepares the groundwork for a smoother transition to Java 17.\nLong-Term Support\nThe LTS version provides the necessary support and stability for Java 11, offering assurance during our gradual migration process. This allows us to take advantage of long-term updates and critical patches.\nEmbracing these incremental changes aligns our development environment with current standards and strategically positions us for future advancement. We appreciate your feedback and testing as we aim for a seamless adjustment period.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 60,
    "title": "Require 2.452.4",
    "state": "CLOSED",
    "createdAt": "2024-12-29T19:11:45Z",
    "updatedAt": "2024-12-30T09:32:01Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/description-setter-plugin",
    "pluginName": "description-setter",
    "labels": null,
    "url": "https://github.com/jenkinsci/description-setter-plugin/pull/60",
    "description": "Hello description-setter developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 61,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-30T10:20:28Z",
    "updatedAt": "2024-12-30T12:18:10Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/description-setter-plugin",
    "pluginName": "description-setter",
    "labels": [
      "chore"
    ],
    "url": "https://github.com/jenkinsci/description-setter-plugin/pull/61",
    "description": "Hello description-setter developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 47,
    "title": "Require 2.452.4",
    "state": "CLOSED",
    "createdAt": "2024-12-29T19:10:44Z",
    "updatedAt": "2024-12-30T09:32:04Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/discard-old-build-plugin",
    "pluginName": "discard-old-build",
    "labels": null,
    "url": "https://github.com/jenkinsci/discard-old-build-plugin/pull/47",
    "description": "Hello discard-old-build developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 48,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-30T10:20:02Z",
    "updatedAt": "2024-12-30T12:29:32Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/discard-old-build-plugin",
    "pluginName": "discard-old-build",
    "labels": [
      "chore"
    ],
    "url": "https://github.com/jenkinsci/discard-old-build-plugin/pull/48",
    "description": "Hello discard-old-build developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 244,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-28T18:07:27Z",
    "updatedAt": "2025-01-03T03:29:09Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/durable-task-plugin",
    "pluginName": "durable-task",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/durable-task-plugin/pull/244",
    "description": "Hello durable-task developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 113,
    "title": "Bump bom to 3814.v9563d972079a_",
    "state": "MERGED",
    "createdAt": "2024-12-18T05:49:00Z",
    "updatedAt": "2024-12-18T06:02:56Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/extension-filter-plugin",
    "pluginName": "extension-filter",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/extension-filter-plugin/pull/113",
    "description": "Hello extension-filter developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 121,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:23:59Z",
    "updatedAt": "2025-02-22T19:17:43Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/extension-filter-plugin",
    "pluginName": "extension-filter",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/extension-filter-plugin/pull/121",
    "description": "Hello extension-filter developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 127,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:18:35Z",
    "updatedAt": "2024-10-26T06:28:26Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/extra-tool-installers-plugin",
    "pluginName": "extra-tool-installers",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/extra-tool-installers-plugin/pull/127",
    "description": "Hello extra-tool-installers developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 141,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T15:49:16Z",
    "updatedAt": "2025-02-22T16:59:01Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/extra-tool-installers-plugin",
    "pluginName": "extra-tool-installers",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/extra-tool-installers-plugin/pull/141",
    "description": "Hello extra-tool-installers developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 142,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:25:17Z",
    "updatedAt": "2025-02-22T19:16:51Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/extra-tool-installers-plugin",
    "pluginName": "extra-tool-installers",
    "labels": [
      "enhancement",
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/extra-tool-installers-plugin/pull/142",
    "description": "Hello extra-tool-installers developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 138,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:19:37Z",
    "updatedAt": "2024-10-26T06:29:44Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/file-operations-plugin",
    "pluginName": "file-operations",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/file-operations-plugin/pull/138",
    "description": "Hello file-operations developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 154,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T15:51:46Z",
    "updatedAt": "2025-02-22T16:59:08Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/file-operations-plugin",
    "pluginName": "file-operations",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/file-operations-plugin/pull/154",
    "description": "Hello file-operations developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 155,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:27:45Z",
    "updatedAt": "2025-02-22T19:10:52Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/file-operations-plugin",
    "pluginName": "file-operations",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/file-operations-plugin/pull/155",
    "description": "Hello file-operations developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 108,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:30:02Z",
    "updatedAt": "2025-02-22T19:11:19Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/flyway-runner-plugin",
    "pluginName": "flyway-runner",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/flyway-runner-plugin/pull/108",
    "description": "Hello flyway-runner developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 63,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-29T19:17:17Z",
    "updatedAt": "2025-02-03T10:10:58Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/gitee-plugin",
    "pluginName": "gitee",
    "labels": [
      "chore"
    ],
    "url": "https://github.com/jenkinsci/gitee-plugin/pull/63",
    "description": "Hello gitee developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 268,
    "title": "Applied recipe RemoveReleaseDrafter",
    "state": "CLOSED",
    "createdAt": "2024-12-29T13:03:31Z",
    "updatedAt": "2024-12-29T13:08:14Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/github-api-plugin",
    "pluginName": "github-api",
    "labels": null,
    "url": "https://github.com/jenkinsci/github-api-plugin/pull/268",
    "description": "Hello github-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Remove Release Drafter if CD is enabled\n    io.jenkins.tools.pluginmodernizer.RemoveReleaseDrafter\n    Remove Release Drafter if CD is enabled. See https://www.jenkins.io/doc/developer/publishing/releasing-cd/#configure-release-drafter",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 269,
    "title": "Remove release drafter due to enabled cd",
    "state": "MERGED",
    "createdAt": "2024-12-29T13:20:12Z",
    "updatedAt": "2025-01-14T09:05:26Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/github-api-plugin",
    "pluginName": "github-api",
    "labels": null,
    "url": "https://github.com/jenkinsci/github-api-plugin/pull/269",
    "description": "Hello github-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Remove Release Drafter if CD is enabled\n    io.jenkins.tools.pluginmodernizer.RemoveReleaseDrafter\n    Remove Release Drafter if CD is enabled. See https://www.jenkins.io/doc/developer/publishing/releasing-cd/#configure-release-drafter",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 197,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:21:49Z",
    "updatedAt": "2024-10-26T06:28:38Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/gitlab-kubernetes-credentials-plugin",
    "pluginName": "gitlab-kubernetes-credentials",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/gitlab-kubernetes-credentials-plugin/pull/197",
    "description": "Hello gitlab-kubernetes-credentials developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 219,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T15:57:55Z",
    "updatedAt": "2025-02-22T16:59:16Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/gitlab-kubernetes-credentials-plugin",
    "pluginName": "gitlab-kubernetes-credentials",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/gitlab-kubernetes-credentials-plugin/pull/219",
    "description": "Hello gitlab-kubernetes-credentials developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 220,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:31:58Z",
    "updatedAt": "2025-02-22T19:11:43Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/gitlab-kubernetes-credentials-plugin",
    "pluginName": "gitlab-kubernetes-credentials",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/gitlab-kubernetes-credentials-plugin/pull/220",
    "description": "Hello gitlab-kubernetes-credentials developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 144,
    "title": "feat(java): Require Jenkins core 2.479.1 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-02-19T19:24:35Z",
    "updatedAt": "2025-02-19T19:24:35Z",
    "user": "gounthar",
    "repository": "jenkinsci/groovy-events-listener-plugin",
    "pluginName": "groovy-events-listener-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/groovy-events-listener-plugin/pull/144",
    "description": "Hello groovy-events-listener-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nThe checks aren't checking, why is that?\nThe issue likely stems from your Jenkinsfile, which is still declaring Java 8 or 11.\nThe Jenkins infrastructure, in its wisdom, continues to use this, and does not allow the use of a Jenkinsfile supplied by a pull request.\nTo resolve this, a maintainer can replay the failed build by substituting the Jenkinsfile content with our proposed changes using the \"replay the build\" feature in Jenkins.\nPlease let us know if you need any assistance with this process.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 49,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:22:48Z",
    "updatedAt": "2024-10-26T06:28:46Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/gson-api-plugin",
    "pluginName": "gson-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/gson-api-plugin/pull/49",
    "description": "Hello gson-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 66,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T15:59:13Z",
    "updatedAt": "2025-02-22T16:59:23Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/gson-api-plugin",
    "pluginName": "gson-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/gson-api-plugin/pull/66",
    "description": "Hello gson-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 166,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:23:55Z",
    "updatedAt": "2024-10-26T06:30:34Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/hidden-parameter-plugin",
    "pluginName": "hidden-parameter",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/hidden-parameter-plugin/pull/166",
    "description": "Hello hidden-parameter developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 188,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T16:00:53Z",
    "updatedAt": "2025-02-22T19:30:05Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/hidden-parameter-plugin",
    "pluginName": "hidden-parameter",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/hidden-parameter-plugin/pull/188",
    "description": "Hello hidden-parameter developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 189,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:33:39Z",
    "updatedAt": "2025-02-22T17:58:07Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/hidden-parameter-plugin",
    "pluginName": "hidden-parameter",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/hidden-parameter-plugin/pull/189",
    "description": "Hello hidden-parameter developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 7,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-23T06:38:36Z",
    "updatedAt": "2025-02-23T06:44:21Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jcaptcha-plugin",
    "pluginName": "jcaptcha-plugin",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/jcaptcha-plugin/pull/7",
    "description": "Hello jcaptcha-plugin developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 108,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T16:08:31Z",
    "updatedAt": "2025-02-22T16:59:58Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jnr-posix-api-plugin",
    "pluginName": "jnr-posix-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/jnr-posix-api-plugin/pull/108",
    "description": "Hello jnr-posix-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 187,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-25T10:51:50Z",
    "updatedAt": "2025-02-27T00:08:38Z",
    "user": "gounthar",
    "repository": "jenkinsci/job-restrictions-plugin",
    "pluginName": "job-restrictions",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/jenkinsci/job-restrictions-plugin/pull/187",
    "description": "Hello job-restrictions developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 58,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:26:39Z",
    "updatedAt": "2024-10-26T06:31:59Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jobcacher-artifactory-storage-plugin",
    "pluginName": "jobcacher-artifactory-storage",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/jobcacher-artifactory-storage-plugin/pull/58",
    "description": "Hello jobcacher-artifactory-storage developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 368,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:25:22Z",
    "updatedAt": "2024-10-26T06:32:25Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jobcacher-plugin",
    "pluginName": "jobcacher",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/jobcacher-plugin/pull/368",
    "description": "Hello jobcacher developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 399,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:38:06Z",
    "updatedAt": "2025-02-22T17:59:38Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/jobcacher-plugin",
    "pluginName": "jobcacher",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/jobcacher-plugin/pull/399",
    "description": "Hello jobcacher developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 47,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:27:36Z",
    "updatedAt": "2024-10-26T06:32:10Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/joda-time-api-plugin",
    "pluginName": "joda-time-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/joda-time-api-plugin/pull/47",
    "description": "Hello joda-time-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 54,
    "title": "Bump bom to 3814.v9563d972079a_",
    "state": "CLOSED",
    "createdAt": "2024-12-16T06:22:32Z",
    "updatedAt": "2024-12-16T06:25:32Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/joda-time-api-plugin",
    "pluginName": "joda-time-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/joda-time-api-plugin/pull/54",
    "description": "Hello joda-time-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "PENDING"
  },
  {
    "number": 55,
    "title": "Bump bom to 3814.v9563d972079a_",
    "state": "CLOSED",
    "createdAt": "2024-12-16T06:45:57Z",
    "updatedAt": "2024-12-16T06:59:45Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/joda-time-api-plugin",
    "pluginName": "joda-time-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/joda-time-api-plugin/pull/55",
    "description": "Hello joda-time-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 63,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T16:04:41Z",
    "updatedAt": "2025-02-22T16:59:37Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/joda-time-api-plugin",
    "pluginName": "joda-time-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/joda-time-api-plugin/pull/63",
    "description": "Hello joda-time-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 51,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:28:37Z",
    "updatedAt": "2024-10-26T06:33:56Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/json-api-plugin",
    "pluginName": "json-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/json-api-plugin/pull/51",
    "description": "Hello json-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 69,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T16:05:56Z",
    "updatedAt": "2025-02-22T16:59:44Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/json-api-plugin",
    "pluginName": "json-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/json-api-plugin/pull/69",
    "description": "Hello json-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 61,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:29:36Z",
    "updatedAt": "2024-10-26T06:34:05Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/json-path-api-plugin",
    "pluginName": "json-path-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/json-path-api-plugin/pull/61",
    "description": "Hello json-path-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 79,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T16:07:10Z",
    "updatedAt": "2025-02-22T16:59:52Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/json-path-api-plugin",
    "pluginName": "json-path-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/json-path-api-plugin/pull/79",
    "description": "Hello json-path-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 152,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-24T10:55:55Z",
    "updatedAt": "2025-02-24T14:14:32Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/junit-attachments-plugin",
    "pluginName": "junit-attachments",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/junit-attachments-plugin/pull/152",
    "description": "Hello junit-attachments developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 7,
    "title": "Require 2.452.4",
    "state": "CLOSED",
    "createdAt": "2024-12-29T18:59:51Z",
    "updatedAt": "2024-12-29T19:06:42Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/levo-plugin",
    "pluginName": "levo",
    "labels": null,
    "url": "https://github.com/jenkinsci/levo-plugin/pull/7",
    "description": "Hello levo developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 8,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2024-12-29T19:09:08Z",
    "updatedAt": "2025-01-08T14:42:22Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/levo-plugin",
    "pluginName": "levo",
    "labels": null,
    "url": "https://github.com/jenkinsci/levo-plugin/pull/8",
    "description": "Hello levo developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 287,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:40:37Z",
    "updatedAt": "2025-02-22T18:00:30Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/locale-plugin",
    "pluginName": "locale",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/locale-plugin/pull/287",
    "description": "Hello locale developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 158,
    "title": "feat(java): Require Jenkins core 2.479.1 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-19T19:36:12Z",
    "updatedAt": "2025-02-19T19:40:35Z",
    "user": "gounthar",
    "repository": "jenkinsci/log-cli-plugin",
    "pluginName": "log-cli",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/log-cli-plugin/pull/158",
    "description": "Hello log-cli developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nThe checks aren't checking, why is that?\nThe issue likely stems from your Jenkinsfile, which is still declaring Java 8 or 11.\nThe Jenkins infrastructure, in its wisdom, continues to use this, and does not allow the use of a Jenkinsfile supplied by a pull request.\nTo resolve this, a maintainer can replay the failed build by substituting the Jenkinsfile content with our proposed changes using the \"replay the build\" feature in Jenkins.\nPlease let us know if you need any assistance with this process.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 124,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:31:32Z",
    "updatedAt": "2024-10-26T06:47:11Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/login-theme-plugin",
    "pluginName": "login-theme",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/login-theme-plugin/pull/124",
    "description": "Hello login-theme developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 137,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:42:10Z",
    "updatedAt": "2025-02-22T19:12:13Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/login-theme-plugin",
    "pluginName": "login-theme",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/login-theme-plugin/pull/137",
    "description": "Hello login-theme developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 46,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:32:31Z",
    "updatedAt": "2024-10-26T06:47:27Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/mariadb-api-plugin",
    "pluginName": "mariadb-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/mariadb-api-plugin/pull/46",
    "description": "Hello mariadb-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 62,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T16:11:15Z",
    "updatedAt": "2025-02-22T17:00:06Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/mariadb-api-plugin",
    "pluginName": "mariadb-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/mariadb-api-plugin/pull/62",
    "description": "Hello mariadb-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 296,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-28T15:07:51Z",
    "updatedAt": "2025-01-13T09:22:51Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/metrics-plugin",
    "pluginName": "metrics",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/metrics-plugin/pull/296",
    "description": "Hello metrics developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 193,
    "title": "feat(java): Require Jenkins core 2.479.3.",
    "state": "MERGED",
    "createdAt": "2025-02-25T17:41:04Z",
    "updatedAt": "2025-02-25T18:12:10Z",
    "user": "gounthar",
    "repository": "jenkinsci/msbuild-plugin",
    "pluginName": "msbuild",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/msbuild-plugin/pull/193",
    "description": "Hello msbuild developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 148,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:33:39Z",
    "updatedAt": "2024-10-26T07:29:22Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/next-executions-plugin",
    "pluginName": "next-executions",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/next-executions-plugin/pull/148",
    "description": "Hello next-executions developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 163,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T16:13:07Z",
    "updatedAt": "2025-02-22T17:00:13Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/next-executions-plugin",
    "pluginName": "next-executions",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/next-executions-plugin/pull/163",
    "description": "Hello next-executions developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 164,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:44:06Z",
    "updatedAt": "2025-02-22T18:01:22Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/next-executions-plugin",
    "pluginName": "next-executions",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/next-executions-plugin/pull/164",
    "description": "Hello next-executions developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 125,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:35:01Z",
    "updatedAt": "2024-10-26T06:49:31Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/nunit-plugin",
    "pluginName": "nunit",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/nunit-plugin/pull/125",
    "description": "Hello nunit developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 143,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:46:20Z",
    "updatedAt": "2025-02-22T19:16:15Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/nunit-plugin",
    "pluginName": "nunit",
    "labels": [
      "dependencies",
      "enhancement"
    ],
    "url": "https://github.com/jenkinsci/nunit-plugin/pull/143",
    "description": "Hello nunit developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 37,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-28T14:02:35Z",
    "updatedAt": "2024-12-29T17:46:04Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/openid-plugin",
    "pluginName": "openid",
    "labels": null,
    "url": "https://github.com/jenkinsci/openid-plugin/pull/37",
    "description": "Hello openid developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 223,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:36:12Z",
    "updatedAt": "2024-10-26T06:49:48Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/openshift-k8s-credentials-plugin",
    "pluginName": "openshift-k8s-credentials",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/openshift-k8s-credentials-plugin/pull/223",
    "description": "Hello openshift-k8s-credentials developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 245,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T16:15:47Z",
    "updatedAt": "2025-02-22T17:00:20Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/openshift-k8s-credentials-plugin",
    "pluginName": "openshift-k8s-credentials",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/openshift-k8s-credentials-plugin/pull/245",
    "description": "Hello openshift-k8s-credentials developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 246,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:48:17Z",
    "updatedAt": "2025-02-22T19:17:17Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/openshift-k8s-credentials-plugin",
    "pluginName": "openshift-k8s-credentials",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/openshift-k8s-credentials-plugin/pull/246",
    "description": "Hello openshift-k8s-credentials developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 107,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:38:24Z",
    "updatedAt": "2024-10-26T06:49:55Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/parameter-separator-plugin",
    "pluginName": "parameter-separator",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/parameter-separator-plugin/pull/107",
    "description": "Hello parameter-separator developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 119,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:50:26Z",
    "updatedAt": "2025-02-22T19:14:39Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/parameter-separator-plugin",
    "pluginName": "parameter-separator",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/parameter-separator-plugin/pull/119",
    "description": "Hello parameter-separator developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 113,
    "title": "feat(java): Require Jenkins core 2.479.1 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-20T10:01:22Z",
    "updatedAt": "2025-02-20T21:52:38Z",
    "user": "gounthar",
    "repository": "jenkinsci/pipeline-cloudwatch-logs-plugin",
    "pluginName": "pipeline-cloudwatch-logs",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/pipeline-cloudwatch-logs-plugin/pull/113",
    "description": "Hello pipeline-cloudwatch-logs developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nThe checks aren't checking, why is that?\nThe issue likely stems from your Jenkinsfile, which is still declaring Java 8 or 11.\nThe Jenkins infrastructure, in its wisdom, continues to use this, and does not allow the use of a Jenkinsfile supplied by a pull request.\nTo resolve this, a maintainer can replay the failed build by substituting the Jenkinsfile content with our proposed changes using the \"replay the build\" feature in Jenkins.\nPlease let us know if you need any assistance with this process.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 17,
    "title": "chore(dependencies): Automate dependency updates with Dependabot",
    "state": "OPEN",
    "createdAt": "2025-02-25T08:26:56Z",
    "updatedAt": "2025-02-25T08:26:56Z",
    "user": "gounthar",
    "repository": "jenkinsci/pipeline-global-lib-nexus-plugin",
    "pluginName": "pipeline-global-lib-nexus",
    "labels": null,
    "url": "https://github.com/jenkinsci/pipeline-global-lib-nexus-plugin/pull/17",
    "description": "Hello pipeline-global-lib-nexus developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup dependabot\n    io.jenkins.tools.pluginmodernizer.SetupDependabot\n    Setup dependabot for the Jenkins plugin if it doesn't exist.\n\nWhy Automate with Dependabot?\nManaging dependencies can be a time-consuming and challenging task, especially when maintaining a Jenkins plugin.\nBy automating this process with Dependabot, you gain numerous advantages:\n\n\nKeep Pace with Innovation: Dependabot ensures\nyour plugin remains cutting-edge by promptly incorporating the latest features and enhancements from upstream libraries.\n\n\nStrengthen Security: Staying up-to-date with dependency updates is crucial for security.\nDependabot automatically flags and updates any vulnerable dependencies,\nhelping to protect your plugin from potential exploits.\n\n\nSave Time and Effort: Spend less time managing dependencies and more time innovating.\nDependabot automatically submits pull requests for new releases,\nallowing you to effortlessly review and integrate updates.\n\n\nEnhance Compatibility and Stability: Regular updates improve both performance and compatibility with other plugins and the Jenkins core,\nensuring a seamless experience for your users.\n\n\nImprove GitHub Integration: Dependabot streamlines and enhances the integration process with GitHub,\nmaking it easier to manage updates.\n\n\nEnhance the plugin health score: Regular updates contribute to a better health score by ensuring your plugin is reliable and up-to-date.\n\n\nFocus on What Matters: With Dependabot, you can concentrate on developing new features and fixing bugs, knowing that it handles dependency updates efficiently.\n\n\nSetting up Dependabot exemplifies a proactive approach to modern software maintenance, aligning your plugin with best practices in the industry. We invite you to test these updates and adopt a maintenance workflow that is both efficient and secure.\nYour insights and feedback are invaluable to us, and we are here to support you through this transition as needed.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 18,
    "title": "chore(github): Add CODEOWNERS",
    "state": "OPEN",
    "createdAt": "2025-02-25T08:30:22Z",
    "updatedAt": "2025-02-25T08:30:22Z",
    "user": "gounthar",
    "repository": "jenkinsci/pipeline-global-lib-nexus-plugin",
    "pluginName": "pipeline-global-lib-nexus",
    "labels": null,
    "url": "https://github.com/jenkinsci/pipeline-global-lib-nexus-plugin/pull/18",
    "description": "Hello pipeline-global-lib-nexus developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 148,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-28T17:49:33Z",
    "updatedAt": "2025-01-03T03:29:17Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/pipeline-graph-analysis-plugin",
    "pluginName": "pipeline-graph-analysis",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/pipeline-graph-analysis-plugin/pull/148",
    "description": "Hello pipeline-graph-analysis developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 163,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:39:56Z",
    "updatedAt": "2024-10-26T06:50:02Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/pipeline-npm-plugin",
    "pluginName": "pipeline-npm",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/pipeline-npm-plugin/pull/163",
    "description": "Hello pipeline-npm developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 186,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T16:19:22Z",
    "updatedAt": "2025-02-22T17:00:26Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/pipeline-npm-plugin",
    "pluginName": "pipeline-npm",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/pipeline-npm-plugin/pull/186",
    "description": "Hello pipeline-npm developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 187,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:51:58Z",
    "updatedAt": "2025-02-22T19:14:08Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/pipeline-npm-plugin",
    "pluginName": "pipeline-npm",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/pipeline-npm-plugin/pull/187",
    "description": "Hello pipeline-npm developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 133,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-28T17:38:56Z",
    "updatedAt": "2025-01-03T03:29:30Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/pipeline-stage-step-plugin",
    "pluginName": "pipeline-stage-step",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/pipeline-stage-step-plugin/pull/133",
    "description": "Hello pipeline-stage-step developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 347,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:42:16Z",
    "updatedAt": "2024-10-26T06:50:19Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/postgresql-fingerprint-storage-plugin",
    "pluginName": "postgresql-fingerprint-storage",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/postgresql-fingerprint-storage-plugin/pull/347",
    "description": "Hello postgresql-fingerprint-storage developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 361,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:55:36Z",
    "updatedAt": "2025-02-22T19:13:41Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/postgresql-fingerprint-storage-plugin",
    "pluginName": "postgresql-fingerprint-storage",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/postgresql-fingerprint-storage-plugin/pull/361",
    "description": "Hello postgresql-fingerprint-storage developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 9,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-29T04:21:16Z",
    "updatedAt": "2024-12-30T14:13:31Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/r-plugin",
    "pluginName": "r",
    "labels": null,
    "url": "https://github.com/jenkinsci/r-plugin/pull/9",
    "description": "Hello r developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "UNKNOWN"
  },
  {
    "number": 10,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-02-21T14:50:23Z",
    "updatedAt": "2025-03-05T21:23:37Z",
    "user": "gounthar",
    "repository": "jenkinsci/railflow-testrail-plugin",
    "pluginName": "railflow-testrail",
    "labels": null,
    "url": "https://github.com/jenkinsci/railflow-testrail-plugin/pull/10",
    "description": "Hello railflow-testrail developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 589,
    "title": "Update pom.xml to match archetype and use `jenkins.baseline` property to keep bom in sync",
    "state": "MERGED",
    "createdAt": "2024-12-30T16:29:25Z",
    "updatedAt": "2025-01-02T16:27:54Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/script-security-plugin",
    "pluginName": "script-security",
    "labels": [
      "chore"
    ],
    "url": "https://github.com/jenkinsci/script-security-plugin/pull/589",
    "description": "Hello script-security developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Migrate pom to using jenkins.baseline property if bom is present\n    io.jenkins.tools.pluginmodernizer.MigrateToJenkinsBaseLineProperty\n    Migrate pom to using jenkins.baseline property if bom is present.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 67,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-02-25T13:17:17Z",
    "updatedAt": "2025-02-25T13:17:54Z",
    "user": "gounthar",
    "repository": "jenkinsci/sectioned-view-plugin",
    "pluginName": "sectioned-view",
    "labels": null,
    "url": "https://github.com/jenkinsci/sectioned-view-plugin/pull/67",
    "description": "Hello sectioned-view developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nThis could help #64 to pass checks, or even become redundant.\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 13,
    "title": "Require 2.452.4",
    "state": "CLOSED",
    "createdAt": "2024-12-29T18:52:10Z",
    "updatedAt": "2025-02-06T04:29:49Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/shared-library-version-override-plugin",
    "pluginName": "shared-library-version-override",
    "labels": null,
    "url": "https://github.com/jenkinsci/shared-library-version-override-plugin/pull/13",
    "description": "Hello shared-library-version-override developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 224,
    "title": "Applied recipes UpgradeBomVersion",
    "state": "MERGED",
    "createdAt": "2024-10-26T06:44:03Z",
    "updatedAt": "2024-10-26T07:29:03Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/skip-notifications-trait-plugin",
    "pluginName": "skip-notifications-trait",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/skip-notifications-trait-plugin/pull/224",
    "description": "Hello skip-notifications-trait developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available. Doesn't change the artifact id",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 235,
    "title": "Require 2.479.1 and Java 17",
    "state": "MERGED",
    "createdAt": "2024-12-28T13:49:01Z",
    "updatedAt": "2024-12-28T14:06:43Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/skip-notifications-trait-plugin",
    "pluginName": "skip-notifications-trait",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/skip-notifications-trait-plugin/pull/235",
    "description": "Hello skip-notifications-trait developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 244,
    "title": "Bump bom to 4228.v0a_71308d905b_",
    "state": "MERGED",
    "createdAt": "2025-02-22T16:22:08Z",
    "updatedAt": "2025-02-22T17:00:35Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/skip-notifications-trait-plugin",
    "pluginName": "skip-notifications-trait",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/skip-notifications-trait-plugin/pull/244",
    "description": "Hello skip-notifications-trait developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade BOM version\n    io.jenkins.tools.pluginmodernizer.UpgradeBomVersion\n    Upgrade the bom version to latest available for the current BOM.\n\nWhy is this important?\nBy using the latest version of the Jenkins BOM for the given baseline, you can ensure the plugin relies on the correct versions of Jenkins plugins and libraries. This can help prevent compatibility issues.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 245,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-22T17:57:23Z",
    "updatedAt": "2025-02-22T19:13:16Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/skip-notifications-trait-plugin",
    "pluginName": "skip-notifications-trait",
    "labels": [
      "developer",
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/skip-notifications-trait-plugin/pull/245",
    "description": "Hello skip-notifications-trait developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 4,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-02-26T17:49:05Z",
    "updatedAt": "2025-02-26T17:59:49Z",
    "user": "gounthar",
    "repository": "jenkinsci/snowsoftware-commander-plugin",
    "pluginName": "embotics-vcommander",
    "labels": null,
    "url": "https://github.com/jenkinsci/snowsoftware-commander-plugin/pull/4",
    "description": "Hello embotics-vcommander developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!\nSupersedes #3 .",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 41,
    "title": "Require 2.479.1 and Java 17",
    "state": "MERGED",
    "createdAt": "2024-12-30T14:21:23Z",
    "updatedAt": "2024-12-30T14:27:13Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/sqlserver-api-plugin",
    "pluginName": "sqlserver-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/sqlserver-api-plugin/pull/41",
    "description": "Hello sqlserver-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 52,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-02-24T15:28:26Z",
    "updatedAt": "2025-02-24T15:33:58Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/sqlserver-api-plugin",
    "pluginName": "sqlserver-api",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/sqlserver-api-plugin/pull/52",
    "description": "Hello sqlserver-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 211,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-28T17:21:02Z",
    "updatedAt": "2025-02-22T17:00:57Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/structs-plugin",
    "pluginName": "structs",
    "labels": null,
    "url": "https://github.com/jenkinsci/structs-plugin/pull/211",
    "description": "Hello structs developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 239,
    "title": "Update pom.xml to match archetype and use `jenkins.baseline` property to keep bom in sync",
    "state": "MERGED",
    "createdAt": "2024-12-30T14:43:12Z",
    "updatedAt": "2024-12-30T16:17:19Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/token-macro-plugin",
    "pluginName": "token-macro",
    "labels": null,
    "url": "https://github.com/jenkinsci/token-macro-plugin/pull/239",
    "description": "Hello token-macro developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Migrate pom to using jenkins.baseline property if bom is present\n    io.jenkins.tools.pluginmodernizer.MigrateToJenkinsBaseLineProperty\n    Migrate pom to using jenkins.baseline property if bom is present.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 98,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-28T17:46:01Z",
    "updatedAt": "2025-01-02T17:51:44Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/workflow-aggregator-plugin",
    "pluginName": "workflow-aggregator",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/workflow-aggregator-plugin/pull/98",
    "description": "Hello workflow-aggregator developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 367,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-28T17:31:27Z",
    "updatedAt": "2025-01-03T03:30:14Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/workflow-api-plugin",
    "pluginName": "workflow-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/workflow-api-plugin/pull/367",
    "description": "Hello workflow-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 153,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-28T17:28:49Z",
    "updatedAt": "2025-01-03T03:30:21Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/workflow-scm-step-plugin",
    "pluginName": "workflow-scm-step",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/workflow-scm-step-plugin/pull/153",
    "description": "Hello workflow-scm-step developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 191,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-28T17:21:17Z",
    "updatedAt": "2025-01-03T03:33:04Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/workflow-step-api-plugin",
    "pluginName": "workflow-step-api",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/workflow-step-api-plugin/pull/191",
    "description": "Hello workflow-step-api developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 290,
    "title": "Require 2.452.4",
    "state": "MERGED",
    "createdAt": "2024-12-28T17:35:41Z",
    "updatedAt": "2025-01-03T03:29:51Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/workflow-support-plugin",
    "pluginName": "workflow-support",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/workflow-support-plugin/pull/290",
    "description": "Hello workflow-support developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 152,
    "title": "Require 2.452.4",
    "state": "OPEN",
    "createdAt": "2024-12-29T13:28:44Z",
    "updatedAt": "2024-12-29T13:28:44Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/xunit-plugin",
    "pluginName": "xunit",
    "labels": null,
    "url": "https://github.com/jenkinsci/xunit-plugin/pull/152",
    "description": "Hello xunit developers!\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest recommended core version and ensure the bom is matching the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to latest recommended core version and ensure the bom is matching the core version.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 30,
    "title": "chore(github): Add CODEOWNERS",
    "state": "OPEN",
    "createdAt": "2025-02-24T18:24:56Z",
    "updatedAt": "2025-02-24T18:24:56Z",
    "user": "gounthar",
    "repository": "jenkinsci/yet-another-build-visualizer-plugin",
    "pluginName": "yet-another-build-visualizer",
    "labels": null,
    "url": "https://github.com/jenkinsci/yet-another-build-visualizer-plugin/pull/30",
    "description": "Hello yet-another-build-visualizer developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 31,
    "title": "chore(dependencies): Automate dependency updates with Dependabot",
    "state": "OPEN",
    "createdAt": "2025-02-24T18:29:24Z",
    "updatedAt": "2025-02-24T18:29:24Z",
    "user": "gounthar",
    "repository": "jenkinsci/yet-another-build-visualizer-plugin",
    "pluginName": "yet-another-build-visualizer",
    "labels": null,
    "url": "https://github.com/jenkinsci/yet-another-build-visualizer-plugin/pull/31",
    "description": "Hello yet-another-build-visualizer developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup dependabot\n    io.jenkins.tools.pluginmodernizer.SetupDependabot\n    Setup dependabot for the Jenkins plugin if it doesn't exist.\n\nWhy Automate with Dependabot?\nManaging dependencies can be a time-consuming and challenging task, especially when maintaining a Jenkins plugin.\nBy automating this process with Dependabot, you gain numerous advantages:\n\n\nKeep Pace with Innovation: Dependabot ensures\nyour plugin remains cutting-edge by promptly incorporating the latest features and enhancements from upstream libraries.\n\n\nStrengthen Security: Staying up-to-date with dependency updates is crucial for security.\nDependabot automatically flags and updates any vulnerable dependencies,\nhelping to protect your plugin from potential exploits.\n\n\nSave Time and Effort: Spend less time managing dependencies and more time innovating.\nDependabot automatically submits pull requests for new releases,\nallowing you to effortlessly review and integrate updates.\n\n\nEnhance Compatibility and Stability: Regular updates improve both performance and compatibility with other plugins and the Jenkins core,\nensuring a seamless experience for your users.\n\n\nImprove GitHub Integration: Dependabot streamlines and enhances the integration process with GitHub,\nmaking it easier to manage updates.\n\n\nEnhance the plugin health score: Regular updates contribute to a better health score by ensuring your plugin is reliable and up-to-date.\n\n\nFocus on What Matters: With Dependabot, you can concentrate on developing new features and fixing bugs, knowing that it handles dependency updates efficiently.\n\n\nSetting up Dependabot exemplifies a proactive approach to modern software maintenance, aligning your plugin with best practices in the industry. We invite you to test these updates and adopt a maintenance workflow that is both efficient and secure.\nYour insights and feedback are invaluable to us, and we are here to support you through this transition as needed.",
    "checkStatus": "SUCCESS"
  }
]
