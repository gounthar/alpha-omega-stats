[
  {
    "number": 16,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-02-27T16:33:51Z",
    "updatedAt": "2025-03-07T08:45:24Z",
    "user": "gounthar",
    "repository": "jenkinsci/42crunch-security-audit-plugin",
    "pluginName": "42crunch-security-audit",
    "labels": null,
    "url": "https://github.com/jenkinsci/42crunch-security-audit-plugin/pull/16",
    "description": "Hello 42crunch-security-audit developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-07T08:48:32Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/42crunch-security-audit-plugin/job/PR-16/4/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-07T08:48:31Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/42crunch-security-audit-plugin/job/PR-16/4/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-07T08:45:49Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 6,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T19:06:54Z",
    "updatedAt": "2025-03-27T19:06:54Z",
    "user": "gounthar",
    "repository": "jenkinsci/agent-server-parameter-plugin",
    "pluginName": "agent-server-parameter",
    "labels": null,
    "url": "https://github.com/jenkinsci/agent-server-parameter-plugin/pull/6",
    "description": "Hello agent-server-parameter developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T19:07:40Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/agent-server-parameter-plugin/job/PR-6/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T19:07:39Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/agent-server-parameter-plugin/job/PR-6/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T19:07:14Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 7,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-03-28T15:55:18Z",
    "updatedAt": "2025-03-28T19:17:13Z",
    "user": "gounthar",
    "repository": "jenkinsci/agent-server-parameter-plugin",
    "pluginName": "agent-server-parameter",
    "labels": null,
    "url": "https://github.com/jenkinsci/agent-server-parameter-plugin/pull/7",
    "description": "Hello agent-server-parameter developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-28T19:19:28Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/agent-server-parameter-plugin/job/PR-7/3/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-28T19:19:28Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/agent-server-parameter-plugin/job/PR-7/3/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-28T19:17:32Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 16,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T19:10:34Z",
    "updatedAt": "2025-03-27T19:10:34Z",
    "user": "gounthar",
    "repository": "jenkinsci/aio-tests-plugin",
    "pluginName": "aio-tests",
    "labels": null,
    "url": "https://github.com/jenkinsci/aio-tests-plugin/pull/16",
    "description": "Hello aio-tests developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T19:13:54Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/aio-tests-plugin/job/PR-16/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T19:13:53Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/aio-tests-plugin/job/PR-16/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T19:10:54Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 17,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-03-28T15:58:13Z",
    "updatedAt": "2025-03-28T19:20:25Z",
    "user": "gounthar",
    "repository": "jenkinsci/aio-tests-plugin",
    "pluginName": "aio-tests",
    "labels": null,
    "url": "https://github.com/jenkinsci/aio-tests-plugin/pull/17",
    "description": "Hello aio-tests developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-28T19:21:32Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/aio-tests-plugin/job/PR-17/3/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-28T19:21:31Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/aio-tests-plugin/job/PR-17/3/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-28T19:20:44Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 27,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-02-24T19:32:58Z",
    "updatedAt": "2025-02-24T19:46:44Z",
    "user": "gounthar",
    "repository": "jenkinsci/ansible-tower-plugin",
    "pluginName": "ansible-tower",
    "labels": null,
    "url": "https://github.com/jenkinsci/ansible-tower-plugin/pull/27",
    "description": "Hello ansible-tower developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-28T19:40:08Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/ansible-tower-plugin/job/PR-27/6/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-28T19:40:08Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/ansible-tower-plugin/job/PR-27/6/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-28T19:38:25Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 29,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T19:27:50Z",
    "updatedAt": "2025-03-27T19:27:50Z",
    "user": "gounthar",
    "repository": "jenkinsci/ansible-tower-plugin",
    "pluginName": "ansible-tower",
    "labels": null,
    "url": "https://github.com/jenkinsci/ansible-tower-plugin/pull/29",
    "description": "Hello ansible-tower developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T19:28:36Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/ansible-tower-plugin/job/PR-29/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T19:28:36Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/ansible-tower-plugin/job/PR-29/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T19:28:07Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 6,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T19:31:29Z",
    "updatedAt": "2025-03-27T19:33:08Z",
    "user": "gounthar",
    "repository": "jenkinsci/ant-in-workspace-plugin",
    "pluginName": "ant-in-workspace",
    "labels": null,
    "url": "https://github.com/jenkinsci/ant-in-workspace-plugin/pull/6",
    "description": "Hello ant-in-workspace developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T19:38:13Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/ant-in-workspace-plugin/job/PR-6/2/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T19:38:12Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/ant-in-workspace-plugin/job/PR-6/2/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T19:33:22Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 7,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-03-28T16:14:55Z",
    "updatedAt": "2025-03-28T19:42:06Z",
    "user": "gounthar",
    "repository": "jenkinsci/ant-in-workspace-plugin",
    "pluginName": "ant-in-workspace",
    "labels": null,
    "url": "https://github.com/jenkinsci/ant-in-workspace-plugin/pull/7",
    "description": "Hello ant-in-workspace developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-28T19:50:01Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/ant-in-workspace-plugin/job/PR-7/3/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-28T19:50:01Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/ant-in-workspace-plugin/job/PR-7/3/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-28T19:42:22Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 5,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T19:36:46Z",
    "updatedAt": "2025-03-27T19:36:46Z",
    "user": "gounthar",
    "repository": "jenkinsci/appray-plugin",
    "pluginName": "appray",
    "labels": null,
    "url": "https://github.com/jenkinsci/appray-plugin/pull/5",
    "description": "Hello appray developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T19:38:49Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/appray-plugin/job/PR-5/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T19:38:49Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/appray-plugin/job/PR-5/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T19:37:02Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 6,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-03-28T16:19:52Z",
    "updatedAt": "2025-03-28T19:47:36Z",
    "user": "gounthar",
    "repository": "jenkinsci/appray-plugin",
    "pluginName": "appray",
    "labels": null,
    "url": "https://github.com/jenkinsci/appray-plugin/pull/6",
    "description": "Hello appray developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-28T19:49:30Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/appray-plugin/job/PR-6/3/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-28T19:49:30Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/appray-plugin/job/PR-6/3/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-28T19:47:56Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 72,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T19:41:11Z",
    "updatedAt": "2025-03-27T19:41:11Z",
    "user": "gounthar",
    "repository": "jenkinsci/aqua-security-scanner-plugin",
    "pluginName": "aqua-security-scanner",
    "labels": null,
    "url": "https://github.com/jenkinsci/aqua-security-scanner-plugin/pull/72",
    "description": "Hello aqua-security-scanner developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T19:43:04Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/aqua-security-scanner-plugin/job/PR-72/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T19:43:03Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/aqua-security-scanner-plugin/job/PR-72/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T19:41:27Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 73,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-03-28T16:24:22Z",
    "updatedAt": "2025-03-28T19:51:35Z",
    "user": "gounthar",
    "repository": "jenkinsci/aqua-security-scanner-plugin",
    "pluginName": "aqua-security-scanner",
    "labels": null,
    "url": "https://github.com/jenkinsci/aqua-security-scanner-plugin/pull/73",
    "description": "Hello aqua-security-scanner developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-28T19:53:29Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/aqua-security-scanner-plugin/job/PR-73/3/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-28T19:53:29Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/aqua-security-scanner-plugin/job/PR-73/3/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-28T19:51:53Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 8,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T19:47:31Z",
    "updatedAt": "2025-03-27T19:47:31Z",
    "user": "gounthar",
    "repository": "jenkinsci/ascentialtest-cmd-line-plugin",
    "pluginName": "ascentialtest-cmd-line",
    "labels": null,
    "url": "https://github.com/jenkinsci/ascentialtest-cmd-line-plugin/pull/8",
    "description": "Hello ascentialtest-cmd-line developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T19:49:38Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/ascentialtest-cmd-line-plugin/job/PR-8/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T19:49:38Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/ascentialtest-cmd-line-plugin/job/PR-8/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T19:47:47Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 9,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-03-28T16:28:41Z",
    "updatedAt": "2025-03-28T19:56:39Z",
    "user": "gounthar",
    "repository": "jenkinsci/ascentialtest-cmd-line-plugin",
    "pluginName": "ascentialtest-cmd-line",
    "labels": null,
    "url": "https://github.com/jenkinsci/ascentialtest-cmd-line-plugin/pull/9",
    "description": "Hello ascentialtest-cmd-line developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-28T19:58:04Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/ascentialtest-cmd-line-plugin/job/PR-9/3/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-28T19:58:04Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/ascentialtest-cmd-line-plugin/job/PR-9/3/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-28T19:56:57Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 115,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T19:57:44Z",
    "updatedAt": "2025-03-27T19:57:44Z",
    "user": "gounthar",
    "repository": "jenkinsci/autonomiq-plugin",
    "pluginName": "autonomiq",
    "labels": null,
    "url": "https://github.com/jenkinsci/autonomiq-plugin/pull/115",
    "description": "Hello autonomiq developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T19:58:39Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/autonomiq-plugin/job/PR-115/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T19:58:39Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/autonomiq-plugin/job/PR-115/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T19:58:03Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 116,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-03-28T16:34:44Z",
    "updatedAt": "2025-03-28T20:03:30Z",
    "user": "gounthar",
    "repository": "jenkinsci/autonomiq-plugin",
    "pluginName": "autonomiq",
    "labels": null,
    "url": "https://github.com/jenkinsci/autonomiq-plugin/pull/116",
    "description": "Hello autonomiq developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-28T20:04:14Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/autonomiq-plugin/job/PR-116/3/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-28T20:04:13Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/autonomiq-plugin/job/PR-116/3/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-28T20:03:48Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 16,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T20:20:45Z",
    "updatedAt": "2025-03-27T20:20:45Z",
    "user": "gounthar",
    "repository": "jenkinsci/backlog-plugin",
    "pluginName": "backlog",
    "labels": null,
    "url": "https://github.com/jenkinsci/backlog-plugin/pull/16",
    "description": "Hello backlog developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T20:21:27Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/backlog-plugin/job/PR-16/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T20:21:27Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/backlog-plugin/job/PR-16/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T20:21:05Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 10,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-03-28T16:54:26Z",
    "updatedAt": "2025-03-28T20:24:35Z",
    "user": "gounthar",
    "repository": "jenkinsci/beagle-security-plugin",
    "pluginName": "beagle-security",
    "labels": null,
    "url": "https://github.com/jenkinsci/beagle-security-plugin/pull/10",
    "description": "Hello beagle-security developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-28T20:26:45Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/beagle-security-plugin/job/PR-10/3/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-28T20:26:45Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/beagle-security-plugin/job/PR-10/3/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-28T20:24:52Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 9,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T20:22:55Z",
    "updatedAt": "2025-03-27T20:22:55Z",
    "user": "gounthar",
    "repository": "jenkinsci/beagle-security-plugin",
    "pluginName": "beagle-security",
    "labels": null,
    "url": "https://github.com/jenkinsci/beagle-security-plugin/pull/9",
    "description": "Hello beagle-security developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T20:25:34Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/beagle-security-plugin/job/PR-9/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T20:25:33Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/beagle-security-plugin/job/PR-9/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T20:23:16Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 4,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T20:26:48Z",
    "updatedAt": "2025-03-27T20:26:48Z",
    "user": "gounthar",
    "repository": "jenkinsci/bitbucket-filter-project-trait-plugin",
    "pluginName": "bitbucket-filter-project-trait",
    "labels": null,
    "url": "https://github.com/jenkinsci/bitbucket-filter-project-trait-plugin/pull/4",
    "description": "Hello bitbucket-filter-project-trait developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T20:27:40Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/bitbucket-filter-project-trait-plugin/job/PR-4/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T20:27:40Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/bitbucket-filter-project-trait-plugin/job/PR-4/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T20:27:06Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 6,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-03-28T16:58:42Z",
    "updatedAt": "2025-03-28T20:29:04Z",
    "user": "gounthar",
    "repository": "jenkinsci/bitbucket-filter-project-trait-plugin",
    "pluginName": "bitbucket-filter-project-trait",
    "labels": null,
    "url": "https://github.com/jenkinsci/bitbucket-filter-project-trait-plugin/pull/6",
    "description": "Hello bitbucket-filter-project-trait developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-28T20:31:06Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/bitbucket-filter-project-trait-plugin/job/PR-6/3/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-28T20:31:06Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/bitbucket-filter-project-trait-plugin/job/PR-6/3/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-28T20:29:19Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 4,
    "title": "feat(java): Require Jenkins core 2.479.1 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-02-19T18:47:52Z",
    "updatedAt": "2025-02-19T18:47:52Z",
    "user": "gounthar",
    "repository": "jenkinsci/black-duck-sigma-plugin",
    "pluginName": "black-duck-sigma",
    "labels": null,
    "url": "https://github.com/jenkinsci/black-duck-sigma-plugin/pull/4",
    "description": "Hello black-duck-sigma developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nThe checks aren't checking, why is that?\nThe issue likely stems from your Jenkinsfile, which is still declaring Java 8 or 11.\nThe Jenkins infrastructure, in its wisdom, continues to use this, and does not allow the use of a Jenkinsfile supplied by a pull request.\nTo resolve this, a maintainer can replay the failed build by substituting the Jenkinsfile content with our proposed changes using the \"replay the build\" feature in Jenkins.\nPlease let us know if you need any assistance with this process.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-02-19T18:52:27Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/black-duck-sigma-plugin/job/PR-4/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-19T18:52:15Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/black-duck-sigma-plugin/job/PR-4/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-02-19T18:48:01Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-19T18:52:13Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/black-duck-sigma-plugin/job/PR-4/1/display/redirect?page=tests",
        "name": "Tests / linux-21 / Build (linux-21)",
        "startedAt": "2025-02-19T18:52:13Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 18,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T20:30:10Z",
    "updatedAt": "2025-03-27T20:30:10Z",
    "user": "gounthar",
    "repository": "jenkinsci/bmc-change-manager-imstm-plugin",
    "pluginName": "bmc-change-manager-imstm",
    "labels": null,
    "url": "https://github.com/jenkinsci/bmc-change-manager-imstm-plugin/pull/18",
    "description": "Hello bmc-change-manager-imstm developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T20:32:19Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/bmc-change-manager-imstm-plugin/job/PR-18/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T20:32:19Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/bmc-change-manager-imstm-plugin/job/PR-18/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T20:30:31Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 19,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-03-28T18:21:59Z",
    "updatedAt": "2025-03-28T20:31:59Z",
    "user": "gounthar",
    "repository": "jenkinsci/bmc-change-manager-imstm-plugin",
    "pluginName": "bmc-change-manager-imstm",
    "labels": null,
    "url": "https://github.com/jenkinsci/bmc-change-manager-imstm-plugin/pull/19",
    "description": "Hello bmc-change-manager-imstm developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-28T20:34:16Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/bmc-change-manager-imstm-plugin/job/PR-19/2/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-28T20:34:15Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/bmc-change-manager-imstm-plugin/job/PR-19/2/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-28T20:32:15Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 3,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T20:32:52Z",
    "updatedAt": "2025-03-27T20:32:52Z",
    "user": "gounthar",
    "repository": "jenkinsci/breachlock-dast-plugin",
    "pluginName": "breachlock-dast",
    "labels": null,
    "url": "https://github.com/jenkinsci/breachlock-dast-plugin/pull/3",
    "description": "Hello breachlock-dast developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T20:35:19Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/breachlock-dast-plugin/job/PR-3/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T20:35:18Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/breachlock-dast-plugin/job/PR-3/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T20:33:11Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 4,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-03-28T18:24:28Z",
    "updatedAt": "2025-03-28T20:34:32Z",
    "user": "gounthar",
    "repository": "jenkinsci/breachlock-dast-plugin",
    "pluginName": "breachlock-dast",
    "labels": null,
    "url": "https://github.com/jenkinsci/breachlock-dast-plugin/pull/4",
    "description": "Hello breachlock-dast developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-28T20:36:28Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/breachlock-dast-plugin/job/PR-4/2/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-28T20:36:28Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/breachlock-dast-plugin/job/PR-4/2/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-28T20:34:50Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 10,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T20:35:51Z",
    "updatedAt": "2025-03-27T20:35:51Z",
    "user": "gounthar",
    "repository": "jenkinsci/btc-embeddedplatform-plugin",
    "pluginName": "btc-embeddedplatform",
    "labels": null,
    "url": "https://github.com/jenkinsci/btc-embeddedplatform-plugin/pull/10",
    "description": "Hello btc-embeddedplatform developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T20:38:06Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/btc-embeddedplatform-plugin/job/PR-10/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T20:38:06Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/btc-embeddedplatform-plugin/job/PR-10/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T20:36:11Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 11,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-03-28T18:27:03Z",
    "updatedAt": "2025-03-28T20:37:21Z",
    "user": "gounthar",
    "repository": "jenkinsci/btc-embeddedplatform-plugin",
    "pluginName": "btc-embeddedplatform",
    "labels": null,
    "url": "https://github.com/jenkinsci/btc-embeddedplatform-plugin/pull/11",
    "description": "Hello btc-embeddedplatform developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-28T20:39:25Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/btc-embeddedplatform-plugin/job/PR-11/2/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-28T20:39:24Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/btc-embeddedplatform-plugin/job/PR-11/2/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-28T20:37:40Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 4,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T20:41:03Z",
    "updatedAt": "2025-03-27T20:41:03Z",
    "user": "gounthar",
    "repository": "jenkinsci/build-executors-filter-offline-plugin",
    "pluginName": "build-executors-filter-offline",
    "labels": null,
    "url": "https://github.com/jenkinsci/build-executors-filter-offline-plugin/pull/4",
    "description": "Hello build-executors-filter-offline developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T20:43:05Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/build-executors-filter-offline-plugin/job/PR-4/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T20:43:05Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/build-executors-filter-offline-plugin/job/PR-4/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T20:41:21Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 5,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-03-28T18:31:09Z",
    "updatedAt": "2025-03-28T20:41:56Z",
    "user": "gounthar",
    "repository": "jenkinsci/build-executors-filter-offline-plugin",
    "pluginName": "build-executors-filter-offline",
    "labels": null,
    "url": "https://github.com/jenkinsci/build-executors-filter-offline-plugin/pull/5",
    "description": "Hello build-executors-filter-offline developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-28T20:43:54Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/build-executors-filter-offline-plugin/job/PR-5/2/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-28T20:43:53Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/build-executors-filter-offline-plugin/job/PR-5/2/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-28T20:42:16Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 10,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T20:51:45Z",
    "updatedAt": "2025-03-27T20:51:45Z",
    "user": "gounthar",
    "repository": "jenkinsci/carbonetes-serverless-container-scanning-and-policy-compliance-plugin",
    "pluginName": "carbonetes-serverless-container-scanning-and-policy-compliance",
    "labels": null,
    "url": "https://github.com/jenkinsci/carbonetes-serverless-container-scanning-and-policy-compliance-plugin/pull/10",
    "description": "Hello carbonetes-serverless-container-scanning-and-policy-compliance developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T20:53:19Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/carbonetes-serverless-container-scanning-and-policy-compliance-plugin/job/PR-10/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T20:53:18Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/carbonetes-serverless-container-scanning-and-policy-compliance-plugin/job/PR-10/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T20:52:01Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 11,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-03-28T18:42:06Z",
    "updatedAt": "2025-03-28T20:51:55Z",
    "user": "gounthar",
    "repository": "jenkinsci/carbonetes-serverless-container-scanning-and-policy-compliance-plugin",
    "pluginName": "carbonetes-serverless-container-scanning-and-policy-compliance",
    "labels": null,
    "url": "https://github.com/jenkinsci/carbonetes-serverless-container-scanning-and-policy-compliance-plugin/pull/11",
    "description": "Hello carbonetes-serverless-container-scanning-and-policy-compliance developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-28T20:54:44Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/carbonetes-serverless-container-scanning-and-policy-compliance-plugin/job/PR-11/2/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-28T20:54:44Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/carbonetes-serverless-container-scanning-and-policy-compliance-plugin/job/PR-11/2/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-28T20:52:11Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 49,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T20:57:30Z",
    "updatedAt": "2025-03-27T20:57:31Z",
    "user": "gounthar",
    "repository": "jenkinsci/clearcase-ucm-plugin",
    "pluginName": "clearcase-ucm-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/clearcase-ucm-plugin/pull/49",
    "description": "Hello clearcase-ucm-plugin developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T20:58:20Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/clearcase-ucm-plugin/job/PR-49/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T20:58:20Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/clearcase-ucm-plugin/job/PR-49/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T20:57:47Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 50,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-03-28T18:48:48Z",
    "updatedAt": "2025-03-28T20:57:04Z",
    "user": "gounthar",
    "repository": "jenkinsci/clearcase-ucm-plugin",
    "pluginName": "clearcase-ucm-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/clearcase-ucm-plugin/pull/50",
    "description": "Hello clearcase-ucm-plugin developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-28T21:03:07Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/clearcase-ucm-plugin/job/PR-50/2/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-28T21:03:07Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/clearcase-ucm-plugin/job/PR-50/2/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-28T20:57:21Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 89,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T21:01:39Z",
    "updatedAt": "2025-03-27T21:01:40Z",
    "user": "gounthar",
    "repository": "jenkinsci/cloudbees-feature-management-plugin",
    "pluginName": "cloudbees-feature-management",
    "labels": null,
    "url": "https://github.com/jenkinsci/cloudbees-feature-management-plugin/pull/89",
    "description": "Hello cloudbees-feature-management developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T21:04:43Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/cloudbees-feature-management-plugin/job/PR-89/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T21:04:43Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/cloudbees-feature-management-plugin/job/PR-89/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T21:01:56Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 90,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-03-28T18:53:08Z",
    "updatedAt": "2025-03-28T21:00:52Z",
    "user": "gounthar",
    "repository": "jenkinsci/cloudbees-feature-management-plugin",
    "pluginName": "cloudbees-feature-management",
    "labels": null,
    "url": "https://github.com/jenkinsci/cloudbees-feature-management-plugin/pull/90",
    "description": "Hello cloudbees-feature-management developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-28T21:03:13Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/cloudbees-feature-management-plugin/job/PR-90/2/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-28T21:03:12Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/cloudbees-feature-management-plugin/job/PR-90/2/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-28T21:01:12Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 25,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T21:04:43Z",
    "updatedAt": "2025-03-27T21:04:43Z",
    "user": "gounthar",
    "repository": "jenkinsci/cloudevents-plugin",
    "pluginName": "cloudevents",
    "labels": null,
    "url": "https://github.com/jenkinsci/cloudevents-plugin/pull/25",
    "description": "Hello cloudevents developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T21:05:33Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/cloudevents-plugin/job/PR-25/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T21:05:32Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/cloudevents-plugin/job/PR-25/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T21:05:01Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 14,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T21:07:28Z",
    "updatedAt": "2025-03-27T21:07:28Z",
    "user": "gounthar",
    "repository": "jenkinsci/cloudguard-shiftleft-plugin",
    "pluginName": "cloudguard-shiftleft",
    "labels": null,
    "url": "https://github.com/jenkinsci/cloudguard-shiftleft-plugin/pull/14",
    "description": "Hello cloudguard-shiftleft developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T21:09:43Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/cloudguard-shiftleft-plugin/job/PR-14/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T21:09:43Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/cloudguard-shiftleft-plugin/job/PR-14/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T21:07:46Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 15,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-03-28T21:06:44Z",
    "updatedAt": "2025-03-28T21:06:44Z",
    "user": "gounthar",
    "repository": "jenkinsci/cloudguard-shiftleft-plugin",
    "pluginName": "cloudguard-shiftleft",
    "labels": null,
    "url": "https://github.com/jenkinsci/cloudguard-shiftleft-plugin/pull/15",
    "description": "Hello cloudguard-shiftleft developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-28T21:09:10Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/cloudguard-shiftleft-plugin/job/PR-15/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-28T21:09:09Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/cloudguard-shiftleft-plugin/job/PR-15/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-28T21:07:02Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 26,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T21:16:37Z",
    "updatedAt": "2025-03-27T21:16:37Z",
    "user": "gounthar",
    "repository": "jenkinsci/codedx-plugin",
    "pluginName": "codedx",
    "labels": null,
    "url": "https://github.com/jenkinsci/codedx-plugin/pull/26",
    "description": "Hello codedx developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T21:18:12Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/codedx-plugin/job/PR-26/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T21:18:11Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/codedx-plugin/job/PR-26/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T21:16:57Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 6,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T21:19:06Z",
    "updatedAt": "2025-03-27T21:19:06Z",
    "user": "gounthar",
    "repository": "jenkinsci/codeql-plugin",
    "pluginName": "codeql",
    "labels": null,
    "url": "https://github.com/jenkinsci/codeql-plugin/pull/6",
    "description": "Hello codeql developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T21:22:08Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/codeql-plugin/job/PR-6/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T21:22:07Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/codeql-plugin/job/PR-6/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T21:19:22Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 9,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T21:27:39Z",
    "updatedAt": "2025-03-27T21:27:39Z",
    "user": "gounthar",
    "repository": "jenkinsci/computer-queue-plugin",
    "pluginName": "computer-queue-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/computer-queue-plugin/pull/9",
    "description": "Hello computer-queue-plugin developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T21:28:31Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/computer-queue-plugin/job/PR-9/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T21:28:30Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/computer-queue-plugin/job/PR-9/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T21:27:58Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 8,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T21:30:00Z",
    "updatedAt": "2025-03-27T21:30:00Z",
    "user": "gounthar",
    "repository": "jenkinsci/compuware-topaz-for-enterprise-data-plugin",
    "pluginName": "compuware-topaz-for-enterprise-data",
    "labels": null,
    "url": "https://github.com/jenkinsci/compuware-topaz-for-enterprise-data-plugin/pull/8",
    "description": "Hello compuware-topaz-for-enterprise-data developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T21:30:51Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/compuware-topaz-for-enterprise-data-plugin/job/PR-8/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T21:30:51Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/compuware-topaz-for-enterprise-data-plugin/job/PR-8/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T21:30:18Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 6,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T21:35:05Z",
    "updatedAt": "2025-03-27T21:35:05Z",
    "user": "gounthar",
    "repository": "jenkinsci/configuration-as-code-secret-ssm-plugin",
    "pluginName": "configuration-as-code-secret-ssm",
    "labels": null,
    "url": "https://github.com/jenkinsci/configuration-as-code-secret-ssm-plugin/pull/6",
    "description": "Hello configuration-as-code-secret-ssm developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T21:36:14Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/configuration-as-code-secret-ssm-plugin/job/PR-6/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T21:36:14Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/configuration-as-code-secret-ssm-plugin/job/PR-6/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T21:35:23Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 7,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T21:44:55Z",
    "updatedAt": "2025-03-27T21:44:55Z",
    "user": "gounthar",
    "repository": "jenkinsci/cortex-metrics-plugin",
    "pluginName": "cortex-metrics",
    "labels": null,
    "url": "https://github.com/jenkinsci/cortex-metrics-plugin/pull/7",
    "description": "Hello cortex-metrics developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T21:45:45Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/cortex-metrics-plugin/job/PR-7/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T21:45:44Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/cortex-metrics-plugin/job/PR-7/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T21:45:13Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 4,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T21:49:36Z",
    "updatedAt": "2025-03-27T21:49:36Z",
    "user": "gounthar",
    "repository": "jenkinsci/countjobs-viewstabbar-plugin",
    "pluginName": "countjobs-viewstabbar",
    "labels": null,
    "url": "https://github.com/jenkinsci/countjobs-viewstabbar-plugin/pull/4",
    "description": "Hello countjobs-viewstabbar developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T21:52:08Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/countjobs-viewstabbar-plugin/job/PR-4/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T21:52:08Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/countjobs-viewstabbar-plugin/job/PR-4/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T21:50:13Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 9,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T21:53:47Z",
    "updatedAt": "2025-03-27T21:53:47Z",
    "user": "gounthar",
    "repository": "jenkinsci/createjobadvanced-plugin",
    "pluginName": "createjobadvanced",
    "labels": null,
    "url": "https://github.com/jenkinsci/createjobadvanced-plugin/pull/9",
    "description": "Hello createjobadvanced developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T21:55:20Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/createjobadvanced-plugin/job/PR-9/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T21:55:20Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/createjobadvanced-plugin/job/PR-9/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T21:54:03Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 61,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T21:58:42Z",
    "updatedAt": "2025-03-27T21:58:42Z",
    "user": "gounthar",
    "repository": "jenkinsci/custom-build-properties-plugin",
    "pluginName": "custom-build-properties",
    "labels": null,
    "url": "https://github.com/jenkinsci/custom-build-properties-plugin/pull/61",
    "description": "Hello custom-build-properties developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T21:59:32Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/custom-build-properties-plugin/job/PR-61/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T21:59:31Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/custom-build-properties-plugin/job/PR-61/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T21:59:00Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 7,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T22:01:34Z",
    "updatedAt": "2025-03-27T22:01:34Z",
    "user": "gounthar",
    "repository": "jenkinsci/custom-checkbox-parameter-plugin",
    "pluginName": "custom-checkbox-parameter",
    "labels": null,
    "url": "https://github.com/jenkinsci/custom-checkbox-parameter-plugin/pull/7",
    "description": "Hello custom-checkbox-parameter developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T22:02:37Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/custom-checkbox-parameter-plugin/job/PR-7/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T22:02:36Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/custom-checkbox-parameter-plugin/job/PR-7/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T22:01:49Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 73,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T22:04:54Z",
    "updatedAt": "2025-03-27T22:04:54Z",
    "user": "gounthar",
    "repository": "jenkinsci/custom-tools-plugin",
    "pluginName": "custom-tools-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/custom-tools-plugin/pull/73",
    "description": "Hello custom-tools-plugin developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T22:05:39Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/custom-tools-plugin/job/PR-73/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T22:05:39Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/custom-tools-plugin/job/PR-73/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T22:05:10Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 57,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-02-25T15:58:51Z",
    "updatedAt": "2025-02-25T16:33:42Z",
    "user": "gounthar",
    "repository": "jenkinsci/dagshub-branch-source-plugin",
    "pluginName": "dagshub-branch-source",
    "labels": null,
    "url": "https://github.com/jenkinsci/dagshub-branch-source-plugin/pull/57",
    "description": "Hello dagshub-branch-source developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T22:09:13Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/dagshub-branch-source-plugin/job/PR-57/4/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T22:09:13Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/dagshub-branch-source-plugin/job/PR-57/4/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T22:08:45Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 6,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T22:14:14Z",
    "updatedAt": "2025-03-27T22:14:14Z",
    "user": "gounthar",
    "repository": "jenkinsci/depbuilder-plugin",
    "pluginName": "depbuilder",
    "labels": null,
    "url": "https://github.com/jenkinsci/depbuilder-plugin/pull/6",
    "description": "Hello depbuilder developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T22:15:47Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/depbuilder-plugin/job/PR-6/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T22:15:47Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/depbuilder-plugin/job/PR-6/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T22:14:31Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 2,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T22:18:39Z",
    "updatedAt": "2025-03-27T22:18:40Z",
    "user": "gounthar",
    "repository": "jenkinsci/deploy-integrationserver-plugin",
    "pluginName": "deploy-integrationserver",
    "labels": null,
    "url": "https://github.com/jenkinsci/deploy-integrationserver-plugin/pull/2",
    "description": "Hello deploy-integrationserver developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T22:22:00Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/deploy-integrationserver-plugin/job/PR-2/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T22:21:59Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/deploy-integrationserver-plugin/job/PR-2/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T22:18:56Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 3,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T22:22:09Z",
    "updatedAt": "2025-03-27T22:22:09Z",
    "user": "gounthar",
    "repository": "jenkinsci/describe-with-params-plugin",
    "pluginName": "describe-with-params",
    "labels": null,
    "url": "https://github.com/jenkinsci/describe-with-params-plugin/pull/3",
    "description": "Hello describe-with-params developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T22:22:40Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/describe-with-params-plugin/job/PR-3/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T22:22:40Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/describe-with-params-plugin/job/PR-3/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T22:22:28Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 74,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T22:26:35Z",
    "updatedAt": "2025-03-27T22:26:35Z",
    "user": "gounthar",
    "repository": "jenkinsci/digitalocean-plugin",
    "pluginName": "digitalocean-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/digitalocean-plugin/pull/74",
    "description": "Hello digitalocean-plugin developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T22:27:02Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/digitalocean-plugin/job/PR-74/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T22:27:02Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/digitalocean-plugin/job/PR-74/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T22:26:54Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 122,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T22:29:32Z",
    "updatedAt": "2025-03-27T22:29:32Z",
    "user": "gounthar",
    "repository": "jenkinsci/docker-build-publish-plugin",
    "pluginName": "docker-build-publish",
    "labels": null,
    "url": "https://github.com/jenkinsci/docker-build-publish-plugin/pull/122",
    "description": "Hello docker-build-publish developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T22:29:56Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/docker-build-publish-plugin/job/PR-122/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T22:29:56Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/docker-build-publish-plugin/job/PR-122/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T22:29:50Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 133,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-27T22:33:08Z",
    "updatedAt": "2025-03-27T22:33:08Z",
    "user": "gounthar",
    "repository": "jenkinsci/docker-swarm-plugin",
    "pluginName": "docker-swarm",
    "labels": null,
    "url": "https://github.com/jenkinsci/docker-swarm-plugin/pull/133",
    "description": "Hello docker-swarm developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T22:33:40Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/docker-swarm-plugin/job/PR-133/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T22:33:40Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/docker-swarm-plugin/job/PR-133/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T22:33:26Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 35,
    "title": "chore: Upgrade to latest LTS core version supporting Java 8 (requires 2.346.3)",
    "state": "OPEN",
    "createdAt": "2025-01-29T20:54:13Z",
    "updatedAt": "2025-03-11T11:33:43Z",
    "user": "gounthar",
    "repository": "jenkinsci/katalon-plugin",
    "pluginName": "katalon",
    "labels": null,
    "url": "https://github.com/jenkinsci/katalon-plugin/pull/35",
    "description": "Hello katalon developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-11T11:36:15Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/katalon-plugin/job/PR-35/5/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-11T11:36:14Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/katalon-plugin/job/PR-35/5/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-11T11:34:01Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-11T11:36:01Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/katalon-plugin/job/PR-35/5/spotbugs",
        "name": "SpotBugs",
        "startedAt": "2025-03-11T11:36:02Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-11T11:36:05Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/katalon-plugin/job/PR-35/5/cpd",
        "name": "CPD",
        "startedAt": "2025-03-11T11:36:06Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-11T11:36:02Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/katalon-plugin/job/PR-35/5/checkstyle",
        "name": "CheckStyle",
        "startedAt": "2025-03-11T11:36:04Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-11T11:35:45Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/katalon-plugin/job/PR-35/5//coverage",
        "name": "Code Coverage",
        "startedAt": "2025-03-11T11:35:46Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-11T11:35:48Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/katalon-plugin/job/PR-35/5/eslint",
        "name": "ESLint",
        "startedAt": "2025-03-11T11:35:49Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-11T11:35:50Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/katalon-plugin/job/PR-35/5/java",
        "name": "Java Compiler",
        "startedAt": "2025-03-11T11:35:51Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-11T11:35:51Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/katalon-plugin/job/PR-35/5/javadoc-warnings",
        "name": "JavaDoc",
        "startedAt": "2025-03-11T11:35:52Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-11T11:35:47Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/katalon-plugin/job/PR-35/5/maven-warnings",
        "name": "Maven",
        "startedAt": "2025-03-11T11:35:48Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-11T11:36:06Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/katalon-plugin/job/PR-35/5/open-tasks",
        "name": "Open Tasks Scanner",
        "startedAt": "2025-03-11T11:36:07Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-11T11:36:03Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/katalon-plugin/job/PR-35/5/pmd",
        "name": "PMD",
        "startedAt": "2025-03-11T11:36:05Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-11T11:35:43Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/katalon-plugin/job/PR-35/5/display/redirect?page=tests",
        "name": "Tests / linux-8 / Build (linux-8)",
        "startedAt": "2025-03-11T11:35:44Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 1,
    "title": "chore: Upgrade to latest LTS core version supporting Java 8 (requires 2.346.3)",
    "state": "OPEN",
    "createdAt": "2025-01-29T20:16:08Z",
    "updatedAt": "2025-02-15T21:54:20Z",
    "user": "gounthar",
    "repository": "jenkinsci/logback-nats-appender-plugin",
    "pluginName": "logback-nats-appender",
    "labels": null,
    "url": "https://github.com/jenkinsci/logback-nats-appender-plugin/pull/1",
    "description": "Hello logback-nats-appender developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-02-15T21:59:00Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/logback-nats-appender-plugin/job/PR-1/2/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-15T21:58:56Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/logback-nats-appender-plugin/job/PR-1/2/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-02-15T21:54:30Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-15T21:56:48Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/logback-nats-appender-plugin/job/PR-1/2/cpd",
        "name": "CPD",
        "startedAt": "2025-02-15T21:56:48Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-15T21:56:46Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/logback-nats-appender-plugin/job/PR-1/2/checkstyle",
        "name": "CheckStyle",
        "startedAt": "2025-02-15T21:56:46Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-15T21:56:42Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/logback-nats-appender-plugin/job/PR-1/2/eslint",
        "name": "ESLint",
        "startedAt": "2025-02-15T21:56:42Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-15T21:56:43Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/logback-nats-appender-plugin/job/PR-1/2/java",
        "name": "Java Compiler",
        "startedAt": "2025-02-15T21:56:43Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-15T21:56:44Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/logback-nats-appender-plugin/job/PR-1/2/javadoc-warnings",
        "name": "JavaDoc",
        "startedAt": "2025-02-15T21:56:44Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-15T21:56:41Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/logback-nats-appender-plugin/job/PR-1/2/maven-warnings",
        "name": "Maven",
        "startedAt": "2025-02-15T21:56:41Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-15T21:56:49Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/logback-nats-appender-plugin/job/PR-1/2/open-tasks",
        "name": "Open Tasks Scanner",
        "startedAt": "2025-02-15T21:56:49Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-15T21:56:47Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/logback-nats-appender-plugin/job/PR-1/2/pmd",
        "name": "PMD",
        "startedAt": "2025-02-15T21:56:47Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-15T21:56:45Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/logback-nats-appender-plugin/job/PR-1/2/spotbugs",
        "name": "SpotBugs",
        "startedAt": "2025-02-15T21:56:45Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-15T21:56:38Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/logback-nats-appender-plugin/job/PR-1/2/display/redirect?page=tests",
        "name": "Tests / linux-8 / Build (linux-8)",
        "startedAt": "2025-02-15T21:56:38Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-15T21:58:52Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/logback-nats-appender-plugin/job/PR-1/2/display/redirect?page=tests",
        "name": "Tests / windows-8 / Build (windows-8)",
        "startedAt": "2025-02-15T21:58:52Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 1,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T19:29:53Z",
    "updatedAt": "2025-01-29T19:29:53Z",
    "user": "gounthar",
    "repository": "jenkinsci/netdomain-labeler-plugin",
    "pluginName": "netdomain-labeler",
    "labels": null,
    "url": "https://github.com/jenkinsci/netdomain-labeler-plugin/pull/1",
    "description": "Hello netdomain-labeler developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-01-29T19:32:33Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/netdomain-labeler-plugin/job/PR-1/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T19:32:33Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/netdomain-labeler-plugin/job/PR-1/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-01-29T19:30:10Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T19:32:08Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/netdomain-labeler-plugin/job/PR-1/1/display/redirect?page=tests",
        "name": "Tests / linux-8 / Build (linux-8)",
        "startedAt": "2025-01-29T19:32:10Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 71,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T19:22:16Z",
    "updatedAt": "2025-01-29T19:22:16Z",
    "user": "gounthar",
    "repository": "jenkinsci/neuvector-vulnerability-scanner-plugin",
    "pluginName": "neuvector-vulnerability-scanner",
    "labels": null,
    "url": "https://github.com/jenkinsci/neuvector-vulnerability-scanner-plugin/pull/71",
    "description": "Hello neuvector-vulnerability-scanner developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-01-29T19:25:11Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/neuvector-vulnerability-scanner-plugin/job/PR-71/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T19:25:10Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/neuvector-vulnerability-scanner-plugin/job/PR-71/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-01-29T19:22:36Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T19:25:01Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/neuvector-vulnerability-scanner-plugin/job/PR-71/1/spotbugs",
        "name": "SpotBugs",
        "startedAt": "2025-01-29T19:25:03Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T19:25:04Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/neuvector-vulnerability-scanner-plugin/job/PR-71/1/cpd",
        "name": "CPD",
        "startedAt": "2025-01-29T19:25:06Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T19:25:02Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/neuvector-vulnerability-scanner-plugin/job/PR-71/1/checkstyle",
        "name": "CheckStyle",
        "startedAt": "2025-01-29T19:25:04Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T19:24:49Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/neuvector-vulnerability-scanner-plugin/job/PR-71/1//coverage",
        "name": "Code Coverage",
        "startedAt": "2025-01-29T19:24:51Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T19:24:51Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/neuvector-vulnerability-scanner-plugin/job/PR-71/1/eslint",
        "name": "ESLint",
        "startedAt": "2025-01-29T19:24:53Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T19:24:53Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/neuvector-vulnerability-scanner-plugin/job/PR-71/1/java",
        "name": "Java Compiler",
        "startedAt": "2025-01-29T19:24:55Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T19:24:54Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/neuvector-vulnerability-scanner-plugin/job/PR-71/1/javadoc-warnings",
        "name": "JavaDoc",
        "startedAt": "2025-01-29T19:24:56Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T19:24:50Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/neuvector-vulnerability-scanner-plugin/job/PR-71/1/maven-warnings",
        "name": "Maven",
        "startedAt": "2025-01-29T19:24:52Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T19:25:05Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/neuvector-vulnerability-scanner-plugin/job/PR-71/1/open-tasks",
        "name": "Open Tasks Scanner",
        "startedAt": "2025-01-29T19:25:07Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T19:25:03Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/neuvector-vulnerability-scanner-plugin/job/PR-71/1/pmd",
        "name": "PMD",
        "startedAt": "2025-01-29T19:25:05Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T19:24:47Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/neuvector-vulnerability-scanner-plugin/job/PR-71/1/display/redirect?page=tests",
        "name": "Tests / linux-8 / Build (linux-8)",
        "startedAt": "2025-01-29T19:24:49Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 16,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T18:54:15Z",
    "updatedAt": "2025-01-29T18:54:15Z",
    "user": "gounthar",
    "repository": "jenkinsci/nvm-wrapper-plugin",
    "pluginName": "nvm-wrapper",
    "labels": null,
    "url": "https://github.com/jenkinsci/nvm-wrapper-plugin/pull/16",
    "description": "Hello nvm-wrapper developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-01-29T18:56:13Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/nvm-wrapper-plugin/job/PR-16/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T18:56:13Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/nvm-wrapper-plugin/job/PR-16/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-01-29T18:54:37Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 15,
    "title": "Require 2.414.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T18:48:50Z",
    "updatedAt": "2025-03-10T21:39:53Z",
    "user": "gounthar",
    "repository": "jenkinsci/octoperf-plugin",
    "pluginName": "octoperf",
    "labels": null,
    "url": "https://github.com/jenkinsci/octoperf-plugin/pull/15",
    "description": "Hello octoperf developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-01-29T18:50:26Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/octoperf-plugin/job/PR-15/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T18:50:26Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/octoperf-plugin/job/PR-15/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-01-29T18:49:11Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 4,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T18:40:16Z",
    "updatedAt": "2025-01-29T18:40:16Z",
    "user": "gounthar",
    "repository": "jenkinsci/opslevel-plugin",
    "pluginName": "opslevel",
    "labels": null,
    "url": "https://github.com/jenkinsci/opslevel-plugin/pull/4",
    "description": "Hello opslevel developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-01-29T18:42:59Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/opslevel-plugin/job/PR-4/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T18:42:58Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/opslevel-plugin/job/PR-4/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-01-29T18:40:37Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T18:42:51Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/opslevel-plugin/job/PR-4/1/spotbugs",
        "name": "SpotBugs",
        "startedAt": "2025-01-29T18:42:53Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T18:42:54Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/opslevel-plugin/job/PR-4/1/cpd",
        "name": "CPD",
        "startedAt": "2025-01-29T18:42:56Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T18:42:52Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/opslevel-plugin/job/PR-4/1/checkstyle",
        "name": "CheckStyle",
        "startedAt": "2025-01-29T18:42:54Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T18:42:41Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/opslevel-plugin/job/PR-4/1//coverage",
        "name": "Code Coverage",
        "startedAt": "2025-01-29T18:42:43Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T18:42:45Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/opslevel-plugin/job/PR-4/1/eslint",
        "name": "ESLint",
        "startedAt": "2025-01-29T18:42:47Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T18:42:47Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/opslevel-plugin/job/PR-4/1/java",
        "name": "Java Compiler",
        "startedAt": "2025-01-29T18:42:49Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T18:42:48Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/opslevel-plugin/job/PR-4/1/javadoc-warnings",
        "name": "JavaDoc",
        "startedAt": "2025-01-29T18:42:50Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T18:42:44Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/opslevel-plugin/job/PR-4/1/maven-warnings",
        "name": "Maven",
        "startedAt": "2025-01-29T18:42:46Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T18:42:56Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/opslevel-plugin/job/PR-4/1/open-tasks",
        "name": "Open Tasks Scanner",
        "startedAt": "2025-01-29T18:42:57Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T18:42:53Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/opslevel-plugin/job/PR-4/1/pmd",
        "name": "PMD",
        "startedAt": "2025-01-29T18:42:55Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T18:42:39Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/opslevel-plugin/job/PR-4/1/display/redirect?page=tests",
        "name": "Tests / linux-8 / Build (linux-8)",
        "startedAt": "2025-01-29T18:42:41Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 15,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T18:20:25Z",
    "updatedAt": "2025-01-29T18:20:25Z",
    "user": "gounthar",
    "repository": "jenkinsci/ostorlab-plugin",
    "pluginName": "ostorlab",
    "labels": null,
    "url": "https://github.com/jenkinsci/ostorlab-plugin/pull/15",
    "description": "Hello ostorlab developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-01-29T18:22:41Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/ostorlab-plugin/job/PR-15/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T18:22:40Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/ostorlab-plugin/job/PR-15/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-01-29T18:20:45Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T18:22:34Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/ostorlab-plugin/job/PR-15/1/display/redirect?page=tests",
        "name": "Tests / linux-8 / Build (linux-8)",
        "startedAt": "2025-01-29T18:22:36Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T18:22:36Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/ostorlab-plugin/job/PR-15/1//coverage",
        "name": "Code Coverage",
        "startedAt": "2025-01-29T18:22:38Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 26,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-01-29T21:47:34Z",
    "updatedAt": "2025-01-29T21:52:34Z",
    "user": "gounthar",
    "repository": "jenkinsci/proxmox-plugin",
    "pluginName": "proxmox",
    "labels": null,
    "url": "https://github.com/jenkinsci/proxmox-plugin/pull/26",
    "description": "Hello proxmox developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\nüôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-01-29T21:54:58Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/proxmox-plugin/job/PR-26/3/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-29T21:54:58Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/proxmox-plugin/job/PR-26/3/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-01-29T21:52:51Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 7,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T17:12:54Z",
    "updatedAt": "2025-02-14T15:30:39Z",
    "user": "gounthar",
    "repository": "jenkinsci/publish-over-dropbox-plugin",
    "pluginName": "publish-over-dropbox",
    "labels": null,
    "url": "https://github.com/jenkinsci/publish-over-dropbox-plugin/pull/7",
    "description": "Hello publish-over-dropbox developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-02-14T15:33:25Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/publish-over-dropbox-plugin/job/PR-7/2/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T15:33:25Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/publish-over-dropbox-plugin/job/PR-7/2/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-02-14T15:30:53Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T15:33:06Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/publish-over-dropbox-plugin/job/PR-7/2/display/redirect?page=tests",
        "name": "Tests / linux-8 / Build (linux-8)",
        "startedAt": "2025-02-14T15:33:06Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T15:33:09Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/publish-over-dropbox-plugin/job/PR-7/2//coverage",
        "name": "Code Coverage",
        "startedAt": "2025-02-14T15:33:09Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 36,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T16:24:53Z",
    "updatedAt": "2025-02-14T14:58:52Z",
    "user": "gounthar",
    "repository": "jenkinsci/rapid7-insightvm-container-assessment-plugin",
    "pluginName": "rapid7-insightvm-container-assessment",
    "labels": null,
    "url": "https://github.com/jenkinsci/rapid7-insightvm-container-assessment-plugin/pull/36",
    "description": "Hello rapid7-insightvm-container-assessment developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-02-14T15:02:28Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/rapid7-insightvm-container-assessment-plugin/job/PR-36/2/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T15:02:27Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/rapid7-insightvm-container-assessment-plugin/job/PR-36/2/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-02-14T14:59:07Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T15:01:54Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/rapid7-insightvm-container-assessment-plugin/job/PR-36/2/spotbugs",
        "name": "SpotBugs",
        "startedAt": "2025-02-14T15:01:54Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T15:01:57Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/rapid7-insightvm-container-assessment-plugin/job/PR-36/2/cpd",
        "name": "CPD",
        "startedAt": "2025-02-14T15:01:57Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T15:01:55Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/rapid7-insightvm-container-assessment-plugin/job/PR-36/2/checkstyle",
        "name": "CheckStyle",
        "startedAt": "2025-02-14T15:01:55Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T15:01:41Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/rapid7-insightvm-container-assessment-plugin/job/PR-36/2//coverage",
        "name": "Code Coverage",
        "startedAt": "2025-02-14T15:01:41Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T15:01:44Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/rapid7-insightvm-container-assessment-plugin/job/PR-36/2/eslint",
        "name": "ESLint",
        "startedAt": "2025-02-14T15:01:44Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T15:01:47Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/rapid7-insightvm-container-assessment-plugin/job/PR-36/2/java",
        "name": "Java Compiler",
        "startedAt": "2025-02-14T15:01:47Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T15:01:48Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/rapid7-insightvm-container-assessment-plugin/job/PR-36/2/javadoc-warnings",
        "name": "JavaDoc",
        "startedAt": "2025-02-14T15:01:48Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T15:01:43Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/rapid7-insightvm-container-assessment-plugin/job/PR-36/2/maven-warnings",
        "name": "Maven",
        "startedAt": "2025-02-14T15:01:43Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T15:01:58Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/rapid7-insightvm-container-assessment-plugin/job/PR-36/2/open-tasks",
        "name": "Open Tasks Scanner",
        "startedAt": "2025-02-14T15:01:58Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T15:01:56Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/rapid7-insightvm-container-assessment-plugin/job/PR-36/2/pmd",
        "name": "PMD",
        "startedAt": "2025-02-14T15:01:56Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T15:01:38Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/rapid7-insightvm-container-assessment-plugin/job/PR-36/2/display/redirect?page=tests",
        "name": "Tests / linux-8 / Build (linux-8)",
        "startedAt": "2025-02-14T15:01:38Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 3,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T16:12:11Z",
    "updatedAt": "2025-02-14T14:54:31Z",
    "user": "gounthar",
    "repository": "jenkinsci/rapiddeploy-plugin",
    "pluginName": "rapiddeploy-jenkins",
    "labels": null,
    "url": "https://github.com/jenkinsci/rapiddeploy-plugin/pull/3",
    "description": "Hello rapiddeploy-jenkins developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-02-14T14:56:19Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/rapiddeploy-plugin/job/PR-3/2/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T14:56:19Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/rapiddeploy-plugin/job/PR-3/2/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-02-14T14:54:47Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 6,
    "title": "chore(github): Add CODEOWNERS",
    "state": "OPEN",
    "createdAt": "2025-01-24T10:00:24Z",
    "updatedAt": "2025-01-24T10:05:42Z",
    "user": "gounthar",
    "repository": "jenkinsci/report-info-plugin",
    "pluginName": "report-info",
    "labels": null,
    "url": "https://github.com/jenkinsci/report-info-plugin/pull/6",
    "description": "Hello report-info developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nThe checks should go green after #5 is merged.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-01-24T10:01:37Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/report-info-plugin/job/PR-6/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-24T10:01:37Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/report-info-plugin/job/PR-6/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-01-24T10:00:41Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-24T10:01:35Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/report-info-plugin/job/PR-6/1/display/redirect?page=tests",
        "name": "Tests / linux-21 / Build (linux-21)",
        "startedAt": "2025-01-24T10:01:36Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 7,
    "title": "chore(dependencies): Automate dependency updates with Dependabot",
    "state": "OPEN",
    "createdAt": "2025-01-24T10:06:36Z",
    "updatedAt": "2025-01-24T10:15:09Z",
    "user": "gounthar",
    "repository": "jenkinsci/report-info-plugin",
    "pluginName": "report-info",
    "labels": null,
    "url": "https://github.com/jenkinsci/report-info-plugin/pull/7",
    "description": "Hello report-info developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup dependabot\n    io.jenkins.tools.pluginmodernizer.SetupDependabot\n    Setup dependabot for the Jenkins plugin if it doesn't exist.\n\nTesting\nThe checks should go green after #5 is merged.\nWhy Automate with Dependabot?\nManaging dependencies can be a time-consuming and challenging task, especially when maintaining a Jenkins plugin. By automating this process with Dependabot, you open the door to a host of advantages:\n\n\nKeep Pace with Innovation: Dependabot ensures your plugin stays at the cutting edge by promptly updating it with the latest features and improvements from upstream libraries.\n\n\nStrengthen Security: Staying current with dependency updates is critical for security. Dependabot automatically flags and updates any vulnerable dependencies, helping to shield your plugin from potential exploits.\n\n\nSave Time and Effort: Spend less time managing dependencies and more time innovating. Dependabot automatically submits pull requests for new releases, allowing you to effortlessly review and integrate updates.\n\n\nEnhance Compatibility and Stability: Regular updates enhance both performance and compatibility with other plugins and the Jenkins core, ensuring a smooth experience for your users.\n\n\nFocus on What Matters: With Dependabot, you can concentrate on developing new features and fixing bugs, while it takes care of keeping everything up-to-date under the hood.\n\n\nSetting up Dependabot exemplifies a proactive approach to modern software maintenance, aligning your plugin with the best practices in the industry. We invite you to test these updates and embrace a maintenance workflow that is efficient and secure.\nYour insights and feedback are invaluable to us, and we'll be here to support you through this transition as needed.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-01-24T10:08:00Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/report-info-plugin/job/PR-7/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-24T10:08:00Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/report-info-plugin/job/PR-7/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-01-24T10:06:56Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-24T10:07:57Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/report-info-plugin/job/PR-7/1/display/redirect?page=tests",
        "name": "Tests / linux-21 / Build (linux-21)",
        "startedAt": "2025-01-24T10:07:58Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 8,
    "title": "Applied recipe FixJellyIssues",
    "state": "OPEN",
    "createdAt": "2025-01-24T10:27:29Z",
    "updatedAt": "2025-01-24T10:36:05Z",
    "user": "gounthar",
    "repository": "jenkinsci/report-info-plugin",
    "pluginName": "report-info",
    "labels": null,
    "url": "https://github.com/jenkinsci/report-info-plugin/pull/8",
    "description": "Hello report-info developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add XML declaration to Jelly files and create index.jelly if it doesn't exist\n    io.jenkins.tools.pluginmodernizer.FixJellyIssues\n    Ensure the XML declaration `<?jelly escape-by-default='true'?>` is present in all `.jelly` files and create index.jelly if it doesn't exist.\n\nTesting\nThe checks should go green after #5 is merged.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-01-24T10:28:36Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/report-info-plugin/job/PR-8/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-24T10:28:35Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/report-info-plugin/job/PR-8/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-01-24T10:27:46Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-01-24T10:28:34Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/report-info-plugin/job/PR-8/1/display/redirect?page=tests",
        "name": "Tests / linux-21 / Build (linux-21)",
        "startedAt": "2025-01-24T10:28:35Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 4,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T14:20:49Z",
    "updatedAt": "2025-02-14T13:21:34Z",
    "user": "gounthar",
    "repository": "jenkinsci/split-admin-plugin",
    "pluginName": "split-admin",
    "labels": null,
    "url": "https://github.com/jenkinsci/split-admin-plugin/pull/4",
    "description": "Hello split-admin developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-02-14T13:24:17Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/split-admin-plugin/job/PR-4/3/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T13:24:16Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/split-admin-plugin/job/PR-4/3/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-02-14T13:21:51Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T13:24:02Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/split-admin-plugin/job/PR-4/3/display/redirect?page=tests",
        "name": "Tests / linux-8 / Build (linux-8)",
        "startedAt": "2025-02-14T13:24:02Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T13:24:04Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/split-admin-plugin/job/PR-4/3//coverage",
        "name": "Code Coverage",
        "startedAt": "2025-02-14T13:24:05Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 1,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T14:11:43Z",
    "updatedAt": "2025-02-14T13:12:26Z",
    "user": "gounthar",
    "repository": "jenkinsci/stackrox-container-image-scanner-plugin",
    "pluginName": "stackrox-container-image-scanner",
    "labels": null,
    "url": "https://github.com/jenkinsci/stackrox-container-image-scanner-plugin/pull/1",
    "description": "Hello stackrox-container-image-scanner developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-02-14T13:17:04Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/stackrox-container-image-scanner-plugin/job/PR-1/3/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T13:17:04Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/stackrox-container-image-scanner-plugin/job/PR-1/3/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-02-14T13:12:41Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T13:16:13Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/stackrox-container-image-scanner-plugin/job/PR-1/3/display/redirect?page=tests",
        "name": "Tests / linux-8 / Build (linux-8)",
        "startedAt": "2025-02-14T13:16:13Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T13:16:46Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/stackrox-container-image-scanner-plugin/job/PR-1/3//coverage",
        "name": "Code Coverage",
        "startedAt": "2025-02-14T13:16:46Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 189,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T14:03:01Z",
    "updatedAt": "2025-02-14T13:03:45Z",
    "user": "gounthar",
    "repository": "jenkinsci/stash-pullrequest-builder-plugin",
    "pluginName": "stash-pullrequest-builder",
    "labels": null,
    "url": "https://github.com/jenkinsci/stash-pullrequest-builder-plugin/pull/189",
    "description": "Hello stash-pullrequest-builder developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-02-14T13:08:21Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/stash-pullrequest-builder-plugin/job/PR-189/3/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T13:08:20Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/stash-pullrequest-builder-plugin/job/PR-189/3/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-02-14T13:04:01Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T13:07:51Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/stash-pullrequest-builder-plugin/job/PR-189/3/display/redirect?page=tests",
        "name": "Tests / linux-8 / Build (linux-8)",
        "startedAt": "2025-02-14T13:07:51Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T13:07:53Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/stash-pullrequest-builder-plugin/job/PR-189/3//coverage",
        "name": "Code Coverage",
        "startedAt": "2025-02-14T13:07:53Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 55,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T13:56:09Z",
    "updatedAt": "2025-02-14T12:55:51Z",
    "user": "gounthar",
    "repository": "jenkinsci/statuspage-gating-plugin",
    "pluginName": "statuspage-gating",
    "labels": null,
    "url": "https://github.com/jenkinsci/statuspage-gating-plugin/pull/55",
    "description": "Hello statuspage-gating developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-12T09:31:02Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/statuspage-gating-plugin/job/PR-55/4/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-12T09:31:01Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/statuspage-gating-plugin/job/PR-55/4/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-12T09:07:30Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-12T09:30:59Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/statuspage-gating-plugin/job/PR-55/4//coverage",
        "name": "Code Coverage",
        "startedAt": "2025-03-12T09:17:09Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-12T09:19:46Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/statuspage-gating-plugin/job/PR-55/4/eslint",
        "name": "ESLint",
        "startedAt": "2025-03-12T09:19:48Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-12T09:22:44Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/statuspage-gating-plugin/job/PR-55/4/java",
        "name": "Java Compiler",
        "startedAt": "2025-03-12T09:22:46Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-12T09:24:22Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/statuspage-gating-plugin/job/PR-55/4/javadoc-warnings",
        "name": "JavaDoc",
        "startedAt": "2025-03-12T09:24:24Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-12T09:19:22Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/statuspage-gating-plugin/job/PR-55/4/maven-warnings",
        "name": "Maven",
        "startedAt": "2025-03-12T09:19:24Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-12T09:30:57Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/statuspage-gating-plugin/job/PR-55/4/display/redirect?page=tests",
        "name": "Tests / linux-8 / Build (linux-8)",
        "startedAt": "2025-03-12T09:16:12Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-12T09:18:02Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/statuspage-gating-plugin/job/PR-55/4/display/redirect?page=tests",
        "name": "Tests / windows-8 / Build (windows-8)",
        "startedAt": "2025-03-12T09:18:04Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 5,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T13:33:15Z",
    "updatedAt": "2025-02-14T12:36:13Z",
    "user": "gounthar",
    "repository": "jenkinsci/testcafe-plugin",
    "pluginName": "testcafe",
    "labels": null,
    "url": "https://github.com/jenkinsci/testcafe-plugin/pull/5",
    "description": "Hello testcafe developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-02-14T12:43:17Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/testcafe-plugin/job/PR-5/3/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T12:43:17Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/testcafe-plugin/job/PR-5/3/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-02-14T12:36:33Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T12:43:11Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/testcafe-plugin/job/PR-5/3/display/redirect?page=tests",
        "name": "Tests / linux-8 / Build (linux-8)",
        "startedAt": "2025-02-14T12:43:11Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T12:43:13Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/testcafe-plugin/job/PR-5/3//coverage",
        "name": "Code Coverage",
        "startedAt": "2025-02-14T12:43:13Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 20,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T13:11:20Z",
    "updatedAt": "2025-02-14T12:17:17Z",
    "user": "gounthar",
    "repository": "jenkinsci/thycotic-devops-secrets-vault-plugin",
    "pluginName": "thycotic-devops-secrets-vault",
    "labels": null,
    "url": "https://github.com/jenkinsci/thycotic-devops-secrets-vault-plugin/pull/20",
    "description": "Hello thycotic-devops-secrets-vault developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-02-14T12:18:34Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/thycotic-devops-secrets-vault-plugin/job/PR-20/3/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T12:18:34Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/thycotic-devops-secrets-vault-plugin/job/PR-20/3/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-02-14T12:17:36Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 4,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T11:17:38Z",
    "updatedAt": "2025-02-14T11:36:41Z",
    "user": "gounthar",
    "repository": "jenkinsci/vdoo-vision-plugin",
    "pluginName": "vdoo-vision",
    "labels": null,
    "url": "https://github.com/jenkinsci/vdoo-vision-plugin/pull/4",
    "description": "Hello vdoo-vision developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-02-14T11:39:42Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/vdoo-vision-plugin/job/PR-4/3/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T11:39:41Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/vdoo-vision-plugin/job/PR-4/3/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-02-14T11:36:56Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 10,
    "title": "chore(github): Add CODEOWNERS",
    "state": "OPEN",
    "createdAt": "2025-03-27T09:45:21Z",
    "updatedAt": "2025-03-27T09:45:21Z",
    "user": "gounthar",
    "repository": "jenkinsci/visualworks-store-plugin",
    "pluginName": "visualworks-store",
    "labels": null,
    "url": "https://github.com/jenkinsci/visualworks-store-plugin/pull/10",
    "description": "Hello visualworks-store developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T09:51:51Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-10/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:51:50Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-10/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T09:45:43Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:51:48Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-10/1/display/redirect?page=tests",
        "name": "Tests / windows-8 / Build (windows-8)",
        "startedAt": "2025-03-27T09:51:54Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:50:26Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-10/1/cpd",
        "name": "CPD",
        "startedAt": "2025-03-27T09:50:32Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:50:24Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-10/1/checkstyle",
        "name": "CheckStyle",
        "startedAt": "2025-03-27T09:50:30Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:50:13Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-10/1//coverage",
        "name": "Code Coverage",
        "startedAt": "2025-03-27T09:50:20Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:50:17Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-10/1/eslint",
        "name": "ESLint",
        "startedAt": "2025-03-27T09:50:23Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:50:18Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-10/1/java",
        "name": "Java Compiler",
        "startedAt": "2025-03-27T09:50:25Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:50:20Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-10/1/javadoc-warnings",
        "name": "JavaDoc",
        "startedAt": "2025-03-27T09:50:26Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:50:16Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-10/1/maven-warnings",
        "name": "Maven",
        "startedAt": "2025-03-27T09:50:22Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:50:28Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-10/1/open-tasks",
        "name": "Open Tasks Scanner",
        "startedAt": "2025-03-27T09:50:34Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:50:25Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-10/1/pmd",
        "name": "PMD",
        "startedAt": "2025-03-27T09:50:31Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:50:23Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-10/1/spotbugs",
        "name": "SpotBugs",
        "startedAt": "2025-03-27T09:50:29Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:50:11Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-10/1/display/redirect?page=tests",
        "name": "Tests / linux-11 / Build (linux-11)",
        "startedAt": "2025-03-27T09:50:18Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 11,
    "title": "chore(dependencies): Automate dependency updates with Dependabot",
    "state": "OPEN",
    "createdAt": "2025-03-27T09:47:41Z",
    "updatedAt": "2025-03-27T09:47:41Z",
    "user": "gounthar",
    "repository": "jenkinsci/visualworks-store-plugin",
    "pluginName": "visualworks-store",
    "labels": null,
    "url": "https://github.com/jenkinsci/visualworks-store-plugin/pull/11",
    "description": "Hello visualworks-store developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup dependabot\n    io.jenkins.tools.pluginmodernizer.SetupDependabot\n    Setup dependabot for the Jenkins plugin if it doesn't exist.\n\nWhy Automate with Dependabot?\nManaging dependencies can be a time-consuming and challenging task, especially when maintaining a Jenkins plugin.\nBy automating this process with Dependabot, you gain numerous advantages:\n\n\nKeep Pace with Innovation: Dependabot ensures\nyour plugin remains cutting-edge by promptly incorporating the latest features and enhancements from upstream libraries.\n\n\nStrengthen Security: Staying up-to-date with dependency updates is crucial for security.\nDependabot automatically flags and updates any vulnerable dependencies,\nhelping to protect your plugin from potential exploits.\n\n\nSave Time and Effort: Spend less time managing dependencies and more time innovating.\nDependabot automatically submits pull requests for new releases,\nallowing you to effortlessly review and integrate updates.\n\n\nEnhance Compatibility and Stability: Regular updates improve both performance and compatibility with other plugins and the Jenkins core,\nensuring a seamless experience for your users.\n\n\nImprove GitHub Integration: Dependabot streamlines and enhances the integration process with GitHub,\nmaking it easier to manage updates.\n\n\nEnhance the plugin health score: Regular updates contribute to a better health score by ensuring your plugin is reliable and up-to-date.\n\n\nFocus on What Matters: With Dependabot, you can concentrate on developing new features and fixing bugs, knowing that it handles dependency updates efficiently.\n\n\nSetting up Dependabot exemplifies a proactive approach to modern software maintenance, aligning your plugin with best practices in the industry. We invite you to test these updates and adopt a maintenance workflow that is both efficient and secure.\nYour insights and feedback are invaluable to us, and we are here to support you through this transition as needed.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T09:54:27Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-11/1/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:54:27Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-11/1/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T09:48:06Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:54:24Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-11/1/display/redirect?page=tests",
        "name": "Tests / windows-8 / Build (windows-8)",
        "startedAt": "2025-03-27T09:54:31Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:53:12Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-11/1/cpd",
        "name": "CPD",
        "startedAt": "2025-03-27T09:53:19Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:53:10Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-11/1/checkstyle",
        "name": "CheckStyle",
        "startedAt": "2025-03-27T09:53:16Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:53:00Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-11/1//coverage",
        "name": "Code Coverage",
        "startedAt": "2025-03-27T09:53:06Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:53:03Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-11/1/eslint",
        "name": "ESLint",
        "startedAt": "2025-03-27T09:53:09Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:53:05Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-11/1/java",
        "name": "Java Compiler",
        "startedAt": "2025-03-27T09:53:11Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:53:06Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-11/1/javadoc-warnings",
        "name": "JavaDoc",
        "startedAt": "2025-03-27T09:53:12Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:53:02Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-11/1/maven-warnings",
        "name": "Maven",
        "startedAt": "2025-03-27T09:53:08Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:53:14Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-11/1/open-tasks",
        "name": "Open Tasks Scanner",
        "startedAt": "2025-03-27T09:53:20Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:53:11Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-11/1/pmd",
        "name": "PMD",
        "startedAt": "2025-03-27T09:53:17Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:53:09Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-11/1/spotbugs",
        "name": "SpotBugs",
        "startedAt": "2025-03-27T09:53:15Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:52:58Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-11/1/display/redirect?page=tests",
        "name": "Tests / linux-11 / Build (linux-11)",
        "startedAt": "2025-03-27T09:53:04Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 7,
    "title": "chore(pom): Require 2.462.3",
    "state": "OPEN",
    "createdAt": "2025-01-25T17:57:05Z",
    "updatedAt": "2025-01-27T10:10:43Z",
    "user": "gounthar",
    "repository": "jenkinsci/visualworks-store-plugin",
    "pluginName": "visualworks-store",
    "labels": null,
    "url": "https://github.com/jenkinsci/visualworks-store-plugin/pull/7",
    "description": "Hello visualworks-store developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nThe checks are failing\nYour current Jenkinsfile is targeting JDK8 and JDK11. This PR will only work with JDK11+.\nWe supplied a modified Jenkinsfile with the other changes, but it won't be used until you replay the checks with it.\nThanks for taking the time to review this PR. üôè",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T21:06:25Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-7/6/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T21:06:24Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-7/6/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T21:01:51Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T21:05:51Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-7/6/cpd",
        "name": "CPD",
        "startedAt": "2025-03-27T21:05:51Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T21:05:49Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-7/6/checkstyle",
        "name": "CheckStyle",
        "startedAt": "2025-03-27T21:05:49Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T21:05:39Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-7/6//coverage",
        "name": "Code Coverage",
        "startedAt": "2025-03-27T21:05:39Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T21:05:42Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-7/6/eslint",
        "name": "ESLint",
        "startedAt": "2025-03-27T21:05:42Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T21:05:43Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-7/6/java",
        "name": "Java Compiler",
        "startedAt": "2025-03-27T21:05:43Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T21:05:44Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-7/6/javadoc-warnings",
        "name": "JavaDoc",
        "startedAt": "2025-03-27T21:05:44Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T21:05:41Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-7/6/maven-warnings",
        "name": "Maven",
        "startedAt": "2025-03-27T21:05:41Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T21:05:52Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-7/6/open-tasks",
        "name": "Open Tasks Scanner",
        "startedAt": "2025-03-27T21:05:53Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T21:05:50Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-7/6/pmd",
        "name": "PMD",
        "startedAt": "2025-03-27T21:05:50Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T21:05:48Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-7/6/spotbugs",
        "name": "SpotBugs",
        "startedAt": "2025-03-27T21:05:48Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T21:05:37Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-7/6/display/redirect?page=tests",
        "name": "Tests / linux-11 / Build (linux-11)",
        "startedAt": "2025-03-27T21:05:38Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 8,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-03-26T14:36:35Z",
    "updatedAt": "2025-03-26T14:46:10Z",
    "user": "gounthar",
    "repository": "jenkinsci/visualworks-store-plugin",
    "pluginName": "visualworks-store",
    "labels": null,
    "url": "https://github.com/jenkinsci/visualworks-store-plugin/pull/8",
    "description": "Hello visualworks-store developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T13:32:36Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-8/3/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T13:32:35Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-8/3/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T13:26:19Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T13:32:32Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-8/3/display/redirect?page=tests",
        "name": "Tests / windows-17 / Build (windows-17)",
        "startedAt": "2025-03-27T13:32:32Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T13:31:23Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-8/3/cpd",
        "name": "CPD",
        "startedAt": "2025-03-27T13:31:23Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T13:31:20Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-8/3/checkstyle",
        "name": "CheckStyle",
        "startedAt": "2025-03-27T13:31:20Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T13:31:09Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-8/3//coverage",
        "name": "Code Coverage",
        "startedAt": "2025-03-27T13:31:09Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T13:31:13Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-8/3/eslint",
        "name": "ESLint",
        "startedAt": "2025-03-27T13:31:13Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T13:31:14Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-8/3/java",
        "name": "Java Compiler",
        "startedAt": "2025-03-27T13:31:14Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T13:31:15Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-8/3/javadoc-warnings",
        "name": "JavaDoc",
        "startedAt": "2025-03-27T13:31:15Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T13:31:12Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-8/3/maven-warnings",
        "name": "Maven",
        "startedAt": "2025-03-27T13:31:12Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T13:31:24Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-8/3/open-tasks",
        "name": "Open Tasks Scanner",
        "startedAt": "2025-03-27T13:31:24Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T13:31:21Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-8/3/pmd",
        "name": "PMD",
        "startedAt": "2025-03-27T13:31:21Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T13:31:19Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-8/3/spotbugs",
        "name": "SpotBugs",
        "startedAt": "2025-03-27T13:31:19Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T13:31:07Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-8/3/display/redirect?page=tests",
        "name": "Tests / linux-21 / Build (linux-21)",
        "startedAt": "2025-03-27T13:31:07Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 9,
    "title": "Applied recipe MigrateToJUnit5",
    "state": "OPEN",
    "createdAt": "2025-03-26T16:14:56Z",
    "updatedAt": "2025-03-27T09:37:09Z",
    "user": "gounthar",
    "repository": "jenkinsci/visualworks-store-plugin",
    "pluginName": "visualworks-store",
    "labels": null,
    "url": "https://github.com/jenkinsci/visualworks-store-plugin/pull/9",
    "description": "Hello visualworks-store developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Migrate to JUnit 5\n    io.jenkins.tools.pluginmodernizer.MigrateToJUnit5\n    Migrate tests from JUnit 4 to JUnit 5.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-03-27T09:43:53Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-9/4/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:43:53Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-9/4/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-03-27T09:37:35Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:43:50Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-9/4/display/redirect?page=tests",
        "name": "Tests / windows-8 / Build (windows-8)",
        "startedAt": "2025-03-27T09:43:57Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:39:43Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-9/4/cpd",
        "name": "CPD",
        "startedAt": "2025-03-27T09:39:49Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:39:41Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-9/4/checkstyle",
        "name": "CheckStyle",
        "startedAt": "2025-03-27T09:39:47Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:39:30Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-9/4//coverage",
        "name": "Code Coverage",
        "startedAt": "2025-03-27T09:39:36Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:39:33Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-9/4/eslint",
        "name": "ESLint",
        "startedAt": "2025-03-27T09:39:39Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:39:35Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-9/4/java",
        "name": "Java Compiler",
        "startedAt": "2025-03-27T09:39:41Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:39:36Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-9/4/javadoc-warnings",
        "name": "JavaDoc",
        "startedAt": "2025-03-27T09:39:42Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:39:32Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-9/4/maven-warnings",
        "name": "Maven",
        "startedAt": "2025-03-27T09:39:38Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:39:44Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-9/4/open-tasks",
        "name": "Open Tasks Scanner",
        "startedAt": "2025-03-27T09:39:51Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:39:42Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-9/4/pmd",
        "name": "PMD",
        "startedAt": "2025-03-27T09:39:48Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:39:40Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-9/4/spotbugs",
        "name": "SpotBugs",
        "startedAt": "2025-03-27T09:39:46Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-03-27T09:39:27Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/visualworks-store-plugin/job/PR-9/4/display/redirect?page=tests",
        "name": "Tests / linux-11 / Build (linux-11)",
        "startedAt": "2025-03-27T09:39:33Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 83,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T11:00:37Z",
    "updatedAt": "2025-02-14T11:02:35Z",
    "user": "gounthar",
    "repository": "jenkinsci/vstestrunner-plugin",
    "pluginName": "vstestrunner",
    "labels": null,
    "url": "https://github.com/jenkinsci/vstestrunner-plugin/pull/83",
    "description": "Hello vstestrunner developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-02-14T11:07:39Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/vstestrunner-plugin/job/PR-83/3/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T11:07:38Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/vstestrunner-plugin/job/PR-83/3/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-02-14T11:02:51Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T11:07:09Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/vstestrunner-plugin/job/PR-83/3/display/redirect?page=tests",
        "name": "Tests / linux-8 / Build (linux-8)",
        "startedAt": "2025-02-14T11:07:09Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T11:07:11Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/vstestrunner-plugin/job/PR-83/3//coverage",
        "name": "Code Coverage",
        "startedAt": "2025-02-14T11:07:11Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 161,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T10:27:48Z",
    "updatedAt": "2025-02-14T10:31:04Z",
    "user": "gounthar",
    "repository": "jenkinsci/xcode-plugin",
    "pluginName": "xcode-plugin",
    "labels": null,
    "url": "https://github.com/jenkinsci/xcode-plugin/pull/161",
    "description": "Hello xcode-plugin developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-02-14T10:34:09Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/xcode-plugin/job/PR-161/3/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T10:34:09Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/xcode-plugin/job/PR-161/3/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-02-14T10:31:19Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T10:34:03Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/xcode-plugin/job/PR-161/3/spotbugs",
        "name": "SpotBugs",
        "startedAt": "2025-02-14T10:34:03Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T10:34:06Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/xcode-plugin/job/PR-161/3/cpd",
        "name": "CPD",
        "startedAt": "2025-02-14T10:34:06Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T10:34:04Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/xcode-plugin/job/PR-161/3/checkstyle",
        "name": "CheckStyle",
        "startedAt": "2025-02-14T10:34:04Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T10:33:51Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/xcode-plugin/job/PR-161/3//coverage",
        "name": "Code Coverage",
        "startedAt": "2025-02-14T10:33:51Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T10:33:54Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/xcode-plugin/job/PR-161/3/eslint",
        "name": "ESLint",
        "startedAt": "2025-02-14T10:33:55Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T10:33:56Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/xcode-plugin/job/PR-161/3/java",
        "name": "Java Compiler",
        "startedAt": "2025-02-14T10:33:56Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T10:33:57Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/xcode-plugin/job/PR-161/3/javadoc-warnings",
        "name": "JavaDoc",
        "startedAt": "2025-02-14T10:33:57Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T10:33:53Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/xcode-plugin/job/PR-161/3/maven-warnings",
        "name": "Maven",
        "startedAt": "2025-02-14T10:33:53Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T10:34:07Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/xcode-plugin/job/PR-161/3/open-tasks",
        "name": "Open Tasks Scanner",
        "startedAt": "2025-02-14T10:34:07Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T10:34:05Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/xcode-plugin/job/PR-161/3/pmd",
        "name": "PMD",
        "startedAt": "2025-02-14T10:34:05Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T10:33:49Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/xcode-plugin/job/PR-161/3/display/redirect?page=tests",
        "name": "Tests / linux-8 / Build (linux-8)",
        "startedAt": "2025-02-14T10:33:49Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 49,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T10:12:23Z",
    "updatedAt": "2025-02-14T10:09:05Z",
    "user": "gounthar",
    "repository": "jenkinsci/zap-pipeline-plugin",
    "pluginName": "zap-pipeline",
    "labels": null,
    "url": "https://github.com/jenkinsci/zap-pipeline-plugin/pull/49",
    "description": "Hello zap-pipeline developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-02-14T15:15:34Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/zap-pipeline-plugin/job/PR-49/3/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T15:15:33Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/zap-pipeline-plugin/job/PR-49/3/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-02-14T15:10:25Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T15:15:13Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/zap-pipeline-plugin/job/PR-49/3/display/redirect?page=tests",
        "name": "Tests / linux-8 / Build (linux-8)",
        "startedAt": "2025-02-14T15:15:13Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T15:15:28Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/zap-pipeline-plugin/job/PR-49/3/display/redirect?page=tests",
        "name": "Tests / windows-8 / Build (windows-8)",
        "startedAt": "2025-02-14T15:15:28Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T15:15:15Z",
        "conclusion": "SUCCESS",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/zap-pipeline-plugin/job/PR-49/3//coverage",
        "name": "Code Coverage",
        "startedAt": "2025-02-14T15:15:15Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  },
  {
    "number": 61,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-01-29T09:56:09Z",
    "updatedAt": "2025-02-14T09:42:57Z",
    "user": "gounthar",
    "repository": "jenkinsci/zscaler-iac-scan-plugin",
    "pluginName": "zscaler-iac-scan",
    "labels": null,
    "url": "https://github.com/jenkinsci/zscaler-iac-scan-plugin/pull/61",
    "description": "Hello zscaler-iac-scan developers! üëã\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8.",
    "checkStatus": "ERROR",
    "statusCheckRollup": [
      {
        "__typename": "StatusContext",
        "context": "continuous-integration/jenkins/pr-head",
        "startedAt": "2025-02-14T18:48:57Z",
        "state": "ERROR",
        "targetUrl": "https://ci.jenkins.io/job/Plugins/job/zscaler-iac-scan-plugin/job/PR-61/3/display/redirect"
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T18:48:56Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/zscaler-iac-scan-plugin/job/PR-61/3/display/redirect",
        "name": "Jenkins",
        "startedAt": "2025-02-14T18:45:20Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T18:48:55Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/zscaler-iac-scan-plugin/job/PR-61/3/display/redirect?page=tests",
        "name": "Tests / linux-8 / Build (linux-8)",
        "startedAt": "2025-02-14T18:48:55Z",
        "status": "COMPLETED",
        "workflowName": ""
      },
      {
        "__typename": "CheckRun",
        "completedAt": "2025-02-14T18:48:51Z",
        "conclusion": "FAILURE",
        "detailsUrl": "https://ci.jenkins.io/job/Plugins/job/zscaler-iac-scan-plugin/job/PR-61/3/display/redirect?page=tests",
        "name": "Tests / windows-8 / Build (windows-8)",
        "startedAt": "2025-02-14T18:48:51Z",
        "status": "COMPLETED",
        "workflowName": ""
      }
    ]
  }
]
