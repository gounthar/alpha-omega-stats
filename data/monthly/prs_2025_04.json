[
  {
    "number": 104,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-04-15T15:19:49Z",
    "updatedAt": "2025-04-15T15:20:22Z",
    "user": "gounthar",
    "repository": "jenkinsci/git-push-plugin",
    "pluginName": "git-push",
    "labels": null,
    "url": "https://github.com/jenkinsci/git-push-plugin/pull/104",
    "description": "Hello git-push developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  },
  {
    "number": 8,
    "title": "chore(dependencies): Automate dependency updates with Dependabot",
    "state": "OPEN",
    "createdAt": "2025-04-15T10:04:50Z",
    "updatedAt": "2025-04-15T10:04:50Z",
    "user": "gounthar",
    "repository": "jenkinsci/cortex-metrics-plugin",
    "pluginName": "cortex-metrics",
    "labels": null,
    "url": "https://github.com/jenkinsci/cortex-metrics-plugin/pull/8",
    "description": "Hello cortex-metrics developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup dependabot\n    io.jenkins.tools.pluginmodernizer.SetupDependabot\n    Setup dependabot for the Jenkins plugin if it doesn't exist.\n\nWhy Automate with Dependabot?\nManaging dependencies can be a time-consuming and challenging task, especially when maintaining a Jenkins plugin.\nBy automating this process with Dependabot, you gain numerous advantages:\n\n\nKeep Pace with Innovation: Dependabot ensures\nyour plugin remains cutting-edge by promptly incorporating the latest features and enhancements from upstream libraries.\n\n\nStrengthen Security: Staying up-to-date with dependency updates is crucial for security.\nDependabot automatically flags and updates any vulnerable dependencies,\nhelping to protect your plugin from potential exploits.\n\n\nSave Time and Effort: Spend less time managing dependencies and more time innovating.\nDependabot automatically submits pull requests for new releases,\nallowing you to effortlessly review and integrate updates.\n\n\nEnhance Compatibility and Stability: Regular updates improve both performance and compatibility with other plugins and the Jenkins core,\nensuring a seamless experience for your users.\n\n\nImprove GitHub Integration: Dependabot streamlines and enhances the integration process with GitHub,\nmaking it easier to manage updates.\n\n\nEnhance the plugin health score: Regular updates contribute to a better health score by ensuring your plugin is reliable and up-to-date.\n\n\nFocus on What Matters: With Dependabot, you can concentrate on developing new features and fixing bugs, knowing that it handles dependency updates efficiently.\n\n\nSetting up Dependabot exemplifies a proactive approach to modern software maintenance, aligning your plugin with best practices in the industry. We invite you to test these updates and adopt a maintenance workflow that is both efficient and secure.\nYour insights and feedback are invaluable to us, and we are here to support you through this transition as needed.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 11,
    "title": "chore(dependencies): Automate dependency updates with Dependabot",
    "state": "MERGED",
    "createdAt": "2025-04-15T08:46:10Z",
    "updatedAt": "2025-04-15T09:38:24Z",
    "user": "gounthar",
    "repository": "jenkinsci/ant-in-workspace-plugin",
    "pluginName": "ant-in-workspace",
    "labels": null,
    "url": "https://github.com/jenkinsci/ant-in-workspace-plugin/pull/11",
    "description": "Hello ant-in-workspace developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup dependabot\n    io.jenkins.tools.pluginmodernizer.SetupDependabot\n    Setup dependabot for the Jenkins plugin if it doesn't exist.\n\nWhy Automate with Dependabot?\nManaging dependencies can be a time-consuming and challenging task, especially when maintaining a Jenkins plugin.\nBy automating this process with Dependabot, you gain numerous advantages:\n\n\nKeep Pace with Innovation: Dependabot ensures\nyour plugin remains cutting-edge by promptly incorporating the latest features and enhancements from upstream libraries.\n\n\nStrengthen Security: Staying up-to-date with dependency updates is crucial for security.\nDependabot automatically flags and updates any vulnerable dependencies,\nhelping to protect your plugin from potential exploits.\n\n\nSave Time and Effort: Spend less time managing dependencies and more time innovating.\nDependabot automatically submits pull requests for new releases,\nallowing you to effortlessly review and integrate updates.\n\n\nEnhance Compatibility and Stability: Regular updates improve both performance and compatibility with other plugins and the Jenkins core,\nensuring a seamless experience for your users.\n\n\nImprove GitHub Integration: Dependabot streamlines and enhances the integration process with GitHub,\nmaking it easier to manage updates.\n\n\nEnhance the plugin health score: Regular updates contribute to a better health score by ensuring your plugin is reliable and up-to-date.\n\n\nFocus on What Matters: With Dependabot, you can concentrate on developing new features and fixing bugs, knowing that it handles dependency updates efficiently.\n\n\nSetting up Dependabot exemplifies a proactive approach to modern software maintenance, aligning your plugin with best practices in the industry. We invite you to test these updates and adopt a maintenance workflow that is both efficient and secure.\nYour insights and feedback are invaluable to us, and we are here to support you through this transition as needed.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 10,
    "title": "chore(github): Add CODEOWNERS",
    "state": "MERGED",
    "createdAt": "2025-04-15T08:43:45Z",
    "updatedAt": "2025-04-15T09:38:27Z",
    "user": "gounthar",
    "repository": "jenkinsci/ant-in-workspace-plugin",
    "pluginName": "ant-in-workspace",
    "labels": null,
    "url": "https://github.com/jenkinsci/ant-in-workspace-plugin/pull/10",
    "description": "Hello ant-in-workspace developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 66,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-04-14T14:14:25Z",
    "updatedAt": "2025-04-14T15:33:16Z",
    "user": "gounthar",
    "repository": "jenkinsci/compuware-topaz-for-total-test-plugin",
    "pluginName": "compuware-topaz-for-total-test",
    "labels": null,
    "url": "https://github.com/jenkinsci/compuware-topaz-for-total-test-plugin/pull/66",
    "description": "Hello compuware-topaz-for-total-test developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  }
]
