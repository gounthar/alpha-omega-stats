[
  {
    "number": 174,
    "title": "Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text",
    "state": "OPEN",
    "createdAt": "2025-09-09T18:06:03Z",
    "updatedAt": "2025-09-09T18:06:04Z",
    "user": "gounthar",
    "repository": "jenkinsci/docker-commons-plugin",
    "pluginName": "docker-commons",
    "labels": null,
    "url": "https://github.com/jenkinsci/docker-commons-plugin/pull/174",
    "description": "Hello docker-commons developers! ðŸ‘‹\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text\n    io.jenkins.tools.pluginmodernizer.MigrateCommonsLang2ToLang3AndCommonText\n    Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text.\n\nThis pull request upgrades Apache Commons Lang 2 to Apache Commons Lang 3 and migrates HTML escaping functionality from Apache Commons Lang to Apache Commons Text.\nThe Apache Commons community recommends using Apache Commons Text for string escaping operations, as it offers a more focused and feature-rich API for text processing.\nWhat's Changed?\n\nMigrated from deprecated/EOL Apache Commons Lang 2 to Commons Lang 3.\nTransitioned from deprecated/EOL StringEscapeUtils in Apache Commons Lang to Commons Text.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 401,
    "title": "Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text",
    "state": "OPEN",
    "createdAt": "2025-09-09T17:52:18Z",
    "updatedAt": "2025-09-09T17:52:19Z",
    "user": "gounthar",
    "repository": "jenkinsci/pipeline-stage-view-plugin",
    "pluginName": "pipeline-rest-api",
    "labels": null,
    "url": "https://github.com/jenkinsci/pipeline-stage-view-plugin/pull/401",
    "description": "Hello pipeline-stage-view developers! ðŸ‘‹\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text\n    io.jenkins.tools.pluginmodernizer.MigrateCommonsLang2ToLang3AndCommonText\n    Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text.\n\nThis pull request upgrades Apache Commons Lang 2 to Apache Commons Lang 3 and migrates HTML escaping functionality from Apache Commons Lang to Apache Commons Text.\nThe Apache Commons community recommends using Apache Commons Text for string escaping operations, as it offers a more focused and feature-rich API for text processing.\nWhat's Changed?\n\nMigrated from deprecated/EOL Apache Commons Lang 2 to Commons Lang 3.\nTransitioned from deprecated/EOL StringEscapeUtils in Apache Commons Lang to Commons Text.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 118,
    "title": "Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text",
    "state": "OPEN",
    "createdAt": "2025-09-09T17:38:27Z",
    "updatedAt": "2025-09-09T17:48:07Z",
    "user": "gounthar",
    "repository": "jenkinsci/command-launcher-plugin",
    "pluginName": "command-launcher",
    "labels": null,
    "url": "https://github.com/jenkinsci/command-launcher-plugin/pull/118",
    "description": "Hello command-launcher developers! ðŸ‘‹\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text\n    io.jenkins.tools.pluginmodernizer.MigrateCommonsLang2ToLang3AndCommonText\n    Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text.\n\nThis pull request upgrades Apache Commons Lang 2 to Apache Commons Lang 3 and migrates HTML escaping functionality from Apache Commons Lang to Apache Commons Text.\nThe Apache Commons community recommends using Apache Commons Text for string escaping operations, as it offers a more focused and feature-rich API for text processing.\nWhat's Changed?\n\nMigrated from deprecated/EOL Apache Commons Lang 2 to Commons Lang 3.\nTransitioned from deprecated/EOL StringEscapeUtils in Apache Commons Lang to Commons Text.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 195,
    "title": "Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text",
    "state": "OPEN",
    "createdAt": "2025-09-09T17:26:07Z",
    "updatedAt": "2025-09-09T17:46:31Z",
    "user": "gounthar",
    "repository": "jenkinsci/pipeline-groovy-lib-plugin",
    "pluginName": "pipeline-groovy-lib",
    "labels": null,
    "url": "https://github.com/jenkinsci/pipeline-groovy-lib-plugin/pull/195",
    "description": "Hello pipeline-groovy-lib developers! ðŸ‘‹\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text\n    io.jenkins.tools.pluginmodernizer.MigrateCommonsLang2ToLang3AndCommonText\n    Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text.\n\nThis pull request upgrades Apache Commons Lang 2 to Apache Commons Lang 3 and migrates HTML escaping functionality from Apache Commons Lang to Apache Commons Text.\nThe Apache Commons community recommends using Apache Commons Text for string escaping operations, as it offers a more focused and feature-rich API for text processing.\nWhat's Changed?\n\nMigrated from deprecated/EOL Apache Commons Lang 2 to Commons Lang 3.\nTransitioned from deprecated/EOL StringEscapeUtils in Apache Commons Lang to Commons Text.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 372,
    "title": "Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text",
    "state": "OPEN",
    "createdAt": "2025-09-09T17:10:42Z",
    "updatedAt": "2025-09-09T17:10:43Z",
    "user": "gounthar",
    "repository": "jenkinsci/ldap-plugin",
    "pluginName": "ldap",
    "labels": null,
    "url": "https://github.com/jenkinsci/ldap-plugin/pull/372",
    "description": "Hello ldap developers! ðŸ‘‹\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text\n    io.jenkins.tools.pluginmodernizer.MigrateCommonsLang2ToLang3AndCommonText\n    Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text.\n\nThis pull request upgrades Apache Commons Lang 2 to Apache Commons Lang 3 and migrates HTML escaping functionality from Apache Commons Lang to Apache Commons Text.\nThe Apache Commons community recommends using Apache Commons Text for string escaping operations, as it offers a more focused and feature-rich API for text processing.\nWhat's Changed?\n\nMigrated from deprecated/EOL Apache Commons Lang 2 to Commons Lang 3.\nTransitioned from deprecated/EOL StringEscapeUtils in Apache Commons Lang to Commons Text.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 184,
    "title": "Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text",
    "state": "MERGED",
    "createdAt": "2025-09-09T16:42:02Z",
    "updatedAt": "2025-09-09T21:09:49Z",
    "user": "gounthar",
    "repository": "jenkinsci/pipeline-graph-analysis-plugin",
    "pluginName": "pipeline-graph-analysis",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/pipeline-graph-analysis-plugin/pull/184",
    "description": "Hello pipeline-graph-analysis developers! ðŸ‘‹\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text\n    io.jenkins.tools.pluginmodernizer.MigrateCommonsLang2ToLang3AndCommonText\n    Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text.\n\nThis pull request upgrades Apache Commons Lang 2 to Apache Commons Lang 3 and migrates HTML escaping functionality from Apache Commons Lang to Apache Commons Text.\nThe Apache Commons community recommends using Apache Commons Text for string escaping operations, as it offers a more focused and feature-rich API for text processing.\nWhat's Changed?\n\nMigrated from deprecated/EOL Apache Commons Lang 2 to Commons Lang 3.\nTransitioned from deprecated/EOL StringEscapeUtils in Apache Commons Lang to Commons Text.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 361,
    "title": "Migrate Commons Lang from 2 to 3",
    "state": "MERGED",
    "createdAt": "2025-09-09T16:31:38Z",
    "updatedAt": "2025-09-09T17:12:15Z",
    "user": "gounthar",
    "repository": "jenkinsci/workflow-basic-steps-plugin",
    "pluginName": "workflow-basic-steps",
    "labels": null,
    "url": "https://github.com/jenkinsci/workflow-basic-steps-plugin/pull/361",
    "description": "Hello workflow-basic-steps developers! ðŸ‘‹\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Migrate Commons Lang from 2 to 3\n    io.jenkins.tools.pluginmodernizer.MigrateCommonsLang2ToLang3AndCommonText\n    Migrate Commons Lang from 2 to 3.\n\nThis pull request upgrades Apache Commons Lang 2 to Apache Commons Lang 3.\nWhat's Changed?\n\nMigrated from deprecated/EOL Apache Commons Lang 2 to Commons Lang 3.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 474,
    "title": "Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text",
    "state": "CLOSED",
    "createdAt": "2025-09-09T16:07:40Z",
    "updatedAt": "2025-09-09T22:50:35Z",
    "user": "gounthar",
    "repository": "jenkinsci/workflow-durable-task-step-plugin",
    "pluginName": "workflow-durable-task-step",
    "labels": null,
    "url": "https://github.com/jenkinsci/workflow-durable-task-step-plugin/pull/474",
    "description": "Hello workflow-durable-task-step developers! ðŸ‘‹\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text\n    io.jenkins.tools.pluginmodernizer.MigrateCommonsLang2ToLang3AndCommonText\n    Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text.\n\nThis pull request upgrades Apache Commons Lang 2 to Apache Commons Lang 3 and migrates HTML escaping functionality from Apache Commons Lang to Apache Commons Text.\nThe Apache Commons community recommends using Apache Commons Text for string escaping operations, as it offers a more focused and feature-rich API for text processing.\nWhat's Changed?\n\nMigrated from deprecated/EOL Apache Commons Lang 2 to Commons Lang 3.\nTransitioned from deprecated/EOL StringEscapeUtils in Apache Commons Lang to Commons Text.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 557,
    "title": "Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text",
    "state": "MERGED",
    "createdAt": "2025-09-09T15:31:15Z",
    "updatedAt": "2025-09-09T15:55:26Z",
    "user": "gounthar",
    "repository": "jenkinsci/workflow-job-plugin",
    "pluginName": "workflow-job",
    "labels": [
      "developer"
    ],
    "url": "https://github.com/jenkinsci/workflow-job-plugin/pull/557",
    "description": "Hello workflow-job developers! ðŸ‘‹\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text\n    io.jenkins.tools.pluginmodernizer.MigrateCommonsLang2ToLang3AndCommonText\n    Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text.\n\nThis pull request upgrades Apache Commons Lang 2 to Apache Commons Lang 3 and migrates HTML escaping functionality from Apache Commons Lang to Apache Commons Text.\nThe Apache Commons community recommends using Apache Commons Text for string escaping operations, as it offers a more focused and feature-rich API for text processing.\nWhat's Changed?\n\nMigrated from deprecated/EOL Apache Commons Lang 2 to Commons Lang 3.\nTransitioned from deprecated/EOL StringEscapeUtils in Apache Commons Lang to Commons Text.",
    "checkStatus": "SUCCESS"
  },
  {
    "number": 1806,
    "title": "Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text",
    "state": "OPEN",
    "createdAt": "2025-09-09T15:15:42Z",
    "updatedAt": "2025-09-09T15:15:43Z",
    "user": "gounthar",
    "repository": "jenkinsci/git-plugin",
    "pluginName": "git",
    "labels": null,
    "url": "https://github.com/jenkinsci/git-plugin/pull/1806",
    "description": "Hello git developers! ðŸ‘‹\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text\n    io.jenkins.tools.pluginmodernizer.MigrateCommonsLang2ToLang3AndCommonText\n    Migrate Commons Lang from 2 to 3 and StringEscapeUtils to Commons Text.\n\nThis pull request upgrades Apache Commons Lang 2 to Apache Commons Lang 3 and migrates HTML escaping functionality from Apache Commons Lang to Apache Commons Text.\nThe Apache Commons community recommends using Apache Commons Text for string escaping operations, as it offers a more focused and feature-rich API for text processing.\nWhat's Changed?\n\nMigrated from deprecated/EOL Apache Commons Lang 2 to Commons Lang 3.\nTransitioned from deprecated/EOL StringEscapeUtils in Apache Commons Lang to Commons Text.",
    "checkStatus": "PENDING"
  },
  {
    "number": 123,
    "title": "Add Jenkinsfile to build plugin on the Jenkins Infrastructure",
    "state": "CLOSED",
    "createdAt": "2025-09-04T11:21:16Z",
    "updatedAt": "2025-09-08T14:01:42Z",
    "user": "gounthar",
    "repository": "jenkinsci/vectorcast-execution-plugin",
    "pluginName": "vectorcast-execution",
    "labels": null,
    "url": "https://github.com/jenkinsci/vectorcast-execution-plugin/pull/123",
    "description": "Hello vectorcast-execution developers! ðŸ‘‹\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup the Jenkinsfile\n    io.jenkins.tools.pluginmodernizer.SetupJenkinsfile\n    Add a missing Jenkinsfile to the Jenkins plugin.\n\nWhy is this important?\nThis pull request ensure your plugin is build on the Jenkins infrastructure.\nBased on your plugin requirements, the Jenkins infrastructure will build your plugin using Java 17 and 21.\nYour plugin is already building with Java 17 and 21. We will continue to support these versions.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 12,
    "title": "chore(dependencies): Automate dependency updates with Dependabot",
    "state": "OPEN",
    "createdAt": "2025-09-02T14:22:06Z",
    "updatedAt": "2025-09-02T14:22:06Z",
    "user": "gounthar",
    "repository": "jenkinsci/absint-a3-plugin",
    "pluginName": "absint-a3",
    "labels": null,
    "url": "https://github.com/jenkinsci/absint-a3-plugin/pull/12",
    "description": "Hello absint-a3 developers! ðŸ‘‹\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup dependabot\n    io.jenkins.tools.pluginmodernizer.SetupDependabot\n    Setup dependabot for the Jenkins plugin if it doesn't exist.\n\nWhy Automate with Dependabot?\nManaging dependencies can be a time-consuming and challenging task, especially when maintaining a Jenkins plugin.\nBy automating this process with Dependabot, you gain numerous advantages:\n\n\nKeep Pace with Innovation: Dependabot ensures\nyour plugin remains cutting-edge by promptly incorporating the latest features and enhancements from upstream libraries.\n\n\nStrengthen Security: Staying up-to-date with dependency updates is crucial for security.\nDependabot automatically flags and updates any vulnerable dependencies,\nhelping to protect your plugin from potential exploits.\n\n\nSave Time and Effort: Spend less time managing dependencies and more time innovating.\nDependabot automatically submits pull requests for new releases,\nallowing you to effortlessly review and integrate updates.\n\n\nEnhance Compatibility and Stability: Regular updates improve both performance and compatibility with other plugins and the Jenkins core,\nensuring a seamless experience for your users.\n\n\nImprove GitHub Integration: Dependabot streamlines and enhances the integration process with GitHub,\nmaking it easier to manage updates.\n\n\nEnhance the plugin health score: Regular updates contribute to a better health score by ensuring your plugin is reliable and up-to-date.\n\n\nFocus on What Matters: With Dependabot, you can concentrate on developing new features and fixing bugs, knowing that it handles dependency updates efficiently.\n\n\nSetting up Dependabot exemplifies a proactive approach to modern software maintenance, aligning your plugin with best practices in the industry. We invite you to test these updates and adopt a maintenance workflow that is both efficient and secure.\nYour insights and feedback are invaluable to us, and we are here to support you through this transition as needed.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 11,
    "title": "feat: upgrade to Jenkins LTS Core 2.462.3 for Java 11 support",
    "state": "OPEN",
    "createdAt": "2025-09-02T14:12:59Z",
    "updatedAt": "2025-09-03T07:38:29Z",
    "user": "gounthar",
    "repository": "jenkinsci/absint-a3-plugin",
    "pluginName": "absint-a3",
    "labels": null,
    "url": "https://github.com/jenkinsci/absint-a3-plugin/pull/11",
    "description": "Hello absint-a3 developers! ðŸ‘‹\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 11\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava11CoreVersion\n    Upgrade to latest LTS core version supporting Java 11.\n\nWhy is this important?\nTransitional Step to Java 17\nUpgrading to Jenkins LTS Core 2.462.3 is a critical step in our roadmap towards leveraging Java 17. This transition serves as an intermediary phase, ensuring that all systems are optimized for Java 11 before making the leap to Java 17.\nEnhancements and Security\nBy moving to this LTS version, we benefit from the latest performance and security improvements foundational to Java 11. Ensuring our dependencies are up-to-date and secure prepares the groundwork for a smoother transition to Java 17.\nLong-Term Support\nThe LTS version provides the necessary support and stability for Java 11, offering assurance during our gradual migration process. This allows us to take advantage of long-term updates and critical patches.\nEmbracing these incremental changes aligns our development environment with current standards and strategically positions us for future advancement. We appreciate your feedback and testing as we aim for a seamless adjustment period.",
    "checkStatus": "FAILURE"
  },
  {
    "number": 10,
    "title": "feat(java): Require Jenkins core 2.492.3 and Java 17",
    "state": "OPEN",
    "createdAt": "2025-09-02T14:04:12Z",
    "updatedAt": "2025-09-02T14:06:09Z",
    "user": "gounthar",
    "repository": "jenkinsci/absint-a3-plugin",
    "pluginName": "absint-a3",
    "labels": null,
    "url": "https://github.com/jenkinsci/absint-a3-plugin/pull/10",
    "description": "Hello absint-a3 developers! ðŸ‘‹\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.492 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.504.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.504.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!",
    "checkStatus": "FAILURE"
  }
]
