[
  {
    "number": 82,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "CLOSED",
    "createdAt": "2025-03-06T20:39:59Z",
    "updatedAt": "2025-03-06T21:58:06Z",
    "user": "gounthar",
    "repository": "jenkinsci/github-pr-comment-build-plugin",
    "pluginName": "github-pr-comment-build",
    "labels": null,
    "url": "https://github.com/jenkinsci/github-pr-comment-build-plugin/pull/82",
    "description": "Hello github-pr-comment-build developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!"
  },
  {
    "number": 77,
    "title": "chore(github): Add CODEOWNERS",
    "state": "MERGED",
    "createdAt": "2025-03-06T19:20:05Z",
    "updatedAt": "2025-03-06T20:34:58Z",
    "user": "gounthar",
    "repository": "jenkinsci/github-pr-comment-build-plugin",
    "pluginName": "github-pr-comment-build",
    "labels": null,
    "url": "https://github.com/jenkinsci/github-pr-comment-build-plugin/pull/77",
    "description": "Hello github-pr-comment-build developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request."
  },
  {
    "number": 76,
    "title": "chore(dependencies): Automate dependency updates with Dependabot",
    "state": "MERGED",
    "createdAt": "2025-03-06T19:17:51Z",
    "updatedAt": "2025-03-06T20:34:36Z",
    "user": "gounthar",
    "repository": "jenkinsci/github-pr-comment-build-plugin",
    "pluginName": "github-pr-comment-build",
    "labels": null,
    "url": "https://github.com/jenkinsci/github-pr-comment-build-plugin/pull/76",
    "description": "Hello github-pr-comment-build developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup dependabot\n    io.jenkins.tools.pluginmodernizer.SetupDependabot\n    Setup dependabot for the Jenkins plugin if it doesn't exist.\n\nWhy Automate with Dependabot?\nManaging dependencies can be a time-consuming and challenging task, especially when maintaining a Jenkins plugin.\nBy automating this process with Dependabot, you gain numerous advantages:\n\n\nKeep Pace with Innovation: Dependabot ensures\nyour plugin remains cutting-edge by promptly incorporating the latest features and enhancements from upstream libraries.\n\n\nStrengthen Security: Staying up-to-date with dependency updates is crucial for security.\nDependabot automatically flags and updates any vulnerable dependencies,\nhelping to protect your plugin from potential exploits.\n\n\nSave Time and Effort: Spend less time managing dependencies and more time innovating.\nDependabot automatically submits pull requests for new releases,\nallowing you to effortlessly review and integrate updates.\n\n\nEnhance Compatibility and Stability: Regular updates improve both performance and compatibility with other plugins and the Jenkins core,\nensuring a seamless experience for your users.\n\n\nImprove GitHub Integration: Dependabot streamlines and enhances the integration process with GitHub,\nmaking it easier to manage updates.\n\n\nEnhance the plugin health score: Regular updates contribute to a better health score by ensuring your plugin is reliable and up-to-date.\n\n\nFocus on What Matters: With Dependabot, you can concentrate on developing new features and fixing bugs, knowing that it handles dependency updates efficiently.\n\n\nSetting up Dependabot exemplifies a proactive approach to modern software maintenance, aligning your plugin with best practices in the industry. We invite you to test these updates and adopt a maintenance workflow that is both efficient and secure.\nYour insights and feedback are invaluable to us, and we are here to support you through this transition as needed."
  },
  {
    "number": 19,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-03-05T21:13:29Z",
    "updatedAt": "2025-03-05T21:13:29Z",
    "user": "gounthar",
    "repository": "jenkinsci/xvnc-plugin",
    "pluginName": "xvnc",
    "labels": null,
    "url": "https://github.com/jenkinsci/xvnc-plugin/pull/19",
    "description": "Hello xvnc developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!"
  },
  {
    "number": 271,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-03-05T21:03:45Z",
    "updatedAt": "2025-03-05T21:03:45Z",
    "user": "gounthar",
    "repository": "jenkinsci/jms-messaging-plugin",
    "pluginName": "jms-messaging",
    "labels": null,
    "url": "https://github.com/jenkinsci/jms-messaging-plugin/pull/271",
    "description": "Hello jms-messaging developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!"
  },
  {
    "number": 18,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-05T20:35:32Z",
    "updatedAt": "2025-03-05T20:48:06Z",
    "user": "gounthar",
    "repository": "jenkinsci/xvnc-plugin",
    "pluginName": "xvnc",
    "labels": null,
    "url": "https://github.com/jenkinsci/xvnc-plugin/pull/18",
    "description": "Hello xvnc developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏"
  },
  {
    "number": 397,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "OPEN",
    "createdAt": "2025-03-05T20:30:06Z",
    "updatedAt": "2025-03-05T21:17:24Z",
    "user": "gounthar",
    "repository": "jenkinsci/openstack-cloud-plugin",
    "pluginName": "openstack-cloud",
    "labels": null,
    "url": "https://github.com/jenkinsci/openstack-cloud-plugin/pull/397",
    "description": "Hello openstack-cloud developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏"
  },
  {
    "number": 17,
    "title": "feat: upgrade to Jenkins LTS Core 2.462.3 for Java 11 support",
    "state": "OPEN",
    "createdAt": "2025-03-05T20:00:06Z",
    "updatedAt": "2025-03-05T20:54:35Z",
    "user": "gounthar",
    "repository": "jenkinsci/xvnc-plugin",
    "pluginName": "xvnc",
    "labels": null,
    "url": "https://github.com/jenkinsci/xvnc-plugin/pull/17",
    "description": "Hello xvnc developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 11\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava11CoreVersion\n    Upgrade to latest LTS core version supporting Java 11.\n\nWhy is this important?\nTransitional Step to Java 17\nUpgrading to Jenkins LTS Core 2.462.3 is a critical step in our roadmap towards leveraging Java 17. This transition serves as an intermediary phase, ensuring that all systems are optimized for Java 11 before making the leap to Java 17.\nEnhancements and Security\nBy moving to this LTS version, we benefit from the latest performance and security improvements foundational to Java 11. Ensuring our dependencies are up-to-date and secure prepares the groundwork for a smoother transition to Java 17.\nLong-Term Support\nThe LTS version provides the necessary support and stability for Java 11, offering assurance during our gradual migration process. This allows us to take advantage of long-term updates and critical patches.\nEmbracing these incremental changes aligns our development environment with current standards and strategically positions us for future advancement. We appreciate your feedback and testing as we aim for a seamless adjustment period."
  },
  {
    "number": 396,
    "title": "feat: upgrade to Jenkins LTS Core 2.462.3 for Java 11 support",
    "state": "OPEN",
    "createdAt": "2025-03-05T19:55:38Z",
    "updatedAt": "2025-03-05T21:09:32Z",
    "user": "gounthar",
    "repository": "jenkinsci/openstack-cloud-plugin",
    "pluginName": "openstack-cloud",
    "labels": null,
    "url": "https://github.com/jenkinsci/openstack-cloud-plugin/pull/396",
    "description": "Hello openstack-cloud developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 11\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava11CoreVersion\n    Upgrade to latest LTS core version supporting Java 11.\n\nWhy is this important?\nTransitional Step to Java 17\nUpgrading to Jenkins LTS Core 2.462.3 is a critical step in our roadmap towards leveraging Java 17. This transition serves as an intermediary phase, ensuring that all systems are optimized for Java 11 before making the leap to Java 17.\nEnhancements and Security\nBy moving to this LTS version, we benefit from the latest performance and security improvements foundational to Java 11. Ensuring our dependencies are up-to-date and secure prepares the groundwork for a smoother transition to Java 17.\nLong-Term Support\nThe LTS version provides the necessary support and stability for Java 11, offering assurance during our gradual migration process. This allows us to take advantage of long-term updates and critical patches.\nEmbracing these incremental changes aligns our development environment with current standards and strategically positions us for future advancement. We appreciate your feedback and testing as we aim for a seamless adjustment period."
  },
  {
    "number": 16,
    "title": "Require 2.346.3",
    "state": "OPEN",
    "createdAt": "2025-03-05T19:24:01Z",
    "updatedAt": "2025-03-05T19:24:01Z",
    "user": "gounthar",
    "repository": "jenkinsci/xvnc-plugin",
    "pluginName": "xvnc",
    "labels": null,
    "url": "https://github.com/jenkinsci/xvnc-plugin/pull/16",
    "description": "Hello xvnc developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8."
  },
  {
    "number": 16,
    "title": "chore(github): Add CODEOWNERS",
    "state": "OPEN",
    "createdAt": "2025-03-05T10:30:37Z",
    "updatedAt": "2025-03-05T10:30:37Z",
    "user": "gounthar",
    "repository": "jenkinsci/permissive-script-security-plugin",
    "pluginName": "permissive-script-security",
    "labels": null,
    "url": "https://github.com/jenkinsci/permissive-script-security-plugin/pull/16",
    "description": "Hello permissive-script-security developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request."
  },
  {
    "number": 15,
    "title": "chore(dependencies): Automate dependency updates with Dependabot",
    "state": "OPEN",
    "createdAt": "2025-03-05T10:26:40Z",
    "updatedAt": "2025-03-05T10:26:40Z",
    "user": "gounthar",
    "repository": "jenkinsci/permissive-script-security-plugin",
    "pluginName": "permissive-script-security",
    "labels": null,
    "url": "https://github.com/jenkinsci/permissive-script-security-plugin/pull/15",
    "description": "Hello permissive-script-security developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Setup dependabot\n    io.jenkins.tools.pluginmodernizer.SetupDependabot\n    Setup dependabot for the Jenkins plugin if it doesn't exist.\n\nWhy Automate with Dependabot?\nManaging dependencies can be a time-consuming and challenging task, especially when maintaining a Jenkins plugin.\nBy automating this process with Dependabot, you gain numerous advantages:\n\n\nKeep Pace with Innovation: Dependabot ensures\nyour plugin remains cutting-edge by promptly incorporating the latest features and enhancements from upstream libraries.\n\n\nStrengthen Security: Staying up-to-date with dependency updates is crucial for security.\nDependabot automatically flags and updates any vulnerable dependencies,\nhelping to protect your plugin from potential exploits.\n\n\nSave Time and Effort: Spend less time managing dependencies and more time innovating.\nDependabot automatically submits pull requests for new releases,\nallowing you to effortlessly review and integrate updates.\n\n\nEnhance Compatibility and Stability: Regular updates improve both performance and compatibility with other plugins and the Jenkins core,\nensuring a seamless experience for your users.\n\n\nImprove GitHub Integration: Dependabot streamlines and enhances the integration process with GitHub,\nmaking it easier to manage updates.\n\n\nEnhance the plugin health score: Regular updates contribute to a better health score by ensuring your plugin is reliable and up-to-date.\n\n\nFocus on What Matters: With Dependabot, you can concentrate on developing new features and fixing bugs, knowing that it handles dependency updates efficiently.\n\n\nSetting up Dependabot exemplifies a proactive approach to modern software maintenance, aligning your plugin with best practices in the industry. We invite you to test these updates and adopt a maintenance workflow that is both efficient and secure.\nYour insights and feedback are invaluable to us, and we are here to support you through this transition as needed."
  },
  {
    "number": 130,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-03-05T07:01:35Z",
    "updatedAt": "2025-03-05T09:13:19Z",
    "user": "gounthar",
    "repository": "jenkinsci/m2release-plugin",
    "pluginName": "m2release",
    "labels": [
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/m2release-plugin/pull/130",
    "description": "Hello m2release developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!"
  },
  {
    "number": 171,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-03-03T15:23:37Z",
    "updatedAt": "2025-03-04T12:17:24Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/oss-symbols-api-plugin",
    "pluginName": "oss-symbols-api",
    "labels": [
      "developer",
      "dependencies"
    ],
    "url": "https://github.com/jenkinsci/oss-symbols-api-plugin/pull/171",
    "description": "Hello oss-symbols-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!"
  },
  {
    "number": 128,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-03-03T15:22:08Z",
    "updatedAt": "2025-03-03T17:07:55Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/pipeline-as-yaml-plugin",
    "pluginName": "pipeline-as-yaml",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/pipeline-as-yaml-plugin/pull/128",
    "description": "Hello pipeline-as-yaml developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!"
  },
  {
    "number": 270,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "CLOSED",
    "createdAt": "2025-03-03T14:30:56Z",
    "updatedAt": "2025-03-05T19:21:14Z",
    "user": "gounthar",
    "repository": "jenkinsci/jms-messaging-plugin",
    "pluginName": "jms-messaging",
    "labels": null,
    "url": "https://github.com/jenkinsci/jms-messaging-plugin/pull/270",
    "description": "Hello jms-messaging developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!"
  },
  {
    "number": 12,
    "title": "chore(github): Add CODEOWNERS",
    "state": "CLOSED",
    "createdAt": "2025-03-03T08:00:58Z",
    "updatedAt": "2025-03-03T08:04:05Z",
    "user": "gounthar",
    "repository": "jenkinsci/favorite-view-plugin",
    "pluginName": "favorite-view",
    "labels": null,
    "url": "https://github.com/jenkinsci/favorite-view-plugin/pull/12",
    "description": "Hello favorite-view developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Add CODEOWNERS file\n    io.jenkins.tools.pluginmodernizer.AddCodeOwner\n    Adds a CODEOWNERS file to a Jenkins plugin.\n\nWhy is this important?\nTo improve GitHub integration and enhance the plugin health score.\nTesting Done\nNone. We rely on GitHub checks of the pull request."
  },
  {
    "number": 10,
    "title": "Require 2.346.3",
    "state": "CLOSED",
    "createdAt": "2025-03-02T13:41:31Z",
    "updatedAt": "2025-03-03T07:57:07Z",
    "user": "gounthar",
    "repository": "jenkinsci/favorite-view-plugin",
    "pluginName": "favorite-view",
    "labels": null,
    "url": "https://github.com/jenkinsci/favorite-view-plugin/pull/10",
    "description": "Hello favorite-view developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to latest LTS core version supporting Java 8\n    io.jenkins.tools.pluginmodernizer.UpgradeToLatestJava8CoreVersion\n    Upgrade to latest LTS core version supporting Java 8."
  },
  {
    "number": 9,
    "title": "chore(pom): Use recommended core version 2.462.3, and Java 11.",
    "state": "CLOSED",
    "createdAt": "2025-03-02T13:37:21Z",
    "updatedAt": "2025-03-03T07:57:15Z",
    "user": "gounthar",
    "repository": "jenkinsci/favorite-view-plugin",
    "pluginName": "favorite-view",
    "labels": null,
    "url": "https://github.com/jenkinsci/favorite-view-plugin/pull/9",
    "description": "Hello favorite-view developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version\n    io.jenkins.tools.pluginmodernizer.UpgradeToRecommendCoreVersion\n    Upgrade to the latest recommended core version and ensure the BOM matches the core version.\n\nWhy is this important?\nJenkins plugins declare a minimum supported Jenkins version.\nThe minimum Jenkins version is a useful way for plugin developers to indicate the range of Jenkins versions they are willing to support and test.\nSee the developer documentation to learn more about the recommended minimum Jenkins version.\nThe current minimum required Jenkins version is 2.462.3, which is why this pull request has been made.\nIf the plugin is already using the plugin bill of materials, then the bill of materials also needs to be updated with the matching artifactId for the minimum required Jenkins version.\nI can't see any change to the Jenkins version, how come?\nThis means your plugin POM was already using the 2.462.3 version but still required a few adjustments.\nThe checks fail, why?\nFor security reasons, the Jenkins infrastructure does not execute Jenkinsfiles proposed in pull requests.\nInstead, it builds the code using the Jenkinsfile from the default branch.\nIn this case, the existing Jenkinsfile specifies Java 8, not Java 11, which is causing the check to fail.\nTo resolve this,\na maintainer can replay the failed build\nby substituting the current Jenkinsfile content with our proposed changes using the \"replay the build\"\nfeature in Jenkins.\nPlease let us know if you need any assistance with this process.\nThanks for taking the time to review this PR.\n🙏"
  },
  {
    "number": 8,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-03-02T13:33:07Z",
    "updatedAt": "2025-03-03T08:05:06Z",
    "user": "gounthar",
    "repository": "jenkinsci/favorite-view-plugin",
    "pluginName": "favorite-view",
    "labels": [
      "chore"
    ],
    "url": "https://github.com/jenkinsci/favorite-view-plugin/pull/8",
    "description": "Hello favorite-view developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!"
  },
  {
    "number": 13,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-03-02T08:35:42Z",
    "updatedAt": "2025-03-02T08:35:42Z",
    "user": "gounthar",
    "repository": "jenkinsci/bitbucket-oauth-plugin",
    "pluginName": "bitbucket-oauth",
    "labels": null,
    "url": "https://github.com/jenkinsci/bitbucket-oauth-plugin/pull/13",
    "description": "Hello bitbucket-oauth developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!"
  },
  {
    "number": 1749,
    "title": "Use Java 17 language features",
    "state": "MERGED",
    "createdAt": "2025-03-01T23:56:43Z",
    "updatedAt": "2025-03-02T07:39:36Z",
    "user": "MarkEWaite",
    "repository": "jenkinsci/gitlab-plugin",
    "pluginName": "gitlab-plugin",
    "labels": [
      "chore"
    ],
    "url": "https://github.com/jenkinsci/gitlab-plugin/pull/1749",
    "description": "Use Java 17 language features\nUse Java 17 pattern matching instanceof.  Makes the code easier to read by avoding the cast that often follows an instanceof.\nUse Java 17 string formatting.  Slight simplification of the code through OpenRewrite.\nUse Java 17 @serial annotation.  Annotation that may allow future checks for serialization.  No real benefit today as far as I can tell.\nSpecial thanks to OpenRewrite for https://docs.openrewrite.org/recipes/java/migrate/upgradetojava17\nTesting done\nConfirmed that automated tests pass.\nSubmitter checklist\n\n Make sure you are opening from a topic/feature/bugfix branch (right side) and not your main branch!\n Ensure that the pull request title represents the desired changelog entry\n Please describe what you did\n Link to relevant issues in GitHub or Jira\n Link to relevant pull requests, esp. upstream and downstream changes\n Ensure you have provided tests - that demonstrates feature works or fixes the issue"
  },
  {
    "number": 32,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-03-01T12:53:38Z",
    "updatedAt": "2025-03-01T13:01:36Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/mysql-api-plugin",
    "pluginName": "mysql-api",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/mysql-api-plugin/pull/32",
    "description": "Hello mysql-api developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!"
  },
  {
    "number": 131,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "MERGED",
    "createdAt": "2025-03-01T12:46:40Z",
    "updatedAt": "2025-03-01T13:02:06Z",
    "user": "jonesbusy",
    "repository": "jenkinsci/database-mysql-plugin",
    "pluginName": "database-mysql",
    "labels": [
      "dependencies",
      "developer"
    ],
    "url": "https://github.com/jenkinsci/database-mysql-plugin/pull/131",
    "description": "Hello database-mysql developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!"
  },
  {
    "number": 35,
    "title": "Bump org.openrewrite.recipe:rewrite-jenkins from 0.21.0 to 0.21.2",
    "state": "OPEN",
    "createdAt": "2025-03-01T01:38:30Z",
    "updatedAt": "2025-03-01T01:38:31Z",
    "user": "dependabot",
    "repository": "jenkinsci/websocketin-notification-plugin",
    "pluginName": "websocketin-notification",
    "labels": [
      "dependencies",
      "java"
    ],
    "url": "https://github.com/jenkinsci/websocketin-notification-plugin/pull/35",
    "description": "Bumps org.openrewrite.recipe:rewrite-jenkins from 0.21.0 to 0.21.2.\n\nRelease notes\nSourced from org.openrewrite.recipe:rewrite-jenkins's releases.\n\n0.21.2\nWhat's Changed\n\nOpenRewrite v8.47.1: https://github.com/openrewrite/rewrite\n\nFull Changelog: https://github.com/openrewrite/rewrite-jenkins\n0.21.1\nFull Changelog: openrewrite/rewrite-jenkins@v0.21.0...v0.21.1\n\n\n\nCommits\n\na58cc08 refactor: Update Gradle wrapper\nSee full diff in compare view\n\n\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.\n\n\nDependabot commands and options\n\nYou can trigger Dependabot actions by commenting on this PR:\n\n@dependabot rebase will rebase this PR\n@dependabot recreate will recreate this PR, overwriting any edits that have been made to it\n@dependabot merge will merge this PR after your CI passes on it\n@dependabot squash and merge will squash and merge this PR after your CI passes on it\n@dependabot cancel merge will cancel a previously requested merge and block automerging\n@dependabot reopen will reopen this PR if it is closed\n@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n@dependabot show \u003cdependency name\u003e ignore conditions will show all of the ignore conditions of the specified dependency\n@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)"
  },
  {
    "number": 16,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-02-27T16:33:51Z",
    "updatedAt": "2025-03-07T08:45:24Z",
    "user": "gounthar",
    "repository": "jenkinsci/42crunch-security-audit-plugin",
    "pluginName": "42crunch-security-audit",
    "labels": null,
    "url": "https://github.com/jenkinsci/42crunch-security-audit-plugin/pull/16",
    "description": "Hello 42crunch-security-audit developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nJEP-227: Replace Acegi Security with Spring Security\nMigrating Jenkins plugin code from Acegi Security to Spring Security is important for several reasons:\n\nSecurity updates: Spring Security is the modern, actively maintained successor to Acegi Security, providing up-to-date security features and patches.\nCompatibility: Jenkins core version 2.266 and later have replaced Acegi Security with Spring Security, so plugins need to be updated to remain compatible with newer Jenkins versions.\nEliminating false positives: Security scanners often flag the outdated Acegi Security library as vulnerable, causing unnecessary concerns and exemption requests in security-conscious organizations.\nReducing technical debt: The Acegi Security code in Jenkins was written over 13 years ago and has barely been touched since, making it difficult to maintain and understand.\nAccess to modern features: Spring Security offers more current security implementations and features that weren't available in Acegi Security.\nCommunity support: With the Jenkins ecosystem moving to Spring Security, plugins using the newer library will benefit from better community support and compatibility with other plugins.\nSimplified API: The migration offers an opportunity to introduce a new simplified security API in Jenkins, potentially making it easier for plugin developers to work with security-related functions.\n\nBy migrating to Spring Security, plugin developers ensure their code remains compatible with current Jenkins versions, benefit from modern security features, and contribute to a more secure and maintainable Jenkins ecosystem.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!"
  },
  {
    "number": 32,
    "title": "Fix non-https repository URLs in pom.xml",
    "state": "OPEN",
    "createdAt": "2025-02-27T08:17:31Z",
    "updatedAt": "2025-02-27T08:17:43Z",
    "user": "gounthar",
    "repository": "jenkinsci/blackduck-security-scan-plugin",
    "pluginName": "blackduck-security-scan",
    "labels": null,
    "url": "https://github.com/jenkinsci/blackduck-security-scan-plugin/pull/32",
    "description": "The goal of this PR is to update pom.xml to use https instead of http for repository URLs. The use of http is currently blocking me when attempting to update this plugin to use JDK 17, because of the following error:\n\nFound non-https repository URL in pom file preventing maven older than 3.8.1\nAlthough you are using a more recent version of Maven through mvnw, the tool I use (plugin-modernizer) relies on Maven directly.\n\nUpdates in pom.xml:\n\nChanged the repository URL with the id bds-artifactory to use an HTTPS URL ${repoReleaseArtifactoryUrl}.\nChanged the snapshot repository URL with the id bds-artifactory in the profile with the id snapshot-deployment to use an HTTPS URL ${snapshotArtifactoryUrl}.\nChanged the repository URL with the id bds-artifactory in the profile with the id deployment to use an HTTPS URL ${releaseArtifactoryUrl}.\nChanged the repository URL with the id bds-artifactory in the profile with the id qa-deployment to use an HTTPS URL ${qaArtifactoryUrl}.\nChanged the snapshot repository URL with the id bds-artifactory in the profile with the id qa-deployment to use an HTTPS URL ${snapshotArtifactoryUrl}.\n\nTesting done\nmvn clean verify\nSubmitter checklist\n\n Make sure you are opening from a topic/feature/bugfix branch (right side) and not your main branch!\n Ensure that the pull request title represents the desired changelog entry\n Please describe what you did\n Link to relevant issues in GitHub or Jira\n Link to relevant pull requests, esp. upstream and downstream changes\n Ensure you have provided tests - that demonstrates feature works or fixes the issue"
  },
  {
    "number": 4,
    "title": "feat(java): Require Jenkins core 2.479.3 and Java 17.",
    "state": "OPEN",
    "createdAt": "2025-02-26T17:49:05Z",
    "updatedAt": "2025-02-26T17:59:49Z",
    "user": "gounthar",
    "repository": "jenkinsci/snowsoftware-commander-plugin",
    "pluginName": "embotics-vcommander",
    "labels": null,
    "url": "https://github.com/jenkinsci/snowsoftware-commander-plugin/pull/4",
    "description": "Hello embotics-vcommander developers! 👋\nThis is an automated pull request created by the Jenkins Plugin Modernizer tool. The tool has applied the following recipes to modernize the plugin:\n\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17\n    io.jenkins.tools.pluginmodernizer.UpgradeNextMajorParentVersion\n    Upgrade to the next major parent version (5.X) requiring Jenkins 2.479 and Java 17.\n\nWhy Upgrade to Java 17 and Jenkins 2.479.x?\n\n\nEmbrace Java 17 LTS Stability: Benefit from long-term support with modern language features that improve development practice and plugin performance.\n\n\nHarness Jenkins 2.479.x Innovations: Stay aligned with the latest features and stability improvements, ensuring smooth integration and future-proofing.\n\n\nEnhance Security: Protect your plugin with up-to-date security fixes from both Java 17 and Jenkins core improvements.\n\n\nAlign with the Community: Keep pace with ecosystem shifts towards Java 17, ensuring compatibility and expanding your plugin's user base.\n\n\nEnjoy a Better Developer Experience: Make the most of advanced tooling support and simplified dependency management with Java 17's enhancements.\n\n\nRemoving developers Tag from pom.xml\nJenkins no longer requires the developers tag in pom.xml, as the developers section was traditionally used to list individuals responsible for the plugin.\nInstead, Jenkins now uses the Repository Permission Updater (RPU) to manage permissions and developer information.\nBenefits of Removing developers Tag:\n\nSimplification: Removes unnecessary metadata from the pom.xml, resulting in a cleaner and more maintainable file.\nConsistency: Centralizes developer information management through the RPU, minimizing discrepancies.\nSecurity: Utilizes the RPU's controlled permission management, enhancing the security of artifact deployments.\n\nRemoving the developers tag aligns with modern Jenkins infrastructure standards and prevents outdated or redundant developer information from being included in plugin metadata.\nSummary\nBy upgrading, you'll be positioning your plugin at the forefront of performance, security, and user satisfaction. We encourage you to explore these updates and provide feedback. Let's continue to build a robust Jenkins ecosystem together!\nSupersedes #3 ."
  },
  {
    "number": 923,
    "title": "Bump org.jvnet.hudson.plugins:analysis-pom from 10.4.0 to 10.5.0",
    "state": "OPEN",
    "createdAt": "2025-02-26T17:40:16Z",
    "updatedAt": "2025-02-26T17:53:37Z",
    "user": "dependabot",
    "repository": "jenkinsci/git-forensics-plugin",
    "pluginName": "git-forensics",
    "labels": [
      "dependencies",
      "java"
    ],
    "url": "https://github.com/jenkinsci/git-forensics-plugin/pull/923",
    "description": "Bumps org.jvnet.hudson.plugins:analysis-pom from 10.4.0 to 10.5.0.\n\nRelease notes\nSourced from org.jvnet.hudson.plugins:analysis-pom's releases.\n\nv10.5.0 🎁\n🐛 Bug Fixes\n\nAdd the missing version for OWASP dependency check (#1130) @​uhafner\n\n📦 Dependency Updates\n\nBump org.openrewrite.maven:rewrite-maven-plugin from 6.1.4 to 6.2.0 (#1123) @dependabot[bot]\nBump org.openrewrite.recipe:rewrite-static-analysis from 2.2.0 to 2.3.0 (#1125) @dependabot[bot]\nBump org.pitest:pitest-junit5-plugin from 1.2.1 to 1.2.2 (#1129) @dependabot[bot]\nBump org.openrewrite.recipe:rewrite-testing-frameworks from 3.2.0 to 3.3.0 (#1124) @dependabot[bot]\nBump org.openrewrite.recipe:rewrite-migrate-java from 3.2.0 to 3.3.0 (#1126) @dependabot[bot]\nBump com.puppycrawl.tools:checkstyle from 10.21.2 to 10.21.3 (#1127) @dependabot[bot]\nBump io.jenkins.tools.bom:bom-2.479.x from 4136.vca_c3202a_7fd1 to 4228.v0a_71308d905b_ (#1128) @dependabot[bot]\nBump org.pitest:pitest-maven from 1.18.1 to 1.18.2 (#1121) @dependabot[bot]\nBump nl.jqno.equalsverifier:equalsverifier from 3.19 to 3.19.1 (#1122) @dependabot[bot]\nBump org.openrewrite.maven:rewrite-maven-plugin from 6.1.3 to 6.1.4 (#1120) @dependabot[bot]\n\n\n\n\nCommits\n\nc606f32 [maven-release-plugin] prepare release v10.5.0\n1647b79 Merge pull request #1130 from jenkinsci/dependency-check-maven.version\n484fbfe Add the missing version for OWASP dependency check\n08d1321 Merge pull request #1123 from jenkinsci/dependabot/maven/org.openrewrite.mave...\n50ec3a6 Merge pull request #1125 from jenkinsci/dependabot/maven/org.openrewrite.reci...\na2324f3 Merge pull request #1129 from jenkinsci/dependabot/maven/org.pitest-pitest-ju...\nf68f656 Bump org.pitest:pitest-junit5-plugin from 1.2.1 to 1.2.2\n52c9a48 Bump org.openrewrite.maven:rewrite-maven-plugin from 6.1.4 to 6.2.0\n28652d5 Bump org.openrewrite.recipe:rewrite-static-analysis from 2.2.0 to 2.3.0\ne44cab4 Merge pull request #1124 from jenkinsci/dependabot/maven/org.openrewrite.reci...\nAdditional commits viewable in compare view\n\n\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.\n\n\nDependabot commands and options\n\nYou can trigger Dependabot actions by commenting on this PR:\n\n@dependabot rebase will rebase this PR\n@dependabot recreate will recreate this PR, overwriting any edits that have been made to it\n@dependabot merge will merge this PR after your CI passes on it\n@dependabot squash and merge will squash and merge this PR after your CI passes on it\n@dependabot cancel merge will cancel a previously requested merge and block automerging\n@dependabot reopen will reopen this PR if it is closed\n@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n@dependabot show \u003cdependency name\u003e ignore conditions will show all of the ignore conditions of the specified dependency\n@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)"
  },
  {
    "number": 310,
    "title": "Bump org.jvnet.hudson.plugins:analysis-pom from 10.4.0 to 10.5.0",
    "state": "OPEN",
    "createdAt": "2025-02-26T14:41:29Z",
    "updatedAt": "2025-02-26T14:42:08Z",
    "user": "dependabot",
    "repository": "jenkinsci/font-awesome-api-plugin",
    "pluginName": "font-awesome-api",
    "labels": [
      "dependencies",
      "java"
    ],
    "url": "https://github.com/jenkinsci/font-awesome-api-plugin/pull/310",
    "description": "Bumps org.jvnet.hudson.plugins:analysis-pom from 10.4.0 to 10.5.0.\n\nRelease notes\nSourced from org.jvnet.hudson.plugins:analysis-pom's releases.\n\nv10.5.0 🎁\n🐛 Bug Fixes\n\nAdd the missing version for OWASP dependency check (#1130) @​uhafner\n\n📦 Dependency Updates\n\nBump org.openrewrite.maven:rewrite-maven-plugin from 6.1.4 to 6.2.0 (#1123) @dependabot[bot]\nBump org.openrewrite.recipe:rewrite-static-analysis from 2.2.0 to 2.3.0 (#1125) @dependabot[bot]\nBump org.pitest:pitest-junit5-plugin from 1.2.1 to 1.2.2 (#1129) @dependabot[bot]\nBump org.openrewrite.recipe:rewrite-testing-frameworks from 3.2.0 to 3.3.0 (#1124) @dependabot[bot]\nBump org.openrewrite.recipe:rewrite-migrate-java from 3.2.0 to 3.3.0 (#1126) @dependabot[bot]\nBump com.puppycrawl.tools:checkstyle from 10.21.2 to 10.21.3 (#1127) @dependabot[bot]\nBump io.jenkins.tools.bom:bom-2.479.x from 4136.vca_c3202a_7fd1 to 4228.v0a_71308d905b_ (#1128) @dependabot[bot]\nBump org.pitest:pitest-maven from 1.18.1 to 1.18.2 (#1121) @dependabot[bot]\nBump nl.jqno.equalsverifier:equalsverifier from 3.19 to 3.19.1 (#1122) @dependabot[bot]\nBump org.openrewrite.maven:rewrite-maven-plugin from 6.1.3 to 6.1.4 (#1120) @dependabot[bot]\n\n\n\n\nCommits\n\nc606f32 [maven-release-plugin] prepare release v10.5.0\n1647b79 Merge pull request #1130 from jenkinsci/dependency-check-maven.version\n484fbfe Add the missing version for OWASP dependency check\n08d1321 Merge pull request #1123 from jenkinsci/dependabot/maven/org.openrewrite.mave...\n50ec3a6 Merge pull request #1125 from jenkinsci/dependabot/maven/org.openrewrite.reci...\na2324f3 Merge pull request #1129 from jenkinsci/dependabot/maven/org.pitest-pitest-ju...\nf68f656 Bump org.pitest:pitest-junit5-plugin from 1.2.1 to 1.2.2\n52c9a48 Bump org.openrewrite.maven:rewrite-maven-plugin from 6.1.4 to 6.2.0\n28652d5 Bump org.openrewrite.recipe:rewrite-static-analysis from 2.2.0 to 2.3.0\ne44cab4 Merge pull request #1124 from jenkinsci/dependabot/maven/org.openrewrite.reci...\nAdditional commits viewable in compare view\n\n\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.\n\n\nDependabot commands and options\n\nYou can trigger Dependabot actions by commenting on this PR:\n\n@dependabot rebase will rebase this PR\n@dependabot recreate will recreate this PR, overwriting any edits that have been made to it\n@dependabot merge will merge this PR after your CI passes on it\n@dependabot squash and merge will squash and merge this PR after your CI passes on it\n@dependabot cancel merge will cancel a previously requested merge and block automerging\n@dependabot reopen will reopen this PR if it is closed\n@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n@dependabot show \u003cdependency name\u003e ignore conditions will show all of the ignore conditions of the specified dependency\n@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)"
  },
  {
    "number": 1962,
    "title": "Bump org.jvnet.hudson.plugins:analysis-pom from 10.4.0 to 10.5.0",
    "state": "MERGED",
    "createdAt": "2025-02-26T09:44:50Z",
    "updatedAt": "2025-02-28T08:17:08Z",
    "user": "dependabot",
    "repository": "jenkinsci/warnings-ng-plugin",
    "pluginName": "warnings-ng",
    "labels": [
      "dependencies",
      "java"
    ],
    "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/1962",
    "description": "Bumps org.jvnet.hudson.plugins:analysis-pom from 10.4.0 to 10.5.0.\n\nRelease notes\nSourced from org.jvnet.hudson.plugins:analysis-pom's releases.\n\nv10.5.0 🎁\n🐛 Bug Fixes\n\nAdd the missing version for OWASP dependency check (#1130) @​uhafner\n\n📦 Dependency Updates\n\nBump org.openrewrite.maven:rewrite-maven-plugin from 6.1.4 to 6.2.0 (#1123) @dependabot[bot]\nBump org.openrewrite.recipe:rewrite-static-analysis from 2.2.0 to 2.3.0 (#1125) @dependabot[bot]\nBump org.pitest:pitest-junit5-plugin from 1.2.1 to 1.2.2 (#1129) @dependabot[bot]\nBump org.openrewrite.recipe:rewrite-testing-frameworks from 3.2.0 to 3.3.0 (#1124) @dependabot[bot]\nBump org.openrewrite.recipe:rewrite-migrate-java from 3.2.0 to 3.3.0 (#1126) @dependabot[bot]\nBump com.puppycrawl.tools:checkstyle from 10.21.2 to 10.21.3 (#1127) @dependabot[bot]\nBump io.jenkins.tools.bom:bom-2.479.x from 4136.vca_c3202a_7fd1 to 4228.v0a_71308d905b_ (#1128) @dependabot[bot]\nBump org.pitest:pitest-maven from 1.18.1 to 1.18.2 (#1121) @dependabot[bot]\nBump nl.jqno.equalsverifier:equalsverifier from 3.19 to 3.19.1 (#1122) @dependabot[bot]\nBump org.openrewrite.maven:rewrite-maven-plugin from 6.1.3 to 6.1.4 (#1120) @dependabot[bot]\n\n\n\n\nCommits\n\nc606f32 [maven-release-plugin] prepare release v10.5.0\n1647b79 Merge pull request #1130 from jenkinsci/dependency-check-maven.version\n484fbfe Add the missing version for OWASP dependency check\n08d1321 Merge pull request #1123 from jenkinsci/dependabot/maven/org.openrewrite.mave...\n50ec3a6 Merge pull request #1125 from jenkinsci/dependabot/maven/org.openrewrite.reci...\na2324f3 Merge pull request #1129 from jenkinsci/dependabot/maven/org.pitest-pitest-ju...\nf68f656 Bump org.pitest:pitest-junit5-plugin from 1.2.1 to 1.2.2\n52c9a48 Bump org.openrewrite.maven:rewrite-maven-plugin from 6.1.4 to 6.2.0\n28652d5 Bump org.openrewrite.recipe:rewrite-static-analysis from 2.2.0 to 2.3.0\ne44cab4 Merge pull request #1124 from jenkinsci/dependabot/maven/org.openrewrite.reci...\nAdditional commits viewable in compare view\n\n\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.\n\n\nDependabot commands and options\n\nYou can trigger Dependabot actions by commenting on this PR:\n\n@dependabot rebase will rebase this PR\n@dependabot recreate will recreate this PR, overwriting any edits that have been made to it\n@dependabot merge will merge this PR after your CI passes on it\n@dependabot squash and merge will squash and merge this PR after your CI passes on it\n@dependabot cancel merge will cancel a previously requested merge and block automerging\n@dependabot reopen will reopen this PR if it is closed\n@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n@dependabot show \u003cdependency name\u003e ignore conditions will show all of the ignore conditions of the specified dependency\n@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)"
  },
  {
    "number": 346,
    "title": "Bump org.jvnet.hudson.plugins:analysis-pom from 10.4.0 to 10.5.0",
    "state": "MERGED",
    "createdAt": "2025-02-26T08:17:50Z",
    "updatedAt": "2025-02-26T22:50:21Z",
    "user": "dependabot",
    "repository": "jenkinsci/coverage-plugin",
    "pluginName": "coverage",
    "labels": [
      "dependencies",
      "java"
    ],
    "url": "https://github.com/jenkinsci/coverage-plugin/pull/346",
    "description": "Bumps org.jvnet.hudson.plugins:analysis-pom from 10.4.0 to 10.5.0.\n\nRelease notes\nSourced from org.jvnet.hudson.plugins:analysis-pom's releases.\n\nv10.5.0 🎁\n🐛 Bug Fixes\n\nAdd the missing version for OWASP dependency check (#1130) @​uhafner\n\n📦 Dependency Updates\n\nBump org.openrewrite.maven:rewrite-maven-plugin from 6.1.4 to 6.2.0 (#1123) @dependabot[bot]\nBump org.openrewrite.recipe:rewrite-static-analysis from 2.2.0 to 2.3.0 (#1125) @dependabot[bot]\nBump org.pitest:pitest-junit5-plugin from 1.2.1 to 1.2.2 (#1129) @dependabot[bot]\nBump org.openrewrite.recipe:rewrite-testing-frameworks from 3.2.0 to 3.3.0 (#1124) @dependabot[bot]\nBump org.openrewrite.recipe:rewrite-migrate-java from 3.2.0 to 3.3.0 (#1126) @dependabot[bot]\nBump com.puppycrawl.tools:checkstyle from 10.21.2 to 10.21.3 (#1127) @dependabot[bot]\nBump io.jenkins.tools.bom:bom-2.479.x from 4136.vca_c3202a_7fd1 to 4228.v0a_71308d905b_ (#1128) @dependabot[bot]\nBump org.pitest:pitest-maven from 1.18.1 to 1.18.2 (#1121) @dependabot[bot]\nBump nl.jqno.equalsverifier:equalsverifier from 3.19 to 3.19.1 (#1122) @dependabot[bot]\nBump org.openrewrite.maven:rewrite-maven-plugin from 6.1.3 to 6.1.4 (#1120) @dependabot[bot]\n\n\n\n\nCommits\n\nc606f32 [maven-release-plugin] prepare release v10.5.0\n1647b79 Merge pull request #1130 from jenkinsci/dependency-check-maven.version\n484fbfe Add the missing version for OWASP dependency check\n08d1321 Merge pull request #1123 from jenkinsci/dependabot/maven/org.openrewrite.mave...\n50ec3a6 Merge pull request #1125 from jenkinsci/dependabot/maven/org.openrewrite.reci...\na2324f3 Merge pull request #1129 from jenkinsci/dependabot/maven/org.pitest-pitest-ju...\nf68f656 Bump org.pitest:pitest-junit5-plugin from 1.2.1 to 1.2.2\n52c9a48 Bump org.openrewrite.maven:rewrite-maven-plugin from 6.1.4 to 6.2.0\n28652d5 Bump org.openrewrite.recipe:rewrite-static-analysis from 2.2.0 to 2.3.0\ne44cab4 Merge pull request #1124 from jenkinsci/dependabot/maven/org.openrewrite.reci...\nAdditional commits viewable in compare view\n\n\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.\n\n\nDependabot commands and options\n\nYou can trigger Dependabot actions by commenting on this PR:\n\n@dependabot rebase will rebase this PR\n@dependabot recreate will recreate this PR, overwriting any edits that have been made to it\n@dependabot merge will merge this PR after your CI passes on it\n@dependabot squash and merge will squash and merge this PR after your CI passes on it\n@dependabot cancel merge will cancel a previously requested merge and block automerging\n@dependabot reopen will reopen this PR if it is closed\n@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n@dependabot show \u003cdependency name\u003e ignore conditions will show all of the ignore conditions of the specified dependency\n@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)"
  },
  {
    "number": 378,
    "title": "Bump org.jvnet.hudson.plugins:analysis-pom from 10.4.0 to 10.5.0",
    "state": "OPEN",
    "createdAt": "2025-02-26T05:15:46Z",
    "updatedAt": "2025-02-26T05:16:29Z",
    "user": "dependabot",
    "repository": "jenkinsci/bootstrap5-api-plugin",
    "pluginName": "bootstrap5-api",
    "labels": [
      "dependencies",
      "java"
    ],
    "url": "https://github.com/jenkinsci/bootstrap5-api-plugin/pull/378",
    "description": "Bumps org.jvnet.hudson.plugins:analysis-pom from 10.4.0 to 10.5.0.\n\nRelease notes\nSourced from org.jvnet.hudson.plugins:analysis-pom's releases.\n\nv10.5.0 🎁\n🐛 Bug Fixes\n\nAdd the missing version for OWASP dependency check (#1130) @​uhafner\n\n📦 Dependency Updates\n\nBump org.openrewrite.maven:rewrite-maven-plugin from 6.1.4 to 6.2.0 (#1123) @dependabot[bot]\nBump org.openrewrite.recipe:rewrite-static-analysis from 2.2.0 to 2.3.0 (#1125) @dependabot[bot]\nBump org.pitest:pitest-junit5-plugin from 1.2.1 to 1.2.2 (#1129) @dependabot[bot]\nBump org.openrewrite.recipe:rewrite-testing-frameworks from 3.2.0 to 3.3.0 (#1124) @dependabot[bot]\nBump org.openrewrite.recipe:rewrite-migrate-java from 3.2.0 to 3.3.0 (#1126) @dependabot[bot]\nBump com.puppycrawl.tools:checkstyle from 10.21.2 to 10.21.3 (#1127) @dependabot[bot]\nBump io.jenkins.tools.bom:bom-2.479.x from 4136.vca_c3202a_7fd1 to 4228.v0a_71308d905b_ (#1128) @dependabot[bot]\nBump org.pitest:pitest-maven from 1.18.1 to 1.18.2 (#1121) @dependabot[bot]\nBump nl.jqno.equalsverifier:equalsverifier from 3.19 to 3.19.1 (#1122) @dependabot[bot]\nBump org.openrewrite.maven:rewrite-maven-plugin from 6.1.3 to 6.1.4 (#1120) @dependabot[bot]\n\n\n\n\nCommits\n\nc606f32 [maven-release-plugin] prepare release v10.5.0\n1647b79 Merge pull request #1130 from jenkinsci/dependency-check-maven.version\n484fbfe Add the missing version for OWASP dependency check\n08d1321 Merge pull request #1123 from jenkinsci/dependabot/maven/org.openrewrite.mave...\n50ec3a6 Merge pull request #1125 from jenkinsci/dependabot/maven/org.openrewrite.reci...\na2324f3 Merge pull request #1129 from jenkinsci/dependabot/maven/org.pitest-pitest-ju...\nf68f656 Bump org.pitest:pitest-junit5-plugin from 1.2.1 to 1.2.2\n52c9a48 Bump org.openrewrite.maven:rewrite-maven-plugin from 6.1.4 to 6.2.0\n28652d5 Bump org.openrewrite.recipe:rewrite-static-analysis from 2.2.0 to 2.3.0\ne44cab4 Merge pull request #1124 from jenkinsci/dependabot/maven/org.openrewrite.reci...\nAdditional commits viewable in compare view\n\n\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.\n\n\nDependabot commands and options\n\nYou can trigger Dependabot actions by commenting on this PR:\n\n@dependabot rebase will rebase this PR\n@dependabot recreate will recreate this PR, overwriting any edits that have been made to it\n@dependabot merge will merge this PR after your CI passes on it\n@dependabot squash and merge will squash and merge this PR after your CI passes on it\n@dependabot cancel merge will cancel a previously requested merge and block automerging\n@dependabot reopen will reopen this PR if it is closed\n@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n@dependabot show \u003cdependency name\u003e ignore conditions will show all of the ignore conditions of the specified dependency\n@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)"
  },
  {
    "number": 203,
    "title": "Bump org.jvnet.hudson.plugins:analysis-pom from 10.4.0 to 10.5.0",
    "state": "OPEN",
    "createdAt": "2025-02-26T04:46:20Z",
    "updatedAt": "2025-02-26T04:46:57Z",
    "user": "dependabot",
    "repository": "jenkinsci/prism-api-plugin",
    "pluginName": "prism-api",
    "labels": [
      "dependencies",
      "java"
    ],
    "url": "https://github.com/jenkinsci/prism-api-plugin/pull/203",
    "description": "Bumps org.jvnet.hudson.plugins:analysis-pom from 10.4.0 to 10.5.0.\n\nRelease notes\nSourced from org.jvnet.hudson.plugins:analysis-pom's releases.\n\nv10.5.0 🎁\n🐛 Bug Fixes\n\nAdd the missing version for OWASP dependency check (#1130) @​uhafner\n\n📦 Dependency Updates\n\nBump org.openrewrite.maven:rewrite-maven-plugin from 6.1.4 to 6.2.0 (#1123) @dependabot[bot]\nBump org.openrewrite.recipe:rewrite-static-analysis from 2.2.0 to 2.3.0 (#1125) @dependabot[bot]\nBump org.pitest:pitest-junit5-plugin from 1.2.1 to 1.2.2 (#1129) @dependabot[bot]\nBump org.openrewrite.recipe:rewrite-testing-frameworks from 3.2.0 to 3.3.0 (#1124) @dependabot[bot]\nBump org.openrewrite.recipe:rewrite-migrate-java from 3.2.0 to 3.3.0 (#1126) @dependabot[bot]\nBump com.puppycrawl.tools:checkstyle from 10.21.2 to 10.21.3 (#1127) @dependabot[bot]\nBump io.jenkins.tools.bom:bom-2.479.x from 4136.vca_c3202a_7fd1 to 4228.v0a_71308d905b_ (#1128) @dependabot[bot]\nBump org.pitest:pitest-maven from 1.18.1 to 1.18.2 (#1121) @dependabot[bot]\nBump nl.jqno.equalsverifier:equalsverifier from 3.19 to 3.19.1 (#1122) @dependabot[bot]\nBump org.openrewrite.maven:rewrite-maven-plugin from 6.1.3 to 6.1.4 (#1120) @dependabot[bot]\n\n\n\n\nCommits\n\nc606f32 [maven-release-plugin] prepare release v10.5.0\n1647b79 Merge pull request #1130 from jenkinsci/dependency-check-maven.version\n484fbfe Add the missing version for OWASP dependency check\n08d1321 Merge pull request #1123 from jenkinsci/dependabot/maven/org.openrewrite.mave...\n50ec3a6 Merge pull request #1125 from jenkinsci/dependabot/maven/org.openrewrite.reci...\na2324f3 Merge pull request #1129 from jenkinsci/dependabot/maven/org.pitest-pitest-ju...\nf68f656 Bump org.pitest:pitest-junit5-plugin from 1.2.1 to 1.2.2\n52c9a48 Bump org.openrewrite.maven:rewrite-maven-plugin from 6.1.4 to 6.2.0\n28652d5 Bump org.openrewrite.recipe:rewrite-static-analysis from 2.2.0 to 2.3.0\ne44cab4 Merge pull request #1124 from jenkinsci/dependabot/maven/org.openrewrite.reci...\nAdditional commits viewable in compare view\n\n\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.\n\n\nDependabot commands and options\n\nYou can trigger Dependabot actions by commenting on this PR:\n\n@dependabot rebase will rebase this PR\n@dependabot recreate will recreate this PR, overwriting any edits that have been made to it\n@dependabot merge will merge this PR after your CI passes on it\n@dependabot squash and merge will squash and merge this PR after your CI passes on it\n@dependabot cancel merge will cancel a previously requested merge and block automerging\n@dependabot reopen will reopen this PR if it is closed\n@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n@dependabot show \u003cdependency name\u003e ignore conditions will show all of the ignore conditions of the specified dependency\n@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)"
  },
  {
    "number": 413,
    "title": "Bump org.jvnet.hudson.plugins:analysis-pom from 10.4.0 to 10.5.0",
    "state": "OPEN",
    "createdAt": "2025-02-26T04:10:22Z",
    "updatedAt": "2025-02-26T04:11:04Z",
    "user": "dependabot",
    "repository": "jenkinsci/plugin-util-api-plugin",
    "pluginName": "plugin-util-api",
    "labels": [
      "dependencies",
      "java"
    ],
    "url": "https://github.com/jenkinsci/plugin-util-api-plugin/pull/413",
    "description": "Bumps org.jvnet.hudson.plugins:analysis-pom from 10.4.0 to 10.5.0.\n\nRelease notes\nSourced from org.jvnet.hudson.plugins:analysis-pom's releases.\n\nv10.5.0 🎁\n🐛 Bug Fixes\n\nAdd the missing version for OWASP dependency check (#1130) @​uhafner\n\n📦 Dependency Updates\n\nBump org.openrewrite.maven:rewrite-maven-plugin from 6.1.4 to 6.2.0 (#1123) @dependabot[bot]\nBump org.openrewrite.recipe:rewrite-static-analysis from 2.2.0 to 2.3.0 (#1125) @dependabot[bot]\nBump org.pitest:pitest-junit5-plugin from 1.2.1 to 1.2.2 (#1129) @dependabot[bot]\nBump org.openrewrite.recipe:rewrite-testing-frameworks from 3.2.0 to 3.3.0 (#1124) @dependabot[bot]\nBump org.openrewrite.recipe:rewrite-migrate-java from 3.2.0 to 3.3.0 (#1126) @dependabot[bot]\nBump com.puppycrawl.tools:checkstyle from 10.21.2 to 10.21.3 (#1127) @dependabot[bot]\nBump io.jenkins.tools.bom:bom-2.479.x from 4136.vca_c3202a_7fd1 to 4228.v0a_71308d905b_ (#1128) @dependabot[bot]\nBump org.pitest:pitest-maven from 1.18.1 to 1.18.2 (#1121) @dependabot[bot]\nBump nl.jqno.equalsverifier:equalsverifier from 3.19 to 3.19.1 (#1122) @dependabot[bot]\nBump org.openrewrite.maven:rewrite-maven-plugin from 6.1.3 to 6.1.4 (#1120) @dependabot[bot]\n\n\n\n\nCommits\n\nc606f32 [maven-release-plugin] prepare release v10.5.0\n1647b79 Merge pull request #1130 from jenkinsci/dependency-check-maven.version\n484fbfe Add the missing version for OWASP dependency check\n08d1321 Merge pull request #1123 from jenkinsci/dependabot/maven/org.openrewrite.mave...\n50ec3a6 Merge pull request #1125 from jenkinsci/dependabot/maven/org.openrewrite.reci...\na2324f3 Merge pull request #1129 from jenkinsci/dependabot/maven/org.pitest-pitest-ju...\nf68f656 Bump org.pitest:pitest-junit5-plugin from 1.2.1 to 1.2.2\n52c9a48 Bump org.openrewrite.maven:rewrite-maven-plugin from 6.1.4 to 6.2.0\n28652d5 Bump org.openrewrite.recipe:rewrite-static-analysis from 2.2.0 to 2.3.0\ne44cab4 Merge pull request #1124 from jenkinsci/dependabot/maven/org.openrewrite.reci...\nAdditional commits viewable in compare view\n\n\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.\n\n\nDependabot commands and options\n\nYou can trigger Dependabot actions by commenting on this PR:\n\n@dependabot rebase will rebase this PR\n@dependabot recreate will recreate this PR, overwriting any edits that have been made to it\n@dependabot merge will merge this PR after your CI passes on it\n@dependabot squash and merge will squash and merge this PR after your CI passes on it\n@dependabot cancel merge will cancel a previously requested merge and block automerging\n@dependabot reopen will reopen this PR if it is closed\n@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n@dependabot show \u003cdependency name\u003e ignore conditions will show all of the ignore conditions of the specified dependency\n@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)"
  }
]
