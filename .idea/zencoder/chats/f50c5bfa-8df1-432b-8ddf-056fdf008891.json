{
    "checksum": "fe5a6944539042b60ece9f4b2aeab0b7b72f21852a532354d8d6eefe2c188c9d",
    "data": {
    "id": "f50c5bfa-8df1-432b-8ddf-056fdf008891",
    "createdAt": 1746462285618,
    "updatedAt": 1746462303600,
    "title": "Version Extraction Improvement",
    "messages": [
        {
            "id": "2c98c65c-7dd4-40c2-bf41-115b1eae4748",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Comment on lines +123 to +181"
                },
                {
                    "type": "text",
                    "text": "️ Refactor suggestion"
                },
                {
                    "type": "text",
                    "text": "Improve version extraction and unknown handling The sed patterns for installed_version_full and latest_version_short are brittle, and \"unknown\" from the API isn't handled distinctly. Consider:"
                },
                {
                    "type": "text",
                    "text": "Early-return when latest_version_full == \"unknown\"."
                },
                {
                    "type": "text",
                    "text": "Consolidating to a single robust extraction approach or using a semantic version parser."
                },
                {
                    "type": "codeSnippet",
                    "text": "-    latest_version_full=$(get_latest_jdk25_version)\n+    latest_version_full=$(get_latest_jdk25_version)\n+    if [[ \"$latest_version_full\" == \"unknown\" ]]; then\n+        log_message \"Latest version unknown; forcing update.\"\n+        return 1\n+    fi\n"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "install-jdk-versions.sh",
                    "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\install-jdk-versions.sh",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "#!/bin/bash\n\n# ```\nlog_message() {\n    local message=\"$1\"\n    echo \"[DEBUG] $(date '+%Y-%m-%d %H:%M:%S') - $message\"\n}\n\n# Define the JDK installation directory at the beginning of the script\nJDK_INSTALL_DIR=\"$HOME/.jdk-25\"\n\n# Determine the directory of the current script\n# This ensures that the script can locate other scripts or files relative to its own location.\nscript_dir=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" &>/dev/null && pwd)\"\n\n# Check if SDKMAN is installed in common locations\nif [[ ! -s \"$HOME/.sdkman/bin/sdkman-init.sh\" && ! -s \"/usr/local/sdkman/bin/sdkman-init.sh\" ]]; then\n    echo \"SDKMAN is not installed. Attempting to install SDKMAN...\"\n    # Install SDKMAN inline\n    curl -s \"https://get.sdkman.io\" | bash\n\n    # Check if SDKMAN is successfully installed\n    if [[ ! -s \"$HOME/.sdkman/bin/sdkman-init.sh\" && ! -s \"/usr/local/sdkman/bin/sdkman-init.sh\" ]]; then\n        echo \"Failed to install SDKMAN. Please install SDKMAN manually.\"\n        exit 1\n    fi\n\n    echo \"SDKMAN installed successfully.\"\nfi\n\n# Initialize SDKMAN from the appropriate location\nif [[ -s \"$HOME/.sdkman/bin/sdkman-init.sh\" ]]; then\n    source \"$HOME/.sdkman/bin/sdkman-init.sh\"\nelif [[ -s \"/usr/local/sdkman/bin/sdkman-init.sh\" ]]; then\n    source \"/usr/local/sdkman/bin/sdkman-init.sh\"\nfi\n\n# Detects the system architecture and sets the ARCHITECTURE variable to an API-compatible value.\n#\n# Globals:\n#   ARCHITECTURE (set): The detected and mapped architecture string for API use.\n#\n# Outputs:\n#   Logs the detected architecture and errors to standard output.\n#\n# Returns:\n#   Exits with status 1 if the architecture is unsupported or cannot be determined.\n#\n# Example:\n#\n#   set_architecture\n#   # ARCHITECTURE will be set to \"x64\", \"aarch64\", or \"riscv64\" depending on the system.\nset_architecture() {\n    ARCHITECTURE=$(uname -m)\n    log_message \"Detected system architecture: $ARCHITECTURE\"\n\n    # Map architecture to the expected values for the API\n    case \"$ARCHITECTURE\" in\n        x86_64)\n            ARCHITECTURE=\"x64\";;\n        aarch64)\n            ARCHITECTURE=\"aarch64\";;\n        riscv64)\n            ARCHITECTURE=\"riscv64\";;\n        *)\n            log_message \"Error: Unsupported architecture $ARCHITECTURE\"\n            ARCHITECTURE=\"unknown\";;\n    esac\n\n    if [[ \"$ARCHITECTURE\" == \"unknown\" ]]; then\n        log_message \"Error: Unable to determine a valid architecture for the API.\"\n        exit 1\n    fi\n}\n\n# Call set_architecture before any API calls\nset_architecture\n\n# Retrieves the latest available Temurin JDK 25 early access version string for the current architecture from the Adoptium API.\n#\n# Returns:\n#\n# * The semantic version string of the latest JDK 25 early access release, or \"unknown\" if retrieval fails.\n#\n# Example:\n#\n# ```bash\n# latest_version=$(get_latest_jdk25_version)\n# echo \"Latest JDK 25 version: $latest_version\"\n# ```\nget_latest_jdk25_version() {\n    local api_url=\"https://api.adoptium.net/v3/assets/feature_releases/25/ea?architecture=$ARCHITECTURE&heap_size=normal&image_type=jdk&jvm_impl=hotspot&os=linux&page_size=1&project=jdk&sort_order=DESC&vendor=eclipse\"\n    log_message \"Fetching latest JDK 25 version from API: $api_url\"\n\n    # Fetch the version data from the API\n    local version_data\n    version_data=$(curl -s \"$api_url\" | jq -r '.[0].version_data.semver')\n\n    if [[ -z \"$version_data\" || \"$version_data\" == \"null\" ]]; then\n        log_message \"Error: Unable to retrieve the latest JDK 25 version from the API.\"\n        echo \"unknown\"\n    else\n        echo \"$version_data\"\n    fi\n}\n\n# Checks if the installed Temurin JDK 25 is up-to-date by comparing the local version with the latest available version from the Adoptium API.\n#\n# Returns:\n#\n# * 0 if the installed JDK 25 version matches the latest available version.\n# * 1 if JDK 25 is not installed or is outdated.\n#\n# Example:\n#\n# ```bash\n# if is_jdk25_up_to_date; then\n#   echo \"JDK 25 is current.\"\n# else\n#   echo \"JDK 25 needs to be installed or updated.\"\n# fi\n# ```\nis_jdk25_up_to_date() {\n    log_message \"Checking if JDK 25 is up-to-date...\"\n    local installed_version_full\n    local installed_version_short\n    local latest_version_full\n    local latest_version_short\n\n    # Explicitly invoke the java binary from the JDK 25 installation directory\n    if [[ -x \"$JDK_INSTALL_DIR/bin/java\" ]]; then\n        log_message \"Output of '$JDK_INSTALL_DIR/bin/java -version':\"\n        local java_version_output\n        java_version_output=$(\"$JDK_INSTALL_DIR/bin/java\" -version 2>&1)\n        echo \"$java_version_output\" | while read -r line; do log_message \"$line\"; done\n\n        # Extract version from the Runtime Environment line (e.g., Temurin-25+20...)\n        # Use ERE for clarity and correct matching of digits+digits\n        installed_version_full=$(echo \"$java_version_output\" | grep 'OpenJDK Runtime Environment' | sed -E -n 's/.*Temurin-([0-9]+)\\+([0-9]+).*/\\1+\\2/p')\n        log_message \"Detected installed JDK 25 full version string: $installed_version_full\"\n\n        if [[ -z \"$installed_version_full\" ]]; then\n             log_message \"Could not extract full version string from installed JDK.\"\n             # Fallback to simpler version detection if full string extraction fails\n             installed_version_short=$(\"$JDK_INSTALL_DIR/bin/java\" -version 2>&1 | grep -oE '\"25[^\"]*\"' | tr -d '\"')\n             log_message \"Fallback: Detected installed JDK 25 short version: $installed_version_short\"\n        else\n            # Use the extracted full version for comparison\n            installed_version_short=\"$installed_version_full\"\n        fi\n\n    else\n        log_message \"No JDK 25 version is currently installed.\"\n        return 1\n    fi\n\n    # Get the latest version of JDK 25 from the API\n    latest_version_full=$(get_latest_jdk25_version)\n    log_message \"Latest available JDK 25 version from API: $latest_version_full\"\n\n    # Extract comparable part from API version (e.g., 25+20)\n    # Use ERE for clarity and correct matching of digits+digits from API string\n    latest_version_short=$(echo \"$latest_version_full\" | sed -E -n 's/([0-9]+)\\.[0-9]+\\.[0-9]+-beta\\+([0-9]+)\\..*/\\1+\\2/p')\n    log_message \"Extracted comparable latest version: $latest_version_short\"\n\n    if [[ -z \"$latest_version_short\" ]]; then\n        log_message \"Could not extract comparable version string from API version.\"\n        # Fallback to comparing full API string if extraction fails\n        latest_version_short=\"$latest_version_full\"\n    fi\n\n    log_message \"Comparing installed version '$installed_version_short' with latest version '$latest_version_short'\"\n\n    if [[ \"$installed_version_short\" == \"$latest_version_short\" ]]; then\n        log_message \"JDK 25 is up-to-date (version $installed_version_full). Skipping installation.\"\n        return 0\n    else\n        log_message \"Installed JDK 25 version ($installed_version_full) is not up-to-date. Latest version is $latest_version_full.\"\n        return 1\n    fi\n}\n\n# Downloads and installs the latest Temurin JDK 25 early access binary, updating environment variables and verifying installation.\n#\n# Globals:\n#   JDK_INSTALL_DIR: Directory where JDK 25 will be installed.\n#   ARCHITECTURE: System architecture string for API queries.\n#\n# Outputs:\n#   Logs progress and errors to standard output.\n#\n# Example:\n#\n#   install_temurin_jdk25\n#   # Installs or updates Temurin JDK 25 early access in $HOME/.jdk-25 and updates PATH and JAVA_HOME.\ninstall_temurin_jdk25() {\n    log_message \"Starting installation of Temurin JDK 25...\"\n    if is_jdk25_up_to_date; then\n        log_message \"Skipping installation as JDK 25 is already up-to-date.\"\n        return\n    fi\n\n    # Update the installation directory to a user-writable location\n    log_message \"JDK installation directory set to: $JDK_INSTALL_DIR\"\n\n    local api_url=\"https://api.adoptium.net/v3/assets/feature_releases/25/ea?architecture=$ARCHITECTURE&heap_size=normal&image_type=jdk&jvm_impl=hotspot&os=linux&page_size=1&project=jdk&sort_order=DESC&vendor=eclipse\"\n    local download_url\n\n    # Fetch the latest JDK 25 early access binary URL\n    log_message \"Fetching latest JDK 25 binary URL from API: $api_url\"\n    download_url=$(curl -s \"$api_url\" | jq -r '.[0].binaries[0].package.link')\n\n    if [ -z \"$download_url\" ]; then\n        log_message \"Error: Unable to fetch Temurin JDK 25 early access binary URL.\"\n        exit 1\n    fi\n\n    log_message \"Downloading JDK 25 binary from: $download_url\"\n    curl -L \"$download_url\" -o /tmp/jdk-25.tar.gz\n    mkdir -p \"$JDK_INSTALL_DIR\"\n    tar -xzf /tmp/jdk-25.tar.gz -C \"$JDK_INSTALL_DIR\" --strip-components=1\n\n    # Update PATH to include the new JDK\n    export PATH=\"$JDK_INSTALL_DIR/bin:$PATH\"\n    log_message \"Temurin JDK 25 early access installed successfully.\"\n\n    # Call the function to update PATH after installation\n    update_path_for_jdk25\n\n    # Verify the JDK installation by running a simple Java command\n    verify_jdk_installation\n}\n\n# Updates PATH and JAVA_HOME to prioritize the installed JDK 25 and refreshes the shell environment.\n#\n# Ensures the JDK 25 binary directory is at the front of PATH and sets JAVA_HOME to the JDK 25 installation directory.\n# Refreshes the shell's command lookup table and logs the output of 'java -version' to confirm the correct Java binary is active.\n#\n# Globals:\n#   JDK_INSTALL_DIR - Path to the JDK 25 installation directory.\n#\n# Outputs:\n#   Logs debug messages and the output of 'java -version' to standard output.\n#\n# Example:\n#   update_path_for_jdk25\nupdate_path_for_jdk25() {\n    if [[ \":$PATH:\" != *\":$JDK_INSTALL_DIR/bin:\"* ]]; then\n        export PATH=\"$JDK_INSTALL_DIR/bin:$PATH\"\n        log_message \"Updated PATH to include JDK 25 installation directory.\"\n    fi\n\n    export JAVA_HOME=\"$JDK_INSTALL_DIR\"\n    log_message \"Set JAVA_HOME to JDK 25 installation directory: $JAVA_HOME\"\n\n    # Ensure the current shell session uses the updated PATH\n    hash -r\n    log_message \"Refreshed shell environment to use updated PATH.\"\n\n    # Verify the java command points to the correct binary\n    log_message \"Output of 'java -version' after PATH update:\"\n    java -version 2>&1 | while read -r line; do log_message \"$line\"; done\n}\n\n# Verifies that the installed Temurin JDK 25 binary is present and reports the correct version.\n#\n# Globals:\n# * JDK_INSTALL_DIR: Directory where Temurin JDK 25 is installed.\n#\n# Outputs:\n# * Prints verification status messages to STDOUT.\n#\n# Returns:\n# * Exits with status 1 if verification fails.\n#\n# Example:\n#\n# ```bash\n# verify_jdk_installation\n# ```\nverify_jdk_installation() {\n    echo \"Verifying Temurin JDK 25 installation...\"\n    if \"$JDK_INSTALL_DIR/bin/java\" -version 2>&1 | grep -qE \"version \\\"25\"; then\n        echo \"Temurin JDK 25 installation verified successfully.\"\n    else\n        echo \"Error: Temurin JDK 25 installation verification failed.\"\n        exit 1\n    fi\n}\n\n# Declare the JDK versions you're interested in\n# These are the JDK versions that the script will attempt to install.\ndeclare -a jdk_versions=(\"8\" \"11\" \"17\" \"21\")\n\n# Verify that sdk is on PATH\n# This ensures that the `sdk` command is available before proceeding.\nif ! command -v sdk &>/dev/null; then\n    echo \"Error: sdk is not installed or not in the PATH. Please install SDKMAN and try again.\"\n    exit 1\nfi\n\n# Loop through each JDK version\n# For each version, determine the appropriate identifier and install it using SDKMAN.\nfor version in \"${jdk_versions[@]}\"; do\n    # Define the pattern to match the JDK version in the SDKMAN list\n    pattern=\" $version\\.0.*-tem\"\n\n    # Retrieve the identifier for the JDK version using SDKMAN\n    # The identifier is extracted by listing available JDKs, filtering with grep, and selecting the last field.\n    identifier=$(\n      PAGER=cat sdk list java \\\n        | grep -E -- \"$pattern\" \\\n        | awk '{print $NF}' \\\n        | head -n1\n    )\n\n    # Check if a valid identifier was found\n    if [ -n \"$identifier\" ]; then\n        echo \"Installing JDK version $version with identifier $identifier\"\n        # Install the JDK version using SDKMAN\n        yes | sdk install java \"$identifier\"\n    else\n        # Log a message if no suitable JDK version is found\n        echo \"No suitable JDK version found for $version\"\n    fi\ndone\n\n# Call the function to install Temurin JDK 25\ninstall_temurin_jdk25"
                },
                "codebaseEnabled": true,
                "ragFiles": [
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_vendor/distlib/util.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_vendor\\distlib\\util.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_internal/commands/completion.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_internal\\commands\\completion.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_internal/commands/cache.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_internal\\commands\\cache.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_internal/commands/help.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_internal\\commands\\help.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_internal/commands/inspect.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_internal\\commands\\inspect.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_internal/commands/configuration.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_internal\\commands\\configuration.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_internal/commands/freeze.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_internal\\commands\\freeze.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_internal/commands/uninstall.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_internal\\commands\\uninstall.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/urllib3/contrib/emscripten/fetch.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\urllib3\\contrib\\emscripten\\fetch.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_internal/commands/hash.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_internal\\commands\\hash.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_vendor/rich/default_styles.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_vendor\\rich\\default_styles.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_vendor/certifi/__main__.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_vendor\\certifi\\__main__.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_vendor/cachecontrol/_cmd.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_vendor\\cachecontrol\\_cmd.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_internal/commands/download.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_internal\\commands\\download.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_internal/commands/wheel.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_internal\\commands\\wheel.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/certifi/__main__.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\certifi\\__main__.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_vendor/dependency_groups/_lint_dependency_groups.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_vendor\\dependency_groups\\_lint_dependency_groups.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_internal/commands/lock.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_internal\\commands\\lock.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_vendor/rich/json.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_vendor\\rich\\json.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_vendor/platformdirs/unix.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "install-jdk-versions.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\install-jdk-versions.sh",
                        "sources": []
                    },
                    {
                        "path": "get-jdk-versions.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\get-jdk-versions.sh",
                        "sources": []
                    },
                    {
                        "path": "test-jdk-25.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\test-jdk-25.sh",
                        "sources": []
                    },
                    {
                        "path": "check-env.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\check-env.sh",
                        "sources": []
                    },
                    {
                        "path": "test-pr-builds.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\test-pr-builds.sh",
                        "sources": []
                    },
                    {
                        "path": "find-junit5-prs.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\find-junit5-prs.sh",
                        "sources": []
                    },
                    {
                        "path": "analyze-junit5-prs.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\analyze-junit5-prs.sh",
                        "sources": []
                    },
                    {
                        "path": "data\\consolidated\\failing_prs.json",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\data\\consolidated\\failing_prs.json",
                        "sources": []
                    },
                    {
                        "path": "filtered_prs_prs_gounthar_and_others_2024-12-01_to_2025-02-13.json",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\filtered_prs_prs_gounthar_and_others_2024-12-01_to_2025-02-13.json",
                        "sources": []
                    },
                    {
                        "path": "data\\monthly\\prs_2025_03.json",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\data\\monthly\\prs_2025_03.json",
                        "sources": []
                    },
                    {
                        "path": "run-maven-build.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\run-maven-build.sh",
                        "sources": []
                    },
                    {
                        "path": "compute-stats.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\compute-stats.sh",
                        "sources": []
                    },
                    {
                        "path": "run-gradle-build.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\run-gradle-build.sh",
                        "sources": []
                    },
                    {
                        "path": "update-daily.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\update-daily.sh",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "top-250-plugins.csv",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\top-250-plugins.csv",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "test-jdk-25.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\test-jdk-25.sh",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "run-maven-build.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\run-maven-build.sh",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "run-gradle-build.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\run-gradle-build.sh",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "jdk-25-build-results.csv",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\jdk-25-build-results.csv",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "build-debug.log",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\build-debug.log",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "test-pr-builds.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\test-pr-builds.sh",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "install-jdk-versions.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\install-jdk-versions.sh",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "upload_to_sheets.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\upload_to_sheets.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": ".github/workflows/pr-stats.yml",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\.github\\workflows\\pr-stats.yml",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "README.md",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\README.md",
                        "sources": [
                            "opened_tab"
                        ]
                    }
                ],
                "rerankedFiles": [
                    {
                        "path": "install-jdk-versions.sh",
                        "fsPath": "install-jdk-versions.sh"
                    }
                ],
                "usedFilePaths": [
                    {
                        "path": "install-jdk-versions.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\install-jdk-versions.sh",
                        "sources": [
                            "opened_tab"
                        ],
                        "content": "#!/bin/bash\n\n# ```\nlog_message() {\n    local message=\"$1\"\n    echo \"[DEBUG] $(date '+%Y-%m-%d %H:%M:%S') - $message\"\n}\n\n# Define the JDK installation directory at the beginning of the script\nJDK_INSTALL_DIR=\"$HOME/.jdk-25\"\n\n# Determine the directory of the current script\n# This ensures that the script can locate other scripts or files relative to its own location.\nscript_dir=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" &>/dev/null && pwd)\"\n\n# Check if SDKMAN is installed in common locations\nif [[ ! -s \"$HOME/.sdkman/bin/sdkman-init.sh\" && ! -s \"/usr/local/sdkman/bin/sdkman-init.sh\" ]]; then\n    echo \"SDKMAN is not installed. Attempting to install SDKMAN...\"\n    # Install SDKMAN inline\n    curl -s \"https://get.sdkman.io\" | bash\n\n    # Check if SDKMAN is successfully installed\n    if [[ ! -s \"$HOME/.sdkman/bin/sdkman-init.sh\" && ! -s \"/usr/local/sdkman/bin/sdkman-init.sh\" ]]; then\n        echo \"Failed to install SDKMAN. Please install SDKMAN manually.\"\n        exit 1\n    fi\n\n    echo \"SDKMAN installed successfully.\"\nfi\n\n# Initialize SDKMAN from the appropriate location\nif [[ -s \"$HOME/.sdkman/bin/sdkman-init.sh\" ]]; then\n    source \"$HOME/.sdkman/bin/sdkman-init.sh\"\nelif [[ -s \"/usr/local/sdkman/bin/sdkman-init.sh\" ]]; then\n    source \"/usr/local/sdkman/bin/sdkman-init.sh\"\nfi\n\n# Detects the system architecture and sets the ARCHITECTURE variable to an API-compatible value.\n#\n# Globals:\n#   ARCHITECTURE (set): The detected and mapped architecture string for API use.\n#\n# Outputs:\n#   Logs the detected architecture and errors to standard output.\n#\n# Returns:\n#   Exits with status 1 if the architecture is unsupported or cannot be determined.\n#\n# Example:\n#\n#   set_architecture\n#   # ARCHITECTURE will be set to \"x64\", \"aarch64\", or \"riscv64\" depending on the system.\nset_architecture() {\n    ARCHITECTURE=$(uname -m)\n    log_message \"Detected system architecture: $ARCHITECTURE\"\n\n    # Map architecture to the expected values for the API\n    case \"$ARCHITECTURE\" in\n        x86_64)\n            ARCHITECTURE=\"x64\";;\n        aarch64)\n            ARCHITECTURE=\"aarch64\";;\n        riscv64)\n            ARCHITECTURE=\"riscv64\";;\n        *)\n            log_message \"Error: Unsupported architecture $ARCHITECTURE\"\n            ARCHITECTURE=\"unknown\";;\n    esac\n\n    if [[ \"$ARCHITECTURE\" == \"unknown\" ]]; then\n        log_message \"Error: Unable to determine a valid architecture for the API.\"\n        exit 1\n    fi\n}\n\n# Call set_architecture before any API calls\nset_architecture\n\n# Retrieves the latest available Temurin JDK 25 early access version string for the current architecture from the Adoptium API.\n#\n# Returns:\n#\n# * The semantic version string of the latest JDK 25 early access release, or \"unknown\" if retrieval fails.\n#\n# Example:\n#\n# ```bash\n# latest_version=$(get_latest_jdk25_version)\n# echo \"Latest JDK 25 version: $latest_version\"\n# ```\nget_latest_jdk25_version() {\n    local api_url=\"https://api.adoptium.net/v3/assets/feature_releases/25/ea?architecture=$ARCHITECTURE&heap_size=normal&image_type=jdk&jvm_impl=hotspot&os=linux&page_size=1&project=jdk&sort_order=DESC&vendor=eclipse\"\n    log_message \"Fetching latest JDK 25 version from API: $api_url\"\n\n    # Fetch the version data from the API\n    local version_data\n    version_data=$(curl -s \"$api_url\" | jq -r '.[0].version_data.semver')\n\n    if [[ -z \"$version_data\" || \"$version_data\" == \"null\" ]]; then\n        log_message \"Error: Unable to retrieve the latest JDK 25 version from the API.\"\n        echo \"unknown\"\n    else\n        echo \"$version_data\"\n    fi\n}\n\n# Checks if the installed Temurin JDK 25 is up-to-date by comparing the local version with the latest available version from the Adoptium API.\n#\n# Returns:\n#\n# * 0 if the installed JDK 25 version matches the latest available version.\n# * 1 if JDK 25 is not installed or is outdated.\n#\n# Example:\n#\n# ```bash\n# if is_jdk25_up_to_date; then\n#   echo \"JDK 25 is current.\"\n# else\n#   echo \"JDK 25 needs to be installed or updated.\"\n# fi\n# ```\nis_jdk25_up_to_date() {\n    log_message \"Checking if JDK 25 is up-to-date...\"\n    local installed_version_full\n    local installed_version_short\n    local latest_version_full\n    local latest_version_short\n\n    # Explicitly invoke the java binary from the JDK 25 installation directory\n    if [[ -x \"$JDK_INSTALL_DIR/bin/java\" ]]; then\n        log_message \"Output of '$JDK_INSTALL_DIR/bin/java -version':\"\n        local java_version_output\n        java_version_output=$(\"$JDK_INSTALL_DIR/bin/java\" -version 2>&1)\n        echo \"$java_version_output\" | while read -r line; do log_message \"$line\"; done\n\n        # Extract version from the Runtime Environment line (e.g., Temurin-25+20...)\n        # Use ERE for clarity and correct matching of digits+digits\n        installed_version_full=$(echo \"$java_version_output\" | grep 'OpenJDK Runtime Environment' | sed -E -n 's/.*Temurin-([0-9]+)\\+([0-9]+).*/\\1+\\2/p')\n        log_message \"Detected installed JDK 25 full version string: $installed_version_full\"\n\n        if [[ -z \"$installed_version_full\" ]]; then\n             log_message \"Could not extract full version string from installed JDK.\"\n             # Fallback to simpler version detection if full string extraction fails\n             installed_version_short=$(\"$JDK_INSTALL_DIR/bin/java\" -version 2>&1 | grep -oE '\"25[^\"]*\"' | tr -d '\"')\n             log_message \"Fallback: Detected installed JDK 25 short version: $installed_version_short\"\n        else\n            # Use the extracted full version for comparison\n            installed_version_short=\"$installed_version_full\"\n        fi\n\n    else\n        log_message \"No JDK 25 version is currently installed.\"\n        return 1\n    fi\n\n    # Get the latest version of JDK 25 from the API\n    latest_version_full=$(get_latest_jdk25_version)\n    log_message \"Latest available JDK 25 version from API: $latest_version_full\"\n\n    # Extract comparable part from API version (e.g., 25+20)\n    # Use ERE for clarity and correct matching of digits+digits from API string\n    latest_version_short=$(echo \"$latest_version_full\" | sed -E -n 's/([0-9]+)\\.[0-9]+\\.[0-9]+-beta\\+([0-9]+)\\..*/\\1+\\2/p')\n    log_message \"Extracted comparable latest version: $latest_version_short\"\n\n    if [[ -z \"$latest_version_short\" ]]; then\n        log_message \"Could not extract comparable version string from API version.\"\n        # Fallback to comparing full API string if extraction fails\n        latest_version_short=\"$latest_version_full\"\n    fi\n\n    log_message \"Comparing installed version '$installed_version_short' with latest version '$latest_version_short'\"\n\n    if [[ \"$installed_version_short\" == \"$latest_version_short\" ]]; then\n        log_message \"JDK 25 is up-to-date (version $installed_version_full). Skipping installation.\"\n        return 0\n    else\n        log_message \"Installed JDK 25 version ($installed_version_full) is not up-to-date. Latest version is $latest_version_full.\"\n        return 1\n    fi\n}\n\n# Downloads and installs the latest Temurin JDK 25 early access binary, updating environment variables and verifying installation.\n#\n# Globals:\n#   JDK_INSTALL_DIR: Directory where JDK 25 will be installed.\n#   ARCHITECTURE: System architecture string for API queries.\n#\n# Outputs:\n#   Logs progress and errors to standard output.\n#\n# Example:\n#\n#   install_temurin_jdk25\n#   # Installs or updates Temurin JDK 25 early access in $HOME/.jdk-25 and updates PATH and JAVA_HOME.\ninstall_temurin_jdk25() {\n    log_message \"Starting installation of Temurin JDK 25...\"\n    if is_jdk25_up_to_date; then\n        log_message \"Skipping installation as JDK 25 is already up-to-date.\"\n        return\n    fi\n\n    # Update the installation directory to a user-writable location\n    log_message \"JDK installation directory set to: $JDK_INSTALL_DIR\"\n\n    local api_url=\"https://api.adoptium.net/v3/assets/feature_releases/25/ea?architecture=$ARCHITECTURE&heap_size=normal&image_type=jdk&jvm_impl=hotspot&os=linux&page_size=1&project=jdk&sort_order=DESC&vendor=eclipse\"\n    local download_url\n\n    # Fetch the latest JDK 25 early access binary URL\n    log_message \"Fetching latest JDK 25 binary URL from API: $api_url\"\n    download_url=$(curl -s \"$api_url\" | jq -r '.[0].binaries[0].package.link')\n\n    if [ -z \"$download_url\" ]; then\n        log_message \"Error: Unable to fetch Temurin JDK 25 early access binary URL.\"\n        exit 1\n    fi\n\n    log_message \"Downloading JDK 25 binary from: $download_url\"\n    curl -L \"$download_url\" -o /tmp/jdk-25.tar.gz\n    mkdir -p \"$JDK_INSTALL_DIR\"\n    tar -xzf /tmp/jdk-25.tar.gz -C \"$JDK_INSTALL_DIR\" --strip-components=1\n\n    # Update PATH to include the new JDK\n    export PATH=\"$JDK_INSTALL_DIR/bin:$PATH\"\n    log_message \"Temurin JDK 25 early access installed successfully.\"\n\n    # Call the function to update PATH after installation\n    update_path_for_jdk25\n\n    # Verify the JDK installation by running a simple Java command\n    verify_jdk_installation\n}\n\n# Updates PATH and JAVA_HOME to prioritize the installed JDK 25 and refreshes the shell environment.\n#\n# Ensures the JDK 25 binary directory is at the front of PATH and sets JAVA_HOME to the JDK 25 installation directory.\n# Refreshes the shell's command lookup table and logs the output of 'java -version' to confirm the correct Java binary is active.\n#\n# Globals:\n#   JDK_INSTALL_DIR - Path to the JDK 25 installation directory.\n#\n# Outputs:\n#   Logs debug messages and the output of 'java -version' to standard output.\n#\n# Example:\n#   update_path_for_jdk25\nupdate_path_for_jdk25() {\n    if [[ \":$PATH:\" != *\":$JDK_INSTALL_DIR/bin:\"* ]]; then\n        export PATH=\"$JDK_INSTALL_DIR/bin:$PATH\"\n        log_message \"Updated PATH to include JDK 25 installation directory.\"\n    fi\n\n    export JAVA_HOME=\"$JDK_INSTALL_DIR\"\n    log_message \"Set JAVA_HOME to JDK 25 installation directory: $JAVA_HOME\"\n\n    # Ensure the current shell session uses the updated PATH\n    hash -r\n    log_message \"Refreshed shell environment to use updated PATH.\"\n\n    # Verify the java command points to the correct binary\n    log_message \"Output of 'java -version' after PATH update:\"\n    java -version 2>&1 | while read -r line; do log_message \"$line\"; done\n}\n\n# Verifies that the installed Temurin JDK 25 binary is present and reports the correct version.\n#\n# Globals:\n# * JDK_INSTALL_DIR: Directory where Temurin JDK 25 is installed.\n#\n# Outputs:\n# * Prints verification status messages to STDOUT.\n#\n# Returns:\n# * Exits with status 1 if verification fails.\n#\n# Example:\n#\n# ```bash\n# verify_jdk_installation\n# ```\nverify_jdk_installation() {\n    echo \"Verifying Temurin JDK 25 installation...\"\n    if \"$JDK_INSTALL_DIR/bin/java\" -version 2>&1 | grep -qE \"version \\\"25\"; then\n        echo \"Temurin JDK 25 installation verified successfully.\"\n    else\n        echo \"Error: Temurin JDK 25 installation verification failed.\"\n        exit 1\n    fi\n}\n\n# Declare the JDK versions you're interested in\n# These are the JDK versions that the script will attempt to install.\ndeclare -a jdk_versions=(\"8\" \"11\" \"17\" \"21\")\n\n# Verify that sdk is on PATH\n# This ensures that the `sdk` command is available before proceeding.\nif ! command -v sdk &>/dev/null; then\n    echo \"Error: sdk is not installed or not in the PATH. Please install SDKMAN and try again.\"\n    exit 1\nfi\n\n# Loop through each JDK version\n# For each version, determine the appropriate identifier and install it using SDKMAN.\nfor version in \"${jdk_versions[@]}\"; do\n    # Define the pattern to match the JDK version in the SDKMAN list\n    pattern=\" $version\\.0.*-tem\"\n\n    # Retrieve the identifier for the JDK version using SDKMAN\n    # The identifier is extracted by listing available JDKs, filtering with grep, and selecting the last field.\n    identifier=$(\n      PAGER=cat sdk list java \\\n        | grep -E -- \"$pattern\" \\\n        | awk '{print $NF}' \\\n        | head -n1\n    )\n\n    # Check if a valid identifier was found\n    if [ -n \"$identifier\" ]; then\n        echo \"Installing JDK version $version with identifier $identifier\"\n        # Install the JDK version using SDKMAN\n        yes | sdk install java \"$identifier\"\n    else\n        # Log a message if no suitable JDK version is found\n        echo \"No suitable JDK version found for $version\"\n    fi\ndone\n\n# Call the function to install Temurin JDK 25\ninstall_temurin_jdk25"
                    }
                ]
            },
            "createdAt": 1746462285619,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "Comment on lines +123 to +181"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "️ Refactor suggestion"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "Improve version extraction and unknown handling The sed patterns for installed_version_full and latest_version_short are brittle, and \"unknown\" from the API isn't handled distinctly. Consider:"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "Early-return when latest_version_full == \"unknown\"."
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "Consolidating to a single robust extraction approach or using a semantic version parser."
                            }
                        ]
                    },
                    {
                        "type": "codeBlock",
                        "attrs": {
                            "language": null
                        },
                        "content": [
                            {
                                "type": "text",
                                "text": "-    latest_version_full=$(get_latest_jdk25_version)\n+    latest_version_full=$(get_latest_jdk25_version)\n+    if [[ \"$latest_version_full\" == \"unknown\" ]]; then\n+        log_message \"Latest version unknown; forcing update.\"\n+        return 1\n+    fi\n"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "a22574ff-092b-45e1-aa5b-ddbacee0a52a",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "The code snippet provided focuses on improving the version extraction and handling of \"unknown\" responses from the API in a shell script that manages JDK installations. Here's a detailed analysis and refactor suggestion for the lines +123 to +181:\n\n### Current Implementation\n\n1. **Version Extraction**:\n   - The script uses `sed` to extract version numbers from the output of the `java -version` command and the API response.\n   - The extraction patterns are specific and may not handle all possible version formats robustly.\n\n2. **Handling \"unknown\" Versions**:\n   - If the API returns \"unknown\" for the latest version, the script logs a message and forces an update.\n\n### Refactor Suggestions\n\n1. **Early Return for \"unknown\"**:\n   - Implement an early return when `latest_version_full` is \"unknown\" to avoid unnecessary processing.\n\n2. **Robust Version Extraction**:\n   - Consider using a semantic version parser or a more flexible pattern to handle various version formats.\n   - Consolidate the extraction logic to reduce redundancy and improve maintainability.\n\n### Refactored Code\n\n```bash\n# Fetch the latest version and handle \"unknown\" early\nlatest_version_full=$(get_latest_jdk25_version)\nif [[ \"$latest_version_full\" == \"unknown\" ]]; then\n    log_message \"Latest version unknown; forcing update.\"\n    return 1\nfi\n\n# Extract comparable version parts using a more robust approach\nextract_version_parts() {\n    local version_string=\"$1\"\n    # Use a more flexible pattern or a semantic version parser if available\n    echo \"$version_string\" | sed -E -n 's/([0-9]+)\\.[0-9]+\\.[0-9]+-beta\\+([0-9]+)\\..*/\\1+\\2/p'\n}\n\n# Extract installed and latest version parts\ninstalled_version_short=$(extract_version_parts \"$installed_version_full\")\nlatest_version_short=$(extract_version_parts \"$latest_version_full\")\n\nlog_message \"Comparing installed version '$installed_version_short' with latest version '$latest_version_short'\"\n\nif [[ \"$installed_version_short\" == \"$latest_version_short\" ]]; then\n    log_message \"JDK 25 is up-to-date (version $installed_version_full). Skipping installation.\"\n    return 0\nelse\n    log_message \"Installed JDK 25 version ($installed_version_full) is not up-to-date. Latest version is $latest_version_full.\"\n    return 1\nfi\n```\n\n### Benefits of Refactoring\n\n- **Early Exit**: Handling \"unknown\" versions early reduces unnecessary processing and potential errors.\n- **Maintainability**: Consolidating version extraction logic makes the script easier to maintain and extend.\n- **Robustness**: Using a more flexible pattern or a semantic version parser can handle a wider range of version formats, reducing the risk of extraction failures."
                }
            ],
            "context": {
                "currentFile": {
                    "path": "install-jdk-versions.sh",
                    "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\install-jdk-versions.sh",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "#!/bin/bash\n\n# ```\nlog_message() {\n    local message=\"$1\"\n    echo \"[DEBUG] $(date '+%Y-%m-%d %H:%M:%S') - $message\"\n}\n\n# Define the JDK installation directory at the beginning of the script\nJDK_INSTALL_DIR=\"$HOME/.jdk-25\"\n\n# Determine the directory of the current script\n# This ensures that the script can locate other scripts or files relative to its own location.\nscript_dir=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" &>/dev/null && pwd)\"\n\n# Check if SDKMAN is installed in common locations\nif [[ ! -s \"$HOME/.sdkman/bin/sdkman-init.sh\" && ! -s \"/usr/local/sdkman/bin/sdkman-init.sh\" ]]; then\n    echo \"SDKMAN is not installed. Attempting to install SDKMAN...\"\n    # Install SDKMAN inline\n    curl -s \"https://get.sdkman.io\" | bash\n\n    # Check if SDKMAN is successfully installed\n    if [[ ! -s \"$HOME/.sdkman/bin/sdkman-init.sh\" && ! -s \"/usr/local/sdkman/bin/sdkman-init.sh\" ]]; then\n        echo \"Failed to install SDKMAN. Please install SDKMAN manually.\"\n        exit 1\n    fi\n\n    echo \"SDKMAN installed successfully.\"\nfi\n\n# Initialize SDKMAN from the appropriate location\nif [[ -s \"$HOME/.sdkman/bin/sdkman-init.sh\" ]]; then\n    source \"$HOME/.sdkman/bin/sdkman-init.sh\"\nelif [[ -s \"/usr/local/sdkman/bin/sdkman-init.sh\" ]]; then\n    source \"/usr/local/sdkman/bin/sdkman-init.sh\"\nfi\n\n# Detects the system architecture and sets the ARCHITECTURE variable to an API-compatible value.\n#\n# Globals:\n#   ARCHITECTURE (set): The detected and mapped architecture string for API use.\n#\n# Outputs:\n#   Logs the detected architecture and errors to standard output.\n#\n# Returns:\n#   Exits with status 1 if the architecture is unsupported or cannot be determined.\n#\n# Example:\n#\n#   set_architecture\n#   # ARCHITECTURE will be set to \"x64\", \"aarch64\", or \"riscv64\" depending on the system.\nset_architecture() {\n    ARCHITECTURE=$(uname -m)\n    log_message \"Detected system architecture: $ARCHITECTURE\"\n\n    # Map architecture to the expected values for the API\n    case \"$ARCHITECTURE\" in\n        x86_64)\n            ARCHITECTURE=\"x64\";;\n        aarch64)\n            ARCHITECTURE=\"aarch64\";;\n        riscv64)\n            ARCHITECTURE=\"riscv64\";;\n        *)\n            log_message \"Error: Unsupported architecture $ARCHITECTURE\"\n            ARCHITECTURE=\"unknown\";;\n    esac\n\n    if [[ \"$ARCHITECTURE\" == \"unknown\" ]]; then\n        log_message \"Error: Unable to determine a valid architecture for the API.\"\n        exit 1\n    fi\n}\n\n# Call set_architecture before any API calls\nset_architecture\n\n# Retrieves the latest available Temurin JDK 25 early access version string for the current architecture from the Adoptium API.\n#\n# Returns:\n#\n# * The semantic version string of the latest JDK 25 early access release, or \"unknown\" if retrieval fails.\n#\n# Example:\n#\n# ```bash\n# latest_version=$(get_latest_jdk25_version)\n# echo \"Latest JDK 25 version: $latest_version\"\n# ```\nget_latest_jdk25_version() {\n    local api_url=\"https://api.adoptium.net/v3/assets/feature_releases/25/ea?architecture=$ARCHITECTURE&heap_size=normal&image_type=jdk&jvm_impl=hotspot&os=linux&page_size=1&project=jdk&sort_order=DESC&vendor=eclipse\"\n    log_message \"Fetching latest JDK 25 version from API: $api_url\"\n\n    # Fetch the version data from the API\n    local version_data\n    version_data=$(curl -s \"$api_url\" | jq -r '.[0].version_data.semver')\n\n    if [[ -z \"$version_data\" || \"$version_data\" == \"null\" ]]; then\n        log_message \"Error: Unable to retrieve the latest JDK 25 version from the API.\"\n        echo \"unknown\"\n    else\n        echo \"$version_data\"\n    fi\n}\n\n# Checks if the installed Temurin JDK 25 is up-to-date by comparing the local version with the latest available version from the Adoptium API.\n#\n# Returns:\n#\n# * 0 if the installed JDK 25 version matches the latest available version.\n# * 1 if JDK 25 is not installed or is outdated.\n#\n# Example:\n#\n# ```bash\n# if is_jdk25_up_to_date; then\n#   echo \"JDK 25 is current.\"\n# else\n#   echo \"JDK 25 needs to be installed or updated.\"\n# fi\n# ```\nis_jdk25_up_to_date() {\n    log_message \"Checking if JDK 25 is up-to-date...\"\n    local installed_version_full\n    local installed_version_short\n    local latest_version_full\n    local latest_version_short\n\n    # Explicitly invoke the java binary from the JDK 25 installation directory\n    if [[ -x \"$JDK_INSTALL_DIR/bin/java\" ]]; then\n        log_message \"Output of '$JDK_INSTALL_DIR/bin/java -version':\"\n        local java_version_output\n        java_version_output=$(\"$JDK_INSTALL_DIR/bin/java\" -version 2>&1)\n        echo \"$java_version_output\" | while read -r line; do log_message \"$line\"; done\n\n        # Extract version from the Runtime Environment line (e.g., Temurin-25+20...)\n        # Use ERE for clarity and correct matching of digits+digits\n        installed_version_full=$(echo \"$java_version_output\" | grep 'OpenJDK Runtime Environment' | sed -E -n 's/.*Temurin-([0-9]+)\\+([0-9]+).*/\\1+\\2/p')\n        log_message \"Detected installed JDK 25 full version string: $installed_version_full\"\n\n        if [[ -z \"$installed_version_full\" ]]; then\n             log_message \"Could not extract full version string from installed JDK.\"\n             # Fallback to simpler version detection if full string extraction fails\n             installed_version_short=$(\"$JDK_INSTALL_DIR/bin/java\" -version 2>&1 | grep -oE '\"25[^\"]*\"' | tr -d '\"')\n             log_message \"Fallback: Detected installed JDK 25 short version: $installed_version_short\"\n        else\n            # Use the extracted full version for comparison\n            installed_version_short=\"$installed_version_full\"\n        fi\n\n    else\n        log_message \"No JDK 25 version is currently installed.\"\n        return 1\n    fi\n\n    # Get the latest version of JDK 25 from the API\n    latest_version_full=$(get_latest_jdk25_version)\n    log_message \"Latest available JDK 25 version from API: $latest_version_full\"\n\n    # Extract comparable part from API version (e.g., 25+20)\n    # Use ERE for clarity and correct matching of digits+digits from API string\n    latest_version_short=$(echo \"$latest_version_full\" | sed -E -n 's/([0-9]+)\\.[0-9]+\\.[0-9]+-beta\\+([0-9]+)\\..*/\\1+\\2/p')\n    log_message \"Extracted comparable latest version: $latest_version_short\"\n\n    if [[ -z \"$latest_version_short\" ]]; then\n        log_message \"Could not extract comparable version string from API version.\"\n        # Fallback to comparing full API string if extraction fails\n        latest_version_short=\"$latest_version_full\"\n    fi\n\n    log_message \"Comparing installed version '$installed_version_short' with latest version '$latest_version_short'\"\n\n    if [[ \"$installed_version_short\" == \"$latest_version_short\" ]]; then\n        log_message \"JDK 25 is up-to-date (version $installed_version_full). Skipping installation.\"\n        return 0\n    else\n        log_message \"Installed JDK 25 version ($installed_version_full) is not up-to-date. Latest version is $latest_version_full.\"\n        return 1\n    fi\n}\n\n# Downloads and installs the latest Temurin JDK 25 early access binary, updating environment variables and verifying installation.\n#\n# Globals:\n#   JDK_INSTALL_DIR: Directory where JDK 25 will be installed.\n#   ARCHITECTURE: System architecture string for API queries.\n#\n# Outputs:\n#   Logs progress and errors to standard output.\n#\n# Example:\n#\n#   install_temurin_jdk25\n#   # Installs or updates Temurin JDK 25 early access in $HOME/.jdk-25 and updates PATH and JAVA_HOME.\ninstall_temurin_jdk25() {\n    log_message \"Starting installation of Temurin JDK 25...\"\n    if is_jdk25_up_to_date; then\n        log_message \"Skipping installation as JDK 25 is already up-to-date.\"\n        return\n    fi\n\n    # Update the installation directory to a user-writable location\n    log_message \"JDK installation directory set to: $JDK_INSTALL_DIR\"\n\n    local api_url=\"https://api.adoptium.net/v3/assets/feature_releases/25/ea?architecture=$ARCHITECTURE&heap_size=normal&image_type=jdk&jvm_impl=hotspot&os=linux&page_size=1&project=jdk&sort_order=DESC&vendor=eclipse\"\n    local download_url\n\n    # Fetch the latest JDK 25 early access binary URL\n    log_message \"Fetching latest JDK 25 binary URL from API: $api_url\"\n    download_url=$(curl -s \"$api_url\" | jq -r '.[0].binaries[0].package.link')\n\n    if [ -z \"$download_url\" ]; then\n        log_message \"Error: Unable to fetch Temurin JDK 25 early access binary URL.\"\n        exit 1\n    fi\n\n    log_message \"Downloading JDK 25 binary from: $download_url\"\n    curl -L \"$download_url\" -o /tmp/jdk-25.tar.gz\n    mkdir -p \"$JDK_INSTALL_DIR\"\n    tar -xzf /tmp/jdk-25.tar.gz -C \"$JDK_INSTALL_DIR\" --strip-components=1\n\n    # Update PATH to include the new JDK\n    export PATH=\"$JDK_INSTALL_DIR/bin:$PATH\"\n    log_message \"Temurin JDK 25 early access installed successfully.\"\n\n    # Call the function to update PATH after installation\n    update_path_for_jdk25\n\n    # Verify the JDK installation by running a simple Java command\n    verify_jdk_installation\n}\n\n# Updates PATH and JAVA_HOME to prioritize the installed JDK 25 and refreshes the shell environment.\n#\n# Ensures the JDK 25 binary directory is at the front of PATH and sets JAVA_HOME to the JDK 25 installation directory.\n# Refreshes the shell's command lookup table and logs the output of 'java -version' to confirm the correct Java binary is active.\n#\n# Globals:\n#   JDK_INSTALL_DIR - Path to the JDK 25 installation directory.\n#\n# Outputs:\n#   Logs debug messages and the output of 'java -version' to standard output.\n#\n# Example:\n#   update_path_for_jdk25\nupdate_path_for_jdk25() {\n    if [[ \":$PATH:\" != *\":$JDK_INSTALL_DIR/bin:\"* ]]; then\n        export PATH=\"$JDK_INSTALL_DIR/bin:$PATH\"\n        log_message \"Updated PATH to include JDK 25 installation directory.\"\n    fi\n\n    export JAVA_HOME=\"$JDK_INSTALL_DIR\"\n    log_message \"Set JAVA_HOME to JDK 25 installation directory: $JAVA_HOME\"\n\n    # Ensure the current shell session uses the updated PATH\n    hash -r\n    log_message \"Refreshed shell environment to use updated PATH.\"\n\n    # Verify the java command points to the correct binary\n    log_message \"Output of 'java -version' after PATH update:\"\n    java -version 2>&1 | while read -r line; do log_message \"$line\"; done\n}\n\n# Verifies that the installed Temurin JDK 25 binary is present and reports the correct version.\n#\n# Globals:\n# * JDK_INSTALL_DIR: Directory where Temurin JDK 25 is installed.\n#\n# Outputs:\n# * Prints verification status messages to STDOUT.\n#\n# Returns:\n# * Exits with status 1 if verification fails.\n#\n# Example:\n#\n# ```bash\n# verify_jdk_installation\n# ```\nverify_jdk_installation() {\n    echo \"Verifying Temurin JDK 25 installation...\"\n    if \"$JDK_INSTALL_DIR/bin/java\" -version 2>&1 | grep -qE \"version \\\"25\"; then\n        echo \"Temurin JDK 25 installation verified successfully.\"\n    else\n        echo \"Error: Temurin JDK 25 installation verification failed.\"\n        exit 1\n    fi\n}\n\n# Declare the JDK versions you're interested in\n# These are the JDK versions that the script will attempt to install.\ndeclare -a jdk_versions=(\"8\" \"11\" \"17\" \"21\")\n\n# Verify that sdk is on PATH\n# This ensures that the `sdk` command is available before proceeding.\nif ! command -v sdk &>/dev/null; then\n    echo \"Error: sdk is not installed or not in the PATH. Please install SDKMAN and try again.\"\n    exit 1\nfi\n\n# Loop through each JDK version\n# For each version, determine the appropriate identifier and install it using SDKMAN.\nfor version in \"${jdk_versions[@]}\"; do\n    # Define the pattern to match the JDK version in the SDKMAN list\n    pattern=\" $version\\.0.*-tem\"\n\n    # Retrieve the identifier for the JDK version using SDKMAN\n    # The identifier is extracted by listing available JDKs, filtering with grep, and selecting the last field.\n    identifier=$(\n      PAGER=cat sdk list java \\\n        | grep -E -- \"$pattern\" \\\n        | awk '{print $NF}' \\\n        | head -n1\n    )\n\n    # Check if a valid identifier was found\n    if [ -n \"$identifier\" ]; then\n        echo \"Installing JDK version $version with identifier $identifier\"\n        # Install the JDK version using SDKMAN\n        yes | sdk install java \"$identifier\"\n    else\n        # Log a message if no suitable JDK version is found\n        echo \"No suitable JDK version found for $version\"\n    fi\ndone\n\n# Call the function to install Temurin JDK 25\ninstall_temurin_jdk25"
                },
                "codebaseEnabled": true,
                "ragFiles": [
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_vendor/distlib/util.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_vendor\\distlib\\util.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_internal/commands/completion.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_internal\\commands\\completion.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_internal/commands/cache.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_internal\\commands\\cache.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_internal/commands/help.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_internal\\commands\\help.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_internal/commands/inspect.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_internal\\commands\\inspect.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_internal/commands/configuration.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_internal\\commands\\configuration.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_internal/commands/freeze.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_internal\\commands\\freeze.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_internal/commands/uninstall.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_internal\\commands\\uninstall.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/urllib3/contrib/emscripten/fetch.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\urllib3\\contrib\\emscripten\\fetch.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_internal/commands/hash.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_internal\\commands\\hash.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_vendor/rich/default_styles.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_vendor\\rich\\default_styles.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_vendor/certifi/__main__.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_vendor\\certifi\\__main__.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_vendor/cachecontrol/_cmd.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_vendor\\cachecontrol\\_cmd.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_internal/commands/download.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_internal\\commands\\download.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_internal/commands/wheel.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_internal\\commands\\wheel.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/certifi/__main__.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\certifi\\__main__.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_vendor/dependency_groups/_lint_dependency_groups.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_vendor\\dependency_groups\\_lint_dependency_groups.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_internal/commands/lock.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_internal\\commands\\lock.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_vendor/rich/json.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_vendor\\rich\\json.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "venv/lib/python3.13/site-packages/pip/_vendor/platformdirs/unix.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\venv\\lib\\python3.13\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "install-jdk-versions.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\install-jdk-versions.sh",
                        "sources": []
                    },
                    {
                        "path": "get-jdk-versions.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\get-jdk-versions.sh",
                        "sources": []
                    },
                    {
                        "path": "test-jdk-25.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\test-jdk-25.sh",
                        "sources": []
                    },
                    {
                        "path": "check-env.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\check-env.sh",
                        "sources": []
                    },
                    {
                        "path": "test-pr-builds.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\test-pr-builds.sh",
                        "sources": []
                    },
                    {
                        "path": "find-junit5-prs.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\find-junit5-prs.sh",
                        "sources": []
                    },
                    {
                        "path": "analyze-junit5-prs.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\analyze-junit5-prs.sh",
                        "sources": []
                    },
                    {
                        "path": "data\\consolidated\\failing_prs.json",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\data\\consolidated\\failing_prs.json",
                        "sources": []
                    },
                    {
                        "path": "filtered_prs_prs_gounthar_and_others_2024-12-01_to_2025-02-13.json",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\filtered_prs_prs_gounthar_and_others_2024-12-01_to_2025-02-13.json",
                        "sources": []
                    },
                    {
                        "path": "data\\monthly\\prs_2025_03.json",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\data\\monthly\\prs_2025_03.json",
                        "sources": []
                    },
                    {
                        "path": "run-maven-build.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\run-maven-build.sh",
                        "sources": []
                    },
                    {
                        "path": "compute-stats.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\compute-stats.sh",
                        "sources": []
                    },
                    {
                        "path": "run-gradle-build.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\run-gradle-build.sh",
                        "sources": []
                    },
                    {
                        "path": "update-daily.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\update-daily.sh",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "top-250-plugins.csv",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\top-250-plugins.csv",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "test-jdk-25.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\test-jdk-25.sh",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "run-maven-build.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\run-maven-build.sh",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "run-gradle-build.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\run-gradle-build.sh",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "jdk-25-build-results.csv",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\jdk-25-build-results.csv",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "build-debug.log",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\build-debug.log",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "test-pr-builds.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\test-pr-builds.sh",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "install-jdk-versions.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\install-jdk-versions.sh",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "upload_to_sheets.py",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\upload_to_sheets.py",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": ".github/workflows/pr-stats.yml",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\.github\\workflows\\pr-stats.yml",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "README.md",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\README.md",
                        "sources": [
                            "opened_tab"
                        ]
                    }
                ],
                "rerankedFiles": [
                    {
                        "path": "install-jdk-versions.sh",
                        "fsPath": "install-jdk-versions.sh"
                    }
                ],
                "usedFilePaths": [
                    {
                        "path": "install-jdk-versions.sh",
                        "fsPath": "C:\\support\\users\\dev\\jenkins\\alpha-omega\\alpha-omega-stats\\install-jdk-versions.sh",
                        "sources": [
                            "opened_tab"
                        ],
                        "content": "#!/bin/bash\n\n# ```\nlog_message() {\n    local message=\"$1\"\n    echo \"[DEBUG] $(date '+%Y-%m-%d %H:%M:%S') - $message\"\n}\n\n# Define the JDK installation directory at the beginning of the script\nJDK_INSTALL_DIR=\"$HOME/.jdk-25\"\n\n# Determine the directory of the current script\n# This ensures that the script can locate other scripts or files relative to its own location.\nscript_dir=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" &>/dev/null && pwd)\"\n\n# Check if SDKMAN is installed in common locations\nif [[ ! -s \"$HOME/.sdkman/bin/sdkman-init.sh\" && ! -s \"/usr/local/sdkman/bin/sdkman-init.sh\" ]]; then\n    echo \"SDKMAN is not installed. Attempting to install SDKMAN...\"\n    # Install SDKMAN inline\n    curl -s \"https://get.sdkman.io\" | bash\n\n    # Check if SDKMAN is successfully installed\n    if [[ ! -s \"$HOME/.sdkman/bin/sdkman-init.sh\" && ! -s \"/usr/local/sdkman/bin/sdkman-init.sh\" ]]; then\n        echo \"Failed to install SDKMAN. Please install SDKMAN manually.\"\n        exit 1\n    fi\n\n    echo \"SDKMAN installed successfully.\"\nfi\n\n# Initialize SDKMAN from the appropriate location\nif [[ -s \"$HOME/.sdkman/bin/sdkman-init.sh\" ]]; then\n    source \"$HOME/.sdkman/bin/sdkman-init.sh\"\nelif [[ -s \"/usr/local/sdkman/bin/sdkman-init.sh\" ]]; then\n    source \"/usr/local/sdkman/bin/sdkman-init.sh\"\nfi\n\n# Detects the system architecture and sets the ARCHITECTURE variable to an API-compatible value.\n#\n# Globals:\n#   ARCHITECTURE (set): The detected and mapped architecture string for API use.\n#\n# Outputs:\n#   Logs the detected architecture and errors to standard output.\n#\n# Returns:\n#   Exits with status 1 if the architecture is unsupported or cannot be determined.\n#\n# Example:\n#\n#   set_architecture\n#   # ARCHITECTURE will be set to \"x64\", \"aarch64\", or \"riscv64\" depending on the system.\nset_architecture() {\n    ARCHITECTURE=$(uname -m)\n    log_message \"Detected system architecture: $ARCHITECTURE\"\n\n    # Map architecture to the expected values for the API\n    case \"$ARCHITECTURE\" in\n        x86_64)\n            ARCHITECTURE=\"x64\";;\n        aarch64)\n            ARCHITECTURE=\"aarch64\";;\n        riscv64)\n            ARCHITECTURE=\"riscv64\";;\n        *)\n            log_message \"Error: Unsupported architecture $ARCHITECTURE\"\n            ARCHITECTURE=\"unknown\";;\n    esac\n\n    if [[ \"$ARCHITECTURE\" == \"unknown\" ]]; then\n        log_message \"Error: Unable to determine a valid architecture for the API.\"\n        exit 1\n    fi\n}\n\n# Call set_architecture before any API calls\nset_architecture\n\n# Retrieves the latest available Temurin JDK 25 early access version string for the current architecture from the Adoptium API.\n#\n# Returns:\n#\n# * The semantic version string of the latest JDK 25 early access release, or \"unknown\" if retrieval fails.\n#\n# Example:\n#\n# ```bash\n# latest_version=$(get_latest_jdk25_version)\n# echo \"Latest JDK 25 version: $latest_version\"\n# ```\nget_latest_jdk25_version() {\n    local api_url=\"https://api.adoptium.net/v3/assets/feature_releases/25/ea?architecture=$ARCHITECTURE&heap_size=normal&image_type=jdk&jvm_impl=hotspot&os=linux&page_size=1&project=jdk&sort_order=DESC&vendor=eclipse\"\n    log_message \"Fetching latest JDK 25 version from API: $api_url\"\n\n    # Fetch the version data from the API\n    local version_data\n    version_data=$(curl -s \"$api_url\" | jq -r '.[0].version_data.semver')\n\n    if [[ -z \"$version_data\" || \"$version_data\" == \"null\" ]]; then\n        log_message \"Error: Unable to retrieve the latest JDK 25 version from the API.\"\n        echo \"unknown\"\n    else\n        echo \"$version_data\"\n    fi\n}\n\n# Checks if the installed Temurin JDK 25 is up-to-date by comparing the local version with the latest available version from the Adoptium API.\n#\n# Returns:\n#\n# * 0 if the installed JDK 25 version matches the latest available version.\n# * 1 if JDK 25 is not installed or is outdated.\n#\n# Example:\n#\n# ```bash\n# if is_jdk25_up_to_date; then\n#   echo \"JDK 25 is current.\"\n# else\n#   echo \"JDK 25 needs to be installed or updated.\"\n# fi\n# ```\nis_jdk25_up_to_date() {\n    log_message \"Checking if JDK 25 is up-to-date...\"\n    local installed_version_full\n    local installed_version_short\n    local latest_version_full\n    local latest_version_short\n\n    # Explicitly invoke the java binary from the JDK 25 installation directory\n    if [[ -x \"$JDK_INSTALL_DIR/bin/java\" ]]; then\n        log_message \"Output of '$JDK_INSTALL_DIR/bin/java -version':\"\n        local java_version_output\n        java_version_output=$(\"$JDK_INSTALL_DIR/bin/java\" -version 2>&1)\n        echo \"$java_version_output\" | while read -r line; do log_message \"$line\"; done\n\n        # Extract version from the Runtime Environment line (e.g., Temurin-25+20...)\n        # Use ERE for clarity and correct matching of digits+digits\n        installed_version_full=$(echo \"$java_version_output\" | grep 'OpenJDK Runtime Environment' | sed -E -n 's/.*Temurin-([0-9]+)\\+([0-9]+).*/\\1+\\2/p')\n        log_message \"Detected installed JDK 25 full version string: $installed_version_full\"\n\n        if [[ -z \"$installed_version_full\" ]]; then\n             log_message \"Could not extract full version string from installed JDK.\"\n             # Fallback to simpler version detection if full string extraction fails\n             installed_version_short=$(\"$JDK_INSTALL_DIR/bin/java\" -version 2>&1 | grep -oE '\"25[^\"]*\"' | tr -d '\"')\n             log_message \"Fallback: Detected installed JDK 25 short version: $installed_version_short\"\n        else\n            # Use the extracted full version for comparison\n            installed_version_short=\"$installed_version_full\"\n        fi\n\n    else\n        log_message \"No JDK 25 version is currently installed.\"\n        return 1\n    fi\n\n    # Get the latest version of JDK 25 from the API\n    latest_version_full=$(get_latest_jdk25_version)\n    log_message \"Latest available JDK 25 version from API: $latest_version_full\"\n\n    # Extract comparable part from API version (e.g., 25+20)\n    # Use ERE for clarity and correct matching of digits+digits from API string\n    latest_version_short=$(echo \"$latest_version_full\" | sed -E -n 's/([0-9]+)\\.[0-9]+\\.[0-9]+-beta\\+([0-9]+)\\..*/\\1+\\2/p')\n    log_message \"Extracted comparable latest version: $latest_version_short\"\n\n    if [[ -z \"$latest_version_short\" ]]; then\n        log_message \"Could not extract comparable version string from API version.\"\n        # Fallback to comparing full API string if extraction fails\n        latest_version_short=\"$latest_version_full\"\n    fi\n\n    log_message \"Comparing installed version '$installed_version_short' with latest version '$latest_version_short'\"\n\n    if [[ \"$installed_version_short\" == \"$latest_version_short\" ]]; then\n        log_message \"JDK 25 is up-to-date (version $installed_version_full). Skipping installation.\"\n        return 0\n    else\n        log_message \"Installed JDK 25 version ($installed_version_full) is not up-to-date. Latest version is $latest_version_full.\"\n        return 1\n    fi\n}\n\n# Downloads and installs the latest Temurin JDK 25 early access binary, updating environment variables and verifying installation.\n#\n# Globals:\n#   JDK_INSTALL_DIR: Directory where JDK 25 will be installed.\n#   ARCHITECTURE: System architecture string for API queries.\n#\n# Outputs:\n#   Logs progress and errors to standard output.\n#\n# Example:\n#\n#   install_temurin_jdk25\n#   # Installs or updates Temurin JDK 25 early access in $HOME/.jdk-25 and updates PATH and JAVA_HOME.\ninstall_temurin_jdk25() {\n    log_message \"Starting installation of Temurin JDK 25...\"\n    if is_jdk25_up_to_date; then\n        log_message \"Skipping installation as JDK 25 is already up-to-date.\"\n        return\n    fi\n\n    # Update the installation directory to a user-writable location\n    log_message \"JDK installation directory set to: $JDK_INSTALL_DIR\"\n\n    local api_url=\"https://api.adoptium.net/v3/assets/feature_releases/25/ea?architecture=$ARCHITECTURE&heap_size=normal&image_type=jdk&jvm_impl=hotspot&os=linux&page_size=1&project=jdk&sort_order=DESC&vendor=eclipse\"\n    local download_url\n\n    # Fetch the latest JDK 25 early access binary URL\n    log_message \"Fetching latest JDK 25 binary URL from API: $api_url\"\n    download_url=$(curl -s \"$api_url\" | jq -r '.[0].binaries[0].package.link')\n\n    if [ -z \"$download_url\" ]; then\n        log_message \"Error: Unable to fetch Temurin JDK 25 early access binary URL.\"\n        exit 1\n    fi\n\n    log_message \"Downloading JDK 25 binary from: $download_url\"\n    curl -L \"$download_url\" -o /tmp/jdk-25.tar.gz\n    mkdir -p \"$JDK_INSTALL_DIR\"\n    tar -xzf /tmp/jdk-25.tar.gz -C \"$JDK_INSTALL_DIR\" --strip-components=1\n\n    # Update PATH to include the new JDK\n    export PATH=\"$JDK_INSTALL_DIR/bin:$PATH\"\n    log_message \"Temurin JDK 25 early access installed successfully.\"\n\n    # Call the function to update PATH after installation\n    update_path_for_jdk25\n\n    # Verify the JDK installation by running a simple Java command\n    verify_jdk_installation\n}\n\n# Updates PATH and JAVA_HOME to prioritize the installed JDK 25 and refreshes the shell environment.\n#\n# Ensures the JDK 25 binary directory is at the front of PATH and sets JAVA_HOME to the JDK 25 installation directory.\n# Refreshes the shell's command lookup table and logs the output of 'java -version' to confirm the correct Java binary is active.\n#\n# Globals:\n#   JDK_INSTALL_DIR - Path to the JDK 25 installation directory.\n#\n# Outputs:\n#   Logs debug messages and the output of 'java -version' to standard output.\n#\n# Example:\n#   update_path_for_jdk25\nupdate_path_for_jdk25() {\n    if [[ \":$PATH:\" != *\":$JDK_INSTALL_DIR/bin:\"* ]]; then\n        export PATH=\"$JDK_INSTALL_DIR/bin:$PATH\"\n        log_message \"Updated PATH to include JDK 25 installation directory.\"\n    fi\n\n    export JAVA_HOME=\"$JDK_INSTALL_DIR\"\n    log_message \"Set JAVA_HOME to JDK 25 installation directory: $JAVA_HOME\"\n\n    # Ensure the current shell session uses the updated PATH\n    hash -r\n    log_message \"Refreshed shell environment to use updated PATH.\"\n\n    # Verify the java command points to the correct binary\n    log_message \"Output of 'java -version' after PATH update:\"\n    java -version 2>&1 | while read -r line; do log_message \"$line\"; done\n}\n\n# Verifies that the installed Temurin JDK 25 binary is present and reports the correct version.\n#\n# Globals:\n# * JDK_INSTALL_DIR: Directory where Temurin JDK 25 is installed.\n#\n# Outputs:\n# * Prints verification status messages to STDOUT.\n#\n# Returns:\n# * Exits with status 1 if verification fails.\n#\n# Example:\n#\n# ```bash\n# verify_jdk_installation\n# ```\nverify_jdk_installation() {\n    echo \"Verifying Temurin JDK 25 installation...\"\n    if \"$JDK_INSTALL_DIR/bin/java\" -version 2>&1 | grep -qE \"version \\\"25\"; then\n        echo \"Temurin JDK 25 installation verified successfully.\"\n    else\n        echo \"Error: Temurin JDK 25 installation verification failed.\"\n        exit 1\n    fi\n}\n\n# Declare the JDK versions you're interested in\n# These are the JDK versions that the script will attempt to install.\ndeclare -a jdk_versions=(\"8\" \"11\" \"17\" \"21\")\n\n# Verify that sdk is on PATH\n# This ensures that the `sdk` command is available before proceeding.\nif ! command -v sdk &>/dev/null; then\n    echo \"Error: sdk is not installed or not in the PATH. Please install SDKMAN and try again.\"\n    exit 1\nfi\n\n# Loop through each JDK version\n# For each version, determine the appropriate identifier and install it using SDKMAN.\nfor version in \"${jdk_versions[@]}\"; do\n    # Define the pattern to match the JDK version in the SDKMAN list\n    pattern=\" $version\\.0.*-tem\"\n\n    # Retrieve the identifier for the JDK version using SDKMAN\n    # The identifier is extracted by listing available JDKs, filtering with grep, and selecting the last field.\n    identifier=$(\n      PAGER=cat sdk list java \\\n        | grep -E -- \"$pattern\" \\\n        | awk '{print $NF}' \\\n        | head -n1\n    )\n\n    # Check if a valid identifier was found\n    if [ -n \"$identifier\" ]; then\n        echo \"Installing JDK version $version with identifier $identifier\"\n        # Install the JDK version using SDKMAN\n        yes | sdk install java \"$identifier\"\n    else\n        # Log a message if no suitable JDK version is found\n        echo \"No suitable JDK version found for $version\"\n    fi\ndone\n\n# Call the function to install Temurin JDK 25\ninstall_temurin_jdk25"
                    }
                ]
            },
            "createdAt": 1746462303600,
            "isInternal": false
        }
    ],
    "isAgent": false,
    "isNameGenerated": true,
    "isCustomAgent": false,
    "isUnitTestsAgent": false,
    "autoApply": false
}
}